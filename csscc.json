{
    "name": "CSS Crash Course",
    "lessons": [
        {
            "uid": "css-introduction",
            "name": "Introduction",
            "module": null,
            "releaseDate": "0001-01-01T00:00:00Z",
            "acl": {
                "isFree": true,
                "isFreeForStudents": false,
                "productRequired": [
                    "frontendexpert"
                ],
                "isAvailable": true
            },
            "description": "CSS makes up the second pillar of the holy trinity of the modern web. Often unjustly viewed as tedious and frustrating by many developers, it can actually be quite elegant and powerful in the right hands.\n\nInvest the time and effort needed to master CSS, and you'll inevitably stand out among your peers.\n",
            "video": {
                "vimeoId": "648166598",
                "duration": 3,
                "annotations": [],
                "instructor": "Conner Ardman",
                "thumbnail": "https://i.vimeocdn.com/video/1305763995-df6aaf20b7395f6a3384fbde9de23f156682928b20fd54e3f_640x360?r=pad"
            },
            "questions": [],
            "references": [],
            "codeExample": {
                "runtime": "css",
                "arguments": [],
                "files": [
                    {
                        "name": "index.html",
                        "contents": "\u003c!--\nWelcome to our Playground!\n--\u003e\n\n\u003cp\u003e\n  Hello World!\n\u003c/p\u003e",
                        "mode": 420,
                        "isEditable": true
                    },
                    {
                        "name": "styles.css",
                        "contents": "/* Welcome to our Playground! */\n\np {\n  color: blue;\n}",
                        "mode": 420,
                        "isEditable": true
                    }
                ],
                "reactConfig": null
            },
            "links": [],
            "preReqs": [],
            "keyTerms": [],
            "section": "",
            "hasCodeExample": false
        },
        {
            "uid": "css-basics",
            "name": "CSS Basics",
            "module": null,
            "releaseDate": "0001-01-01T00:00:00Z",
            "acl": {
                "isFree": false,
                "isFreeForStudents": false,
                "productRequired": [
                    "frontendexpert"
                ],
                "isAvailable": true
            },
            "description": "Your journey to CSS mastery begins by mastering the basics. Let's dive in!\n",
            "video": {
                "vimeoId": "619442906",
                "duration": 9,
                "annotations": [],
                "instructor": "Conner Ardman",
                "thumbnail": "https://i.vimeocdn.com/video/1299556681-6df29de25a9f8e2dc5d7cb5fac64cf3d5aa1eb0b7e914a694_640x360?r=pad"
            },
            "questions": [],
            "references": [],
            "codeExample": {
                "runtime": "css",
                "arguments": [],
                "files": [
                    {
                        "name": "index.html",
                        "contents": "\u003c!--\nWelcome to our Playground!\n--\u003e\n\n\u003ch1\u003eHello World\u003c/h1\u003e\n\u003cp\u003eI am a paragraph\u003c/p\u003e",
                        "mode": 420,
                        "isEditable": true
                    },
                    {
                        "name": "styles.css",
                        "contents": "/* Welcome to our Playground! */\n\nh1 {\n  text-align: center;\n  color: darkblue;\n}",
                        "mode": 420,
                        "isEditable": true
                    }
                ],
                "reactConfig": null
            },
            "links": [],
            "preReqs": [],
            "keyTerms": [
                {
                    "name": "CSS",
                    "section": null,
                    "definition": "\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  Cascading Style Sheets is the primary styling language of the web. This language\n  is used to describe the style and layout of HTML documents.\n\u003c/p\u003e\n\u003c/div\u003e",
                    "url": "https://developer.mozilla.org/en-US/docs/Web/CSS",
                    "kinds": []
                },
                {
                    "name": "Cascading",
                    "section": null,
                    "definition": "\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  The order that stylesheets are used. These stylesheets can be grouped into\n  three main categories:\n\u003c/p\u003e\n\u003col\u003e\n  \u003cli\u003e\n    \u003cb\u003eUser Agent Stylesheets\u003c/b\u003e: Contain browser defaults for styles, these\n    get the lowest level of precedence.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003eUser Stylesheets\u003c/b\u003e: Contain user preferences saved in the browser, which override\n    user agent stylesheets.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003eAuthor Stylesheets\u003c/b\u003e: Contain the CSS code we write, these get the highest\n    level of precedence (assuming \u003ci\u003e!important\u003c/i\u003e has not been used).\n  \u003c/li\u003e\n\u003c/ol\u003e\n\u003c/div\u003e",
                    "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/Cascade",
                    "kinds": []
                },
                {
                    "name": "Declaration",
                    "section": null,
                    "definition": "\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A CSS property-value pair in the form \u003cspan\u003eproperty: value;\u003c/span\u003e\n\u003c/p\u003e\n\u003c/div\u003e",
                    "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/Syntax#css_declarations",
                    "kinds": []
                },
                {
                    "name": "Declaration Block",
                    "section": null,
                    "definition": "\u003cdiv class=\"html\"\u003e\n  \u003cp\u003eA group of \u003cb\u003edeclarations\u003c/b\u003e surrounded by \u003cspan\u003e{}\u003c/span\u003e, such as:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"code-wrapper prism\"\u003e\n  \u003cpre class=\"line-numbers\"\u003e\u003ccode class=\"language-css\"\u003e{\n  color: blue;\n  margin: 10px;\n}\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e",
                    "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/Syntax#css_declaration_blocks",
                    "kinds": []
                },
                {
                    "name": "Ruleset",
                    "section": null,
                    "definition": "\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A \u003cb\u003eselector\u003c/b\u003e followed by a \u003cb\u003edeclaration block\u003c/b\u003e for styling elements\n  matching the selector with the declarations in the declaration block. Rulesets follow this syntax:\n\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"code-wrapper prism\"\u003e\n  \u003cpre\n    class=\"line-numbers\"\n  \u003e\u003ccode class=\"language-css\"\u003eselector {\n  property: value;\n  property: value;\n}\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e",
                    "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/Syntax#css_rulesets",
                    "kinds": []
                },
                {
                    "name": "\u003clink\u003e",
                    "section": null,
                    "definition": "\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A self-closing HTML tag for linking to external resources, usually CSS stylesheets.\n  When linking to a stylesheet, \u003cspan\u003e\u0026lt;link\u0026gt;\u003c/span\u003e will take two attributes:\n\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\n    \u003cb\u003erel\u003c/b\u003e: The relationship to the other document. For CSS files, this should be \u003cspan\u003estylesheet\u003c/span\u003e.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003ehref\u003c/b\u003e: The path to the linked file, either relative or absolute.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e",
                    "url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link",
                    "kinds": [
                        "html"
                    ]
                }
            ],
            "section": "",
            "hasCodeExample": false
        },
        {
            "uid": "selectors",
            "name": "Selectors",
            "module": null,
            "releaseDate": "0001-01-01T00:00:00Z",
            "acl": {
                "isFree": false,
                "isFreeForStudents": false,
                "productRequired": [
                    "frontendexpert"
                ],
                "isAvailable": true
            },
            "description": "CSS offers a selection of selectors for you to select from.",
            "video": {
                "vimeoId": "617597833",
                "duration": 13,
                "annotations": [],
                "instructor": "Conner Ardman",
                "thumbnail": "https://i.vimeocdn.com/video/1299556979-132fcd11be1f9618f9cb09894491b4aeeef100b22e8c1d0e9_640x360?r=pad"
            },
            "questions": [],
            "references": [],
            "codeExample": {
                "runtime": "css",
                "arguments": [],
                "files": [
                    {
                        "name": "index.html",
                        "contents": "\u003c!--\nWelcome to our Playground!\n--\u003e\n\n\u003ch1\u003eTop Level Heading\u003c/h1\u003e\n\n\u003csection\u003e\n  \u003ch2\u003eSection Heading\u003c/h2\u003e\n  \u003cp\u003eSection paragraph\u003c/p\u003e\n\u003c/section\u003e\n\n\u003cfooter\u003e\n  \u003ch2\u003eFooter Heading\u003c/h2\u003e\n  \u003cp\u003eFooter paragraph\u003c/p\u003e\n\u003c/footer\u003e",
                        "mode": 420,
                        "isEditable": true
                    },
                    {
                        "name": "styles.css",
                        "contents": "/* Welcome to our Playground! */\n\nh1 {\n  color: red;\n}",
                        "mode": 420,
                        "isEditable": true
                    }
                ],
                "reactConfig": null
            },
            "links": [],
            "preReqs": [],
            "keyTerms": [
                {
                    "name": "Selector",
                    "section": null,
                    "definition": "\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A pattern used at the beginning of a \u003cb\u003eruleset\u003c/b\u003e for choosing which\n  elements will be affected by the declarations. There are a variety of different\n  selector types:\n\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\n    \u003cb\u003eType selector\u003c/b\u003e: Selects all of the elements of a specific HTML tag.\n    For example, \u003cspan\u003eh1\u003c/span\u003e would select all \u003cspan\u003e\u0026lt;h1\u0026gt;\u003c/span\u003e elements.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003eClass selector\u003c/b\u003e: Selects all elements with a specific HTML class attribute.\n    Class selectors are prefixed with a \u003cspan\u003e.\u003c/span\u003e, so for example \u003cspan\u003e.foo\u003c/span\u003e\n    would select all HTML elements with the attribute \u003cspan\u003eclass=\"foo\"\u003c/span\u003e.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003eID selector\u003c/b\u003e: Selects an element with a specific HTML ID attribute. ID selectors\n    are prefixed with a \u003cspan\u003e#\u003c/span\u003e, so for example \u003cspan\u003e#bar\u003c/span\u003e would\n    select the HTML element with the attribute \u003cspan\u003eid=\"bar\"\u003c/span\u003e.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003eAttribute selector\u003c/b\u003e: Selects all elements with a specific HTML attribute\n    set to a specific value. These are surrounded by \u003cspan\u003e[]\u003c/span\u003e and use a\n    \u003cspan\u003e=\u003c/span\u003e as a delimiter between the attribute name and value. For example,\n    \u003cspan\u003e[type=\"submit\"]\u003c/span\u003e would select all elements with a type attribute\n    set to \"submit\".\n    \u003cbr /\u003e\n    \u003cbr /\u003e\n    Excluding the value will select all elements with the attribute\n    set to any value. For example, \u003cspan\u003e[type]\u003c/span\u003e would select all elements with\n    the type attribute set, regardless of the value.\n    \u003cbr /\u003e\n    \u003cbr /\u003e\n    Attribute selectors can also use special syntax for basic pattern matching\n    within the value. There are a variety of options here, but these are some of the\n    more common ones:\n    \u003cul\u003e\n      \u003cli\u003e\n        \u003cspan\u003e[href*=\"algoexpert.io\"]\u003c/span\u003e would select all elements with an href attribute\n        with the text \"algoexpert.io\" at any location.\n      \u003c/li\u003e\n      \u003cli\u003e\n        \u003cspan\u003e[href$=\"algoexpert.io\"]\u003c/span\u003e would select all elements with an href attribute\n        with the text \"algoexpert.io\" at the end of the value.\n      \u003c/li\u003e\n      \u003cli\u003e\n        \u003cspan\u003e[href^=\"https://algoexpert.io\"]\u003c/span\u003e would select all elements with an href attribute\n        with the text \"https://algoexpert.io\" at the beginning of the value.\n      \u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003eCombinator\u003c/b\u003e: Combines multiple selectors to select elements based on\n    their location in the DOM. There are a few types of combinators:\n    \u003cul\u003e\n      \u003cli\u003e\n        \u003cb\u003eDescendant combinator\u003c/b\u003e: Represented by a single space, in the format\n        \u003cspan\u003eselector1 selector2\u003c/span\u003e. Selects all elements that match \u003cspan\u003eselector2\u003c/span\u003e\n        and are a descendant of an element matching \u003cspan\u003eselector1\u003c/span\u003e. A descendant\n        does not need to be a direct child (e.g. the selected element's grandparent\n        could match selector1).\n      \u003c/li\u003e\n      \u003cli\u003e\n        \u003cb\u003eChild combinator\u003c/b\u003e: Represented by \u003cspan\u003e\u0026gt;\u003c/span\u003e, in the format\n        \u003cspan\u003eselector1 \u0026gt; selector2\u003c/span\u003e. Selects all elements that match \u003cspan\u003eselector2\u003c/span\u003e\n        and are a direct child of an element matching \u003cspan\u003eselector1\u003c/span\u003e.\n      \u003c/li\u003e\n      \u003cli\u003e\n        \u003cb\u003eSibling combinator\u003c/b\u003e: Represented by \u003cspan\u003e~\u003c/span\u003e, in the format\n        \u003cspan\u003eselector1 ~ selector2\u003c/span\u003e. Selects all elements that match \u003cspan\u003eselector2\u003c/span\u003e\n        and are a sibling of an element matching \u003cspan\u003eselector1\u003c/span\u003e. The element matching\n        \u003cspan\u003eselector2\u003c/span\u003e must come after the element matching \u003cspan\u003eselector1\u003c/span\u003e.\n      \u003c/li\u003e\n      \u003cli\u003e\n        \u003cb\u003eAdjacent sibling combinator\u003c/b\u003e: Represented by \u003cspan\u003e+\u003c/span\u003e, in the format\n        \u003cspan\u003eselector1 + selector2\u003c/span\u003e. Selects all elements that match \u003cspan\u003eselector2\u003c/span\u003e\n        and have an element matching \u003cspan\u003eselector1\u003c/span\u003e directly before them in the DOM.\n      \u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e",
                    "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors",
                    "kinds": []
                }
            ],
            "section": "",
            "hasCodeExample": false
        },
        {
            "uid": "pseudo-classes-and-elements",
            "name": "Pseudo Classes And Elements",
            "module": null,
            "releaseDate": "0001-01-01T00:00:00Z",
            "acl": {
                "isFree": false,
                "isFreeForStudents": false,
                "productRequired": [
                    "frontendexpert"
                ],
                "isAvailable": true
            },
            "description": "\u003c!-- Okay, you got me, I don't actually have a pseudo-class. --\u003e\u003cspan\n  onmouseover=\"this.style.backgroundColor = '#11967e'; this.style.color = 'white';\"\n  onmouseout=\"this.style.backgroundColor = 'inherit'; this.style.color = '#445d6e';\"\n  \u003eHover over me, I have a pseudo-class.\u003c/span\n\u003e",
            "video": {
                "vimeoId": "618474726",
                "duration": 12,
                "annotations": [],
                "instructor": "Conner Ardman",
                "thumbnail": "https://i.vimeocdn.com/video/1299554684-61da2147381a217d215adea70bdc410ea9c13dd0c8ccb4391_640x360?r=pad"
            },
            "questions": [],
            "references": [],
            "codeExample": {
                "runtime": "css",
                "arguments": [],
                "files": [
                    {
                        "name": "index.html",
                        "contents": "\u003c!--\nWelcome to our Playground!\n--\u003e\n\n\u003ch1\u003eHello World\u003c/h1\u003e\n\n\u003cp\u003e\n  Go to\n  \u003ca href=\"https://algoexpert.io\"\u003eAlgoExpert\u003c/a\u003e\n\u003c/p\u003e\n\n\u003cp\u003eAlgoExpert is the best!\u003c/p\u003e\n\u003cp\u003eFrontendExpert is the best!\u003c/p\u003e\n\n\u003clabel for=\"input\"\u003eInput: \u003c/label\u003e\n\u003cinput id=\"input\" type=\"text\" /\u003e",
                        "mode": 420,
                        "isEditable": true
                    },
                    {
                        "name": "styles.css",
                        "contents": "/* Welcome to our Playground! */\n\na:link {\n  color: red;\n}\n\na:visited {\n  color: green;\n}",
                        "mode": 420,
                        "isEditable": true
                    }
                ],
                "reactConfig": null
            },
            "links": [],
            "preReqs": [],
            "keyTerms": [
                {
                    "name": "Pseudo Class",
                    "section": null,
                    "definition": "\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  An addition to a CSS selector for selecting based on the current state\n  of the element. These start with \u003cspan\u003e:\u003c/span\u003e, so for example\n  \u003cspan\u003ebutton:hover\u003c/span\u003e would select buttons currently hovered over.\n\u003c/p\u003e\n\u003c/div\u003e",
                    "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes",
                    "kinds": []
                },
                {
                    "name": "Pseudo Element",
                    "section": null,
                    "definition": "\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  An addition to a CSS selector for selecting a specific portion of the element.\n  These start with \u003cspan\u003e::\u003c/span\u003e, so for example\n  \u003cspan\u003ep::first-letter\u003c/span\u003e would select the first letter of paragraphs.\n\u003c/p\u003e\n\n\u003cp\u003e\n  \u003cspan\u003e::before\u003c/span\u003e and \u003cspan\u003e::after\u003c/span\u003e are special pseudo elements\n  that insert children before or after the content of the element, allowing\n  for styling before or after the content. This is oftentimes used\n  with the CSS \u003cspan\u003econtent\u003c/span\u003e property, but not always.\n\u003c/p\u003e\n\u003c/div\u003e",
                    "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements",
                    "kinds": []
                }
            ],
            "section": "",
            "hasCodeExample": false
        },
        {
            "uid": "selector-specificity",
            "name": "Selector Specificity",
            "module": null,
            "releaseDate": "0001-01-01T00:00:00Z",
            "acl": {
                "isFree": false,
                "isFreeForStudents": false,
                "productRequired": [
                    "frontendexpert"
                ],
                "isAvailable": true
            },
            "description": "While humans unfortunately often resort to violence as a means of conflict resolution, CSS instead prefers to take a more mathematical approach to settling disputes.",
            "video": {
                "vimeoId": "618474143",
                "duration": 5,
                "annotations": [],
                "instructor": "Conner Ardman",
                "thumbnail": "https://i.vimeocdn.com/video/1299557226-0c3fa72562fb318b46cb4489aaaad102f82abe954c03a8c70_640x360?r=pad"
            },
            "questions": [],
            "references": [],
            "codeExample": {
                "runtime": "css",
                "arguments": [],
                "files": [
                    {
                        "name": "index.html",
                        "contents": "\u003c!--\nWelcome to our Playground!\n--\u003e\n\n\u003cdiv\u003e\n  \u003cp class=\"red\" id=\"green\"\u003eWhat color am I?\u003c/p\u003e\n\u003c/div\u003e",
                        "mode": 420,
                        "isEditable": true
                    },
                    {
                        "name": "styles.css",
                        "contents": "/* Welcome to our Playground! */\n\np {\n  color: blue;\n}\n\n.red {\n  color: red;\n}\n\n#green {\n  color: green;\n}\n\n/*\n  Even though this might seem specific,\n  it is still less specific than an ID!\n*/\ndiv \u003e p.red {\n  color: black;\n}",
                        "mode": 420,
                        "isEditable": true
                    }
                ],
                "reactConfig": null
            },
            "links": [],
            "preReqs": [],
            "keyTerms": [
                {
                    "name": "Specificity",
                    "section": null,
                    "definition": "\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  The algorithm used by the browser to determine which CSS declarations to use\n  when an element is selected by two rulesets with the same property.\n\u003c/p\u003e\n\n\u003cp\u003e\n  Specificity is roughly calculated by counting the number of each selector\n  type involved in a selector and multiplying by a weight. These weights are as follows:\n\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003cb\u003eInline Styles\u003c/b\u003e: 1000\u003c/li\u003e\n  \u003cli\u003e\u003cb\u003eIDs\u003c/b\u003e: 100\u003c/li\u003e\n  \u003cli\u003e\u003cb\u003eClasses\u003c/b\u003e: 10\u003c/li\u003e\n  \u003cli\u003e\u003cb\u003ePseudo-Classes\u003c/b\u003e: 10\u003c/li\u003e\n  \u003cli\u003e\u003cb\u003eAttributes\u003c/b\u003e: 10\u003c/li\u003e\n  \u003cli\u003e\u003cb\u003eElements\u003c/b\u003e: 1\u003c/li\u003e\n  \u003cli\u003e\u003cb\u003ePseudo-Elements\u003c/b\u003e: 1\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e",
                    "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity",
                    "kinds": []
                }
            ],
            "section": "",
            "hasCodeExample": false
        },
        {
            "uid": "css-units",
            "name": "CSS Units",
            "module": null,
            "releaseDate": "0001-01-01T00:00:00Z",
            "acl": {
                "isFree": false,
                "isFreeForStudents": false,
                "productRequired": [
                    "frontendexpert"
                ],
                "isAvailable": true
            },
            "description": "cm, mm, Q, in, pc, pt, px, em, ex, ch, rem, lh, vw, vh, vmin, vmax...\n\nThat's a lot of units! Most of them are kind of useless though. You'll have to watch the video to figure out which ones are worth being familiar with!",
            "video": {
                "vimeoId": "620130467",
                "duration": 17,
                "annotations": [],
                "instructor": "Conner Ardman",
                "thumbnail": "https://i.vimeocdn.com/video/1299555547-9f96f0d3ffd5ecfec545912bfb0a3ffe3bc5987e4249b0d7f_640x360?r=pad"
            },
            "questions": [],
            "references": [],
            "codeExample": {
                "runtime": "css",
                "arguments": [],
                "files": [
                    {
                        "name": "index.html",
                        "contents": "\u003c!--\nWelcome to our Playground!\n--\u003e\n\n\u003cdiv id=\"div1\"\u003e\n  \u003cp\u003eParagraph 1\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cdiv id=\"div2\"\u003e\n  \u003cp\u003eParagraph 2\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cdiv id=\"div3\"\u003e\n  \u003cp\u003eParagraph 3\u003c/p\u003e\n\u003c/div\u003e",
                        "mode": 420,
                        "isEditable": true
                    },
                    {
                        "name": "styles.css",
                        "contents": "/* Welcome to our Playground! */\n\n:root {\n  font-size: 18px;\n}\n\n#div1 {\n  /* Has no effect, since the paragraph uses px */\n  font-size: 18px;\n}\n\n#div1 p {\n  font-size: 16px; /* 16px */\n}\n\n#div2 {\n  font-size: 24px;\n}\n\n#div2 p {\n  font-size: 1.5em; /* 36px */\n}\n\n#div3 {\n  /* Has no effect, since the paragraph uses rem */\n  font-size: 24px;\n}\n\n#div3 p {\n  font-size: 1.5rem; /* 27px */\n}",
                        "mode": 420,
                        "isEditable": true
                    }
                ],
                "reactConfig": null
            },
            "links": [],
            "preReqs": [],
            "keyTerms": [
                {
                    "name": "Absolute Unit",
                    "section": null,
                    "definition": "\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A unit whose value is not dependent on something else, so its size will\n  be constant regardless of the context. In general, the \u003cspan\u003epx\u003c/span\u003e unit is the only\n  one of these used on the web.\n\u003c/p\u003e\n\u003c/div\u003e",
                    "url": null,
                    "kinds": []
                },
                {
                    "name": "Relative Unit",
                    "section": null,
                    "definition": "\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A unit whose value is dependent on something else. These are the most\n  frequently used relative units:\n\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\n    \u003cb\u003eem\u003c/b\u003e: Relative to the font size. For example, if the font size is\n    \u003cspan\u003e14px\u003c/span\u003e, then \u003cspan\u003e1.5em\u003c/span\u003e would be \u003cspan\u003e21px\u003c/span\u003e.\n    If the em unit is used to set font size, it will be relative to the parent's font size.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003erem\u003c/b\u003e: Relative to the root element's font size. By default, this\n    is usually \u003cspan\u003e16px\u003c/span\u003e, but it can be overridden by the user stylesheet. Moreover,\n    the author stylesheets can change this by setting a font size on the \u003cspan\u003ehtml\u003c/span\u003e\n    selector or the \u003cspan\u003e:root\u003c/span\u003e pseudo class. For example, by default\n    \u003cspan\u003e1.5rem\u003c/span\u003e will be \u003cspan\u003e24px\u003c/span\u003e.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003e%\u003c/b\u003e: A percentage, usually of the parents value for the same property. For\n    example, a width of \u003cspan\u003e50%\u003c/span\u003e would be half the size of the parent element's width.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003evw\u003c/b\u003e: A percentage of the width of the viewport, for example \u003cspan\u003e50vw\u003c/span\u003e\n    would be half of the width of the viewport.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003evh\u003c/b\u003e: A percentage of the height of the viewport, for example \u003cspan\u003e50vh\u003c/span\u003e\n    would be half of the height of the viewport.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003ech\u003c/b\u003e: The number of characters on a line, based on the size of the \"0\"\n    character in the element's font. This can be useful to prevent paragraphs\n    from spanning more than ~70 characters in width, which can become hard to read.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e",
                    "url": null,
                    "kinds": []
                }
            ],
            "section": "",
            "hasCodeExample": false
        },
        {
            "uid": "block-vs-inline",
            "name": "Block vs. Inline",
            "module": null,
            "releaseDate": "0001-01-01T00:00:00Z",
            "acl": {
                "isFree": false,
                "isFreeForStudents": false,
                "productRequired": [
                    "frontendexpert"
                ],
                "isAvailable": true
            },
            "description": "block\nblock\nblock\ninline inline inline\n\nThat's pretty much it.",
            "video": {
                "vimeoId": "620196694",
                "duration": 5,
                "annotations": [],
                "instructor": "Conner Ardman",
                "thumbnail": "https://i.vimeocdn.com/video/1299559745-1043238a353eeda7437dda83bd1d2edfef531f96abb0f77a3_640x360?r=pad"
            },
            "questions": [],
            "references": [],
            "codeExample": {
                "runtime": "css",
                "arguments": [],
                "files": [
                    {
                        "name": "index.html",
                        "contents": "\u003c!--\nWelcome to our Playground!\n--\u003e\n\n\u003cp\u003eI'm a paragraph!\u003c/p\u003e\n\u003cp\u003eI'm \u003cem\u003eanother\u003c/em\u003e paragraph!\u003c/p\u003e",
                        "mode": 420,
                        "isEditable": true
                    },
                    {
                        "name": "styles.css",
                        "contents": "/* Welcome to our Playground! */\n\np {\n  border: 2px solid black;\n}\n\nem {\n  border: 2px solid blue;\n}",
                        "mode": 420,
                        "isEditable": true
                    }
                ],
                "reactConfig": null
            },
            "links": [],
            "preReqs": [],
            "keyTerms": [
                {
                    "name": "Block Element",
                    "section": null,
                    "definition": "\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  An element with its \u003cspan\u003edisplay\u003c/span\u003e property set to \u003cspan\u003eblock\u003c/span\u003e.\n  These have a few key properties:\n\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eThey start on new lines.\u003c/li\u003e\n  \u003cli\u003eBy default they span the entire width of their parent.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e",
                    "url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Block-level_elements",
                    "kinds": []
                },
                {
                    "name": "Inline Element",
                    "section": null,
                    "definition": "\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  An element with its \u003cspan\u003edisplay\u003c/span\u003e property set to \u003cspan\u003einline\u003c/span\u003e.\n  These have a few key properties:\n\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eThey start immediately after the content before them, without a new line.\u003c/li\u003e\n  \u003cli\u003eThey span the width of their content.\u003c/li\u003e\n  \u003cli\u003e\u003cspan\u003ewidth\u003c/span\u003e and \u003cspan\u003eheight\u003c/span\u003e properties have no effect on them.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e",
                    "url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Inline_elements",
                    "kinds": []
                },
                {
                    "name": "Inline-Block Element",
                    "section": null,
                    "definition": "\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  An element with its \u003cspan\u003edisplay\u003c/span\u003e property set to \u003cspan\u003einline-block\u003c/span\u003e.\n  These have a few key properties:\n\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eThey start immediately after the content before them, without a new line.\u003c/li\u003e\n  \u003cli\u003eThey span the width of their content by default, but this can be changed.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e",
                    "url": null,
                    "kinds": []
                }
            ],
            "section": "",
            "hasCodeExample": false
        },
        {
            "uid": "box-model",
            "name": "Box Model",
            "module": null,
            "releaseDate": "0001-01-01T00:00:00Z",
            "acl": {
                "isFree": false,
                "isFreeForStudents": false,
                "productRequired": [
                    "frontendexpert"
                ],
                "isAvailable": true
            },
            "description": "In order to succeed at CSS, you must always be thinking \u003cs\u003eoutside\u003c/s\u003e inside the box.",
            "video": {
                "vimeoId": "621115685",
                "duration": 11,
                "annotations": [],
                "instructor": "Conner Ardman",
                "thumbnail": "https://i.vimeocdn.com/video/1299555844-d5bdbbac691f64e8c094d4ba1b71421968e675f1d9fd4e7cb_640x360?r=pad"
            },
            "questions": [],
            "references": [],
            "codeExample": {
                "runtime": "css",
                "arguments": [],
                "files": [
                    {
                        "name": "index.html",
                        "contents": "\u003c!--\nWelcome to our Playground!\n--\u003e\n\n\u003cp\u003eI'm a paragraph!\u003c/p\u003e\n\u003cp\u003eI'm \u003cem\u003eanother\u003c/em\u003e paragraph!\u003c/p\u003e",
                        "mode": 420,
                        "isEditable": true
                    },
                    {
                        "name": "styles.css",
                        "contents": "/* Welcome to our Playground! */\n\np {\n  /*\n   Note paragraphs have a default margin, so a value of 0\n   would be needed to completely remove this margin.\n  */\n  margin: 24px;\n  padding: 10px;\n  border: 2px solid black;\n  background-color: lightblue;\n}",
                        "mode": 420,
                        "isEditable": true
                    }
                ],
                "reactConfig": null
            },
            "links": [],
            "preReqs": [],
            "keyTerms": [
                {
                    "name": "Box Model",
                    "section": null,
                    "definition": "\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A box surrounding all elements on the document used for layout. From inside to out,\n  this consists of the \u003cb\u003econtent\u003c/b\u003e, \u003cb\u003epadding\u003c/b\u003e, \u003cb\u003eborder\u003c/b\u003e and \u003cb\u003emargin\u003c/b\u003e.\n\u003c/p\u003e\n\u003c/div\u003e",
                    "url": "https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/The_box_model",
                    "kinds": []
                },
                {
                    "name": "padding",
                    "section": null,
                    "definition": "\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A property used to create extra space within an element, between the\n  \u003cb\u003econtent\u003c/b\u003e and \u003cb\u003eborder\u003c/b\u003e. The \u003cspan\u003epadding\u003c/span\u003e CSS property is a\n  shorthand for \u003cspan\u003epadding-top\u003c/span\u003e, \u003cspan\u003epadding-right\u003c/span\u003e,\n  \u003cspan\u003epadding-bottom\u003c/span\u003e and \u003cspan\u003epadding-left\u003c/span\u003e in that order.\n\u003c/p\u003e\n\u003c/div\u003e",
                    "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/padding",
                    "kinds": [
                        "css"
                    ]
                },
                {
                    "name": "border",
                    "section": null,
                    "definition": "\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A property used to create a border around the content and padding of an element.\n  The \u003cspan\u003eborder\u003c/span\u003e CSS property is a shorthand for \u003cspan\u003eborder-color\u003c/span\u003e,\n  \u003cspan\u003eborder-style\u003c/span\u003e and \u003cspan\u003eborder-width\u003c/span\u003e, which it takes as space\n  separated values in any order. For example, \u003cspan\u003eborder: 1px solid black\u003c/span\u003e\n  would create a one pixel, solid black border.\n\u003c/p\u003e\n\n\u003cp\u003e\n  A \u003cspan\u003eborder-radius\u003c/span\u003e can also be used to create rounded corners on an\n  element, regardless of if it has a border. This defines the radius of the corners,\n  and a value of \u003cspan\u003e50%\u003c/span\u003e is often used on square elements to create a circle.\n\u003c/p\u003e\n\n\u003cp\u003e\n  Additionally, \u003cspan\u003eborder-top\u003c/span\u003e, \u003cspan\u003eborder-right\u003c/span\u003e, \u003cspan\u003eborder-bottom\u003c/span\u003e\n  and \u003cspan\u003eborder-left\u003c/span\u003e can be used to set borders on a single side of an element.\n\u003c/p\u003e\n\u003c/div\u003e",
                    "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/border",
                    "kinds": [
                        "css"
                    ]
                },
                {
                    "name": "margin",
                    "section": null,
                    "definition": "\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A property used to create extra space around an element. The \u003cspan\u003emargin\u003c/span\u003e\n  CSS property is a shorthand for \u003cspan\u003emargin-top\u003c/span\u003e, \u003cspan\u003emargin-right\u003c/span\u003e,\n  \u003cspan\u003emargin-bottom\u003c/span\u003e and \u003cspan\u003emargin-left\u003c/span\u003e in that order.\n\u003c/p\u003e\n\n\u003cp\u003e\n  A value of \u003cspan\u003eauto\u003c/span\u003e can also be used to allow the browser to choose margins,\n  which will usually center block elements horizontally.\n\u003c/p\u003e\n\n\u003cp\u003e\n  Adjacent horizontal margins will be added together to determine the space between\n  elements. Vertical margins on the other hand will usually be collapsed, meaning\n  only the larger margin value will be used.\n\u003c/p\u003e\n\u003c/div\u003e",
                    "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/margin",
                    "kinds": [
                        "css"
                    ]
                }
            ],
            "section": "",
            "hasCodeExample": false
        },
        {
            "uid": "box-sizing",
            "name": "Box Sizing",
            "module": null,
            "releaseDate": "0001-01-01T00:00:00Z",
            "acl": {
                "isFree": false,
                "isFreeForStudents": false,
                "productRequired": [
                    "frontendexpert"
                ],
                "isAvailable": true
            },
            "description": "What do countries and CSS developers have in common?\n\nThey both have to deal with border conflicts.",
            "video": {
                "vimeoId": "628885253",
                "duration": 4,
                "annotations": [],
                "instructor": "Conner Ardman",
                "thumbnail": "https://i.vimeocdn.com/video/1299559288-51609ee8ad84ac3aef301ffb12ddbf5ca0a30ab147b056cf6_640x360?r=pad"
            },
            "questions": [],
            "references": [],
            "codeExample": {
                "runtime": "css",
                "arguments": [],
                "files": [
                    {
                        "name": "index.html",
                        "contents": "\u003c!--\nWelcome to our Playground!\n--\u003e\n\n\u003cdiv class=\"container\"\u003e\n  \u003cp\u003eBorder-Box Container\u003c/p\u003e\n  \u003cdiv class=\"border-box child\"\u003e\n    \u003cp\u003eChild\u003c/p\u003e\n  \u003c/div\u003e\n\u003c/div\u003e\n\n\n\u003cdiv class=\"container\"\u003e\n  \u003cp\u003eContent-Box Container\u003c/p\u003e\n  \u003cdiv class=\"content-box child\"\u003e\n    \u003cp\u003eChild\u003c/p\u003e\n  \u003c/div\u003e\n\u003c/div\u003e",
                        "mode": 420,
                        "isEditable": true
                    },
                    {
                        "name": "styles.css",
                        "contents": "/* Welcome to our Playground! */\n\n.container {\n  width: 50vw;\n  background-color: lightblue;\n}\n\n.child {\n  width: 100%;\n  border: 10px solid black;\n  padding: 0 8px;\n  background-color: orange;\n}\n\n.border-box {\n  box-sizing: border-box;\n}\n\n.content-box {\n  box-sizing: content-box;\n}",
                        "mode": 420,
                        "isEditable": true
                    }
                ],
                "reactConfig": null
            },
            "links": [],
            "preReqs": [],
            "keyTerms": [
                {
                    "name": "box-sizing",
                    "section": null,
                    "definition": "\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A CSS property for specifying how width and height\n  should be calculated for the selected element. The default value is \u003cspan\u003econtent-box\u003c/span\u003e\n  for most elements, which sets the width and height to only control the size of the\n  content. However, a value of \u003cspan\u003eborder-box\u003c/span\u003e would include the size of\n  the padding and border.\n\u003c/p\u003e\n\n\u003cp\u003e\n  For example, if an element has \u003cspan\u003ewidth: 100px\u003c/span\u003e,\n  \u003cspan\u003epadding: 12px\u003c/span\u003e, and \u003cspan\u003eborder: 24px\u003c/span\u003e, then with\n  \u003cspan\u003ebox-sizing: content-box\u003c/span\u003e it would take up a total of \u003cspan\u003e172px\u003c/span\u003e\n  of width (note this includes padding and border twice to account for the left and right side).\n  However, with \u003cspan\u003ebox-sizing: border-box\u003c/span\u003e it would only take up\n  a total width of \u003cspan\u003e100px\u003c/span\u003e.\n\u003c/p\u003e\n\u003c/div\u003e",
                    "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/box-sizing",
                    "kinds": [
                        "css"
                    ]
                }
            ],
            "section": "",
            "hasCodeExample": false
        },
        {
            "uid": "position",
            "name": "Position",
            "module": null,
            "releaseDate": "0001-01-01T00:00:00Z",
            "acl": {
                "isFree": false,
                "isFreeForStudents": false,
                "productRequired": [
                    "frontendexpert"
                ],
                "isAvailable": true
            },
            "description": "Ah, position. \n\nAlso commonly known as \u003cb\u003e\"why doesn't this work\"\u003c/b\u003e, \u003cb\u003e\"I hate CSS\"\u003c/b\u003e, and \u003cb\u003e\"I need a drink\"\u003c/b\u003e.",
            "video": {
                "vimeoId": "622219410",
                "duration": 12,
                "annotations": [],
                "instructor": "Conner Ardman",
                "thumbnail": "https://i.vimeocdn.com/video/1299560080-7a2823ed3461fe7fc7f574a1ff997d41f73cdfbd3b7e34265_640x360?r=pad"
            },
            "questions": [],
            "references": [],
            "codeExample": {
                "runtime": "css",
                "arguments": [],
                "files": [
                    {
                        "name": "index.html",
                        "contents": "\u003c!--\nWelcome to our Playground!\n--\u003e\n\n\u003cdiv\u003e\n  \u003cp\u003eTry changing my position property!\u003c/p\u003e\n\u003c/div\u003e",
                        "mode": 420,
                        "isEditable": true
                    },
                    {
                        "name": "styles.css",
                        "contents": "/* Welcome to our Playground! */\n\ndiv {\n  height: 50vh;\n  margin: 24px;\n  background-color: lightgrey;\n  position: relative;\n}\n\np {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n}",
                        "mode": 420,
                        "isEditable": true
                    }
                ],
                "reactConfig": null
            },
            "links": [],
            "preReqs": [],
            "keyTerms": [
                {
                    "name": "position",
                    "section": null,
                    "definition": "\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A CSS property for setting how the browser should position an element in the\n  document. This defaults to \u003cspan\u003estatic\u003c/span\u003e, but can take a variety\n  of values:\n\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\n    \u003cb\u003estatic\u003c/b\u003e: The default value, the element follows the flow of the document.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003efixed\u003c/b\u003e: The element is positioned relative to the viewport and removed from\n    the normal flow of the document. The \u003cspan\u003etop\u003c/span\u003e, \u003cspan\u003eleft\u003c/span\u003e, \u003cspan\u003eright\u003c/span\u003e\n    and \u003cspan\u003ebottom\u003c/span\u003e properties can then be used to move the element.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003erelative\u003c/b\u003e: The element is positioned in the same place as it would be\n    with \u003cb\u003estatic\u003c/b\u003e, however, it can be repositioned with \u003cspan\u003etop\u003c/span\u003e,\n    \u003cspan\u003eleft\u003c/span\u003e, \u003cspan\u003eright\u003c/span\u003e and \u003cspan\u003ebottom\u003c/span\u003e relative to\n    its natural position on the document.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003esticky\u003c/b\u003e: The element will act similar to a \u003cb\u003erelative\u003c/b\u003e positioned\n    element, but once it scrolls off screen it will stay fixed to the screen, essentially\n    acting as \u003cspan\u003eposition: fixed\u003c/span\u003e. This is particularly useful for menu bars\n    that need to \"stick\" to the top of the screen as the user scrolls.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003eabsolute\u003c/b\u003e: By default, this will act the same as \u003cb\u003efixed\u003c/b\u003e, except\n    the element will be positioned relative to the document instead of the viewport.\n    This means that, as the page is scrolled, it will move with the page rather \n    than stay at the same viewport location. However, if any element above it in the DOM,\n    oftentimes referred to as an \u003ci\u003eancestor\u003c/i\u003e, has a position value other than\n    \u003cb\u003estatic\u003c/b\u003e, then it will be positioned relative to that nearest positioned\n    ancestor.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e",
                    "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/position",
                    "kinds": [
                        "css"
                    ]
                }
            ],
            "section": "",
            "hasCodeExample": false
        },
        {
            "uid": "stacking-contexts",
            "name": "Stacking Contexts",
            "module": null,
            "releaseDate": "0001-01-01T00:00:00Z",
            "acl": {
                "isFree": false,
                "isFreeForStudents": false,
                "productRequired": [
                    "frontendexpert"
                ],
                "isAvailable": true
            },
            "description": "When CSS goes 3D.",
            "video": {
                "vimeoId": "621933154",
                "duration": 6,
                "annotations": [],
                "instructor": "Conner Ardman",
                "thumbnail": "https://i.vimeocdn.com/video/1299555282-5b8bcdaeb73f78e405b56b91beccbddd77a609f9be5484691_640x360?r=pad"
            },
            "questions": [],
            "references": [],
            "codeExample": {
                "runtime": "css",
                "arguments": [],
                "files": [
                    {
                        "name": "index.html",
                        "contents": "\u003c!--\nWelcome to our Playground!\n--\u003e\n\n\u003csection\u003e\n  \u003cdiv id=\"red\"\u003eRed\u003c/div\u003e\n  \u003cdiv id=\"blue\"\u003eBlue\u003c/div\u003e\n\u003c/section\u003e\n\u003cdiv id=\"green\"\u003eGreen\u003c/div\u003e",
                        "mode": 420,
                        "isEditable": true
                    },
                    {
                        "name": "styles.css",
                        "contents": "/* Welcome to our Playground! */\n\n#red {\n  z-index: 1;\n  background-color: red;\n}\n\n#blue {\n  z-index: 2;\n  top: 30px;\n  left: 150px;\n  background-color: blue;\n}\n\n#green {\n  z-index: 3;\n  top: 100px;\n  left: 40px;\n  background-color: green;\n}\n\ndiv {\n  position: fixed;\n  width: 40vw;\n  height: 125px;\n  border: 5px solid black;\n  padding: 0.5rem;\n  color: white;\n  font-size: 2rem;\n  font-weight: bold;\n}",
                        "mode": 420,
                        "isEditable": true
                    }
                ],
                "reactConfig": null
            },
            "links": [],
            "preReqs": [],
            "keyTerms": [
                {
                    "name": "Stacking Context",
                    "section": null,
                    "definition": "\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A group of elements positioned together on the z-axis. Stacking contexts\n  can be nested within other stacking contexts, and \u003cspan\u003ez-index\u003c/span\u003e\n  values are used to determine the layering of elements with the same\n  \u003cb\u003estacking context parent\u003c/b\u003e.\n\u003c/p\u003e\n\u003c/div\u003e",
                    "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context",
                    "kinds": []
                }
            ],
            "section": "",
            "hasCodeExample": false
        },
        {
            "uid": "flexbox",
            "name": "Flexbox",
            "module": null,
            "releaseDate": "0001-01-01T00:00:00Z",
            "acl": {
                "isFree": false,
                "isFreeForStudents": false,
                "productRequired": [
                    "frontendexpert"
                ],
                "isAvailable": true
            },
            "description": "Ah, flexbox. \n\nAlso commonly known as \u003cb\u003e\"I can finally position things\"\u003c/b\u003e, \u003cb\u003e\"CSS ain't so bad\"\u003c/b\u003e, and \u003cb\u003e\"wow, I haven't punched my monitor today\"\u003c/b\u003e.",
            "video": {
                "vimeoId": "625107667",
                "duration": 17,
                "annotations": [],
                "instructor": "Conner Ardman",
                "thumbnail": "https://i.vimeocdn.com/video/1299559912-5d3ea2361298ed9ed80950db2103d129deff02e7b573b543f_640x360?r=pad"
            },
            "questions": [],
            "references": [],
            "codeExample": {
                "runtime": "css",
                "arguments": [],
                "files": [
                    {
                        "name": "index.html",
                        "contents": "\u003c!--\nWelcome to our Playground!\n--\u003e\n\n\u003csection\u003e\n  \u003cdiv class=\"red\"\u003eRed\u003c/div\u003e\n  \u003cdiv class=\"green\"\u003eGreen\u003c/div\u003e\n  \u003cdiv class=\"blue\"\u003eBlue\u003c/div\u003e\n\u003c/section\u003e",
                        "mode": 420,
                        "isEditable": true
                    },
                    {
                        "name": "styles.css",
                        "contents": "/* Welcome to our Playground! */\n\nsection {\n  height: 90vh;\n  border: 2px dotted black;\n}\n\n.red {\n  height: 25px;\n  background-color: red;\n}\n\n.green {\n  height: 40px;\n  background-color: green;\n}\n\n.blue {\n  height: 30px;\n  background-color: blue;\n}\n\ndiv {\n  border: 5px solid black;\n  padding: 0.5rem;\n  color: white;\n  font-size: 1.5rem;\n  font-weight: bold;\n}",
                        "mode": 420,
                        "isEditable": true
                    }
                ],
                "reactConfig": null
            },
            "links": [],
            "preReqs": [],
            "keyTerms": [
                {
                    "name": "Flexbox",
                    "section": null,
                    "definition": "\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A layout model, also known as the Flexible Box Layout Module, particularly\n  useful for building responsive designs with row or column layouts.\n  An element can be made a \u003cb\u003eflex container\u003c/b\u003e with \u003cspan\u003edisplay: flex\u003c/span\u003e,\n  and all of its direct children will automatically be laid out as \u003cb\u003eflex items\u003c/b\u003e.\n\u003c/p\u003e\n\n\u003cp\u003e\n  For flex containers, these are some of the most common properties used to layout\n  their flex items:\n\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\n    \u003cb\u003eflex-direction\u003c/b\u003e: Determines which direction is the \u003cb\u003emain-axis\u003c/b\u003e, either\n    \u003cspan\u003erow\u003c/span\u003e or \u003cspan\u003ecolumn\u003c/span\u003e. Additionally, \u003cspan\u003erow-reverse\u003c/span\u003e\n    and \u003cspan\u003ecolumn-reverse\u003c/span\u003e can be used to reverse the order of flex items.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003ejustify-content\u003c/b\u003e: Determines how elements are positioned along the \u003cb\u003emain-axis\u003c/b\u003e with\n    possible values of \u003cspan\u003eflex-start\u003c/span\u003e, \u003cspan\u003eflex-end\u003c/span\u003e, \u003cspan\u003ecenter\u003c/span\u003e,\n    \u003cspan\u003espace-around\u003c/span\u003e, \u003cspan\u003espace-between\u003c/span\u003e, and \u003cspan\u003espace-evenly\u003c/span\u003e.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003ealign-items\u003c/b\u003e: Determines how elements are positioned along the \u003cb\u003ecross-axis\u003c/b\u003e (the\n    one not selected by \u003cspan\u003eflex-direction\u003c/span\u003e). Possible values are \u003cspan\u003eflex-start\u003c/span\u003e,\n    \u003cspan\u003eflex-end\u003c/span\u003e, \u003cspan\u003ecenter\u003c/span\u003e, \u003cspan\u003ebaseline\u003c/span\u003e, and \u003cspan\u003estretch\u003c/span\u003e.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003eflex-wrap\u003c/b\u003e: Determines if flex items can wrap to new lines with possible values\n    of \u003cspan\u003ewrap\u003c/span\u003e and \u003cspan\u003enowrap\u003c/span\u003e. \u003cspan\u003ewrap-reverse\u003c/span\u003e can also\n    be used to wrap flex items with the lines in reverse order.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003ealign-content\u003c/b\u003e: Determines how lines are positioned along the \u003cb\u003ecross-axis\u003c/b\u003e\n    when flex items are wrapping on multiple lines. Possible values are \u003cspan\u003eflex-start\u003c/span\u003e,\n    \u003cspan\u003eflex-end\u003c/span\u003e, \u003cspan\u003ecenter\u003c/span\u003e, \u003cspan\u003espace-around\u003c/span\u003e,\n    \u003cspan\u003espace-between\u003c/span\u003e, and \u003cspan\u003estretch\u003c/span\u003e.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003eflex-flow\u003c/b\u003e: A shorthand for \u003cspan\u003eflex-direction\u003c/span\u003e and \u003cspan\u003eflex-wrap\u003c/span\u003e.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003egap\u003c/b\u003e: Determines the amount of space between flex items. This can take\n    one or two length values. If it is given two, they will be treated as a row gap and a\n    column gap respectively. Alternatively, a \u003cspan\u003erow-gap\u003c/span\u003e and \u003cspan\u003ecolumn-gap\u003c/span\u003e\n    property can be specified to individually set the gap between rows and columns.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\n  For flex items, these are some of the most common properties used to position themselves:\n\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\n    \u003cb\u003ealign-self\u003c/b\u003e: Overrides the \u003cspan\u003ealign-items\u003c/span\u003e value used\n    for the flex container.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003eflex-basis\u003c/b\u003e: Sets the initial size of the flex item along the \u003cb\u003emain-axis\u003c/b\u003e (essentially\n    this will act as width for the row axis and height for the column axis).\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003eflex-grow\u003c/b\u003e: Determines if the flex item is able to grow into extra space. If the value\n    is 0, the flex item will not grow. Otherwise, it will take up as much extra space\n    as possible, with larger grow values taking more space proportionally. For example, if item A\n    has a value of 1 and item B has a value of 2, then item B will take up twice as much extra\n    space as item A (Note this does not mean it will be twice as large, only that it will take\n    twice as much of the extra space).\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003eflex-shrink\u003c/b\u003e: Determines if a flex item is able to shrink in the case that\n    the flex items are too large for the container. Flex items with a value of 0 will not shrink.\n    Otherwise they will all shrink proportionally based on their values, similar to flex grow. The\n    higher the value, the more the flex item will potentially shrink.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003eflex\u003c/b\u003e: A shorthand property for \u003cspan\u003eflex-grow\u003c/span\u003e, \u003cspan\u003eflex-shrink\u003c/span\u003e,\n    and \u003cspan\u003eflex-basis\u003c/span\u003e in that order.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003eorder\u003c/b\u003e: Moves the flex-item to a different location amongst the other\n    flex items rather than using the order defined in the DOM. All flex items default\n    to having a value of 0. This means a value of -1 would move an item before all\n    other items that have not changed their order. Likewise, a value of 1 would place the item\n    at the end.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003c/div\u003e",
                    "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout",
                    "kinds": []
                }
            ],
            "section": "",
            "hasCodeExample": false
        },
        {
            "uid": "css-grid",
            "name": "CSS Grid",
            "module": null,
            "releaseDate": "0001-01-01T00:00:00Z",
            "acl": {
                "isFree": false,
                "isFreeForStudents": false,
                "productRequired": [
                    "frontendexpert"
                ],
                "isAvailable": true
            },
            "description": "Ah, the grid layout. \n\nAlso commonly known as \u003cb\u003e\"I have complete positional mastery over any 2-dimensional space\"\u003c/b\u003e, \u003cb\u003e\"CSS is actually awesome\"\u003c/b\u003e, and \u003cb\u003e\"so this is what true happiness feels like\"\u003c/b\u003e.",
            "video": {
                "vimeoId": "624138941",
                "duration": 17,
                "annotations": [],
                "instructor": "Conner Ardman",
                "thumbnail": "https://i.vimeocdn.com/video/1299557480-9a6c5b64b2a371d13bdfb3e0885e6744df2aa8ae87df0db4d_640x360?r=pad"
            },
            "questions": [],
            "references": [],
            "codeExample": {
                "runtime": "css",
                "arguments": [],
                "files": [
                    {
                        "name": "index.html",
                        "contents": "\u003c!--\nWelcome to our Playground!\n--\u003e\n\n\u003cheader\u003e\n  \u003ch1\u003eTop Level Heading\u003c/h1\u003e\n\u003c/header\u003e\n\u003cmain\u003e\n  \u003ch2\u003eMain Heading\u003c/h2\u003e\n  \u003cp\u003eMain content paragraph\u003c/p\u003e\n\u003c/main\u003e\n\u003caside\u003e\n  \u003cp\u003eAside content\u003c/p\u003e\n\u003c/aside\u003e\n\u003cfooter\u003e\n  \u003cp\u003eFooter content\u003c/p\u003e\n\u003c/footer\u003e",
                        "mode": 420,
                        "isEditable": true
                    },
                    {
                        "name": "styles.css",
                        "contents": "/* Welcome to our Playground! */\n\nbody {\n  display: grid;\n}\n\nbody \u003e * {\n  border: 5px solid lightblue;\n}",
                        "mode": 420,
                        "isEditable": true
                    }
                ],
                "reactConfig": null
            },
            "links": [],
            "preReqs": [],
            "keyTerms": [
                {
                    "name": "CSS Grid",
                    "section": null,
                    "definition": "\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A layout model used for creating responsive layouts of multiple rows and columns.\n  An element can be made a \u003cb\u003egrid container\u003c/b\u003e with \u003cspan\u003edisplay: grid\u003c/span\u003e,\n  and all of its direct children will automatically be laid out as \u003cb\u003egrid items\u003c/b\u003e\n  in a single \u003cb\u003ecell\u003c/b\u003e.\n\u003c/p\u003e\n\n\u003cp\u003e\n  A rectangular subsection of a grid is known as a \u003cb\u003egrid area\u003c/b\u003e. The dividers\n  between each row and column are known as \u003cb\u003egrid lines\u003c/b\u003e, and the rows and\n  columns they create are called \u003cb\u003etracks\u003c/b\u003e.\n\u003c/p\u003e\n\n\u003cp\u003e\n  For grid containers, these are some of the most common properties used to layout\n  their grid items:\n\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\n    \u003cb\u003egrid-template-columns\u003c/b\u003e: Determines the number of columns and their sizes. The unit\n    \u003cspan\u003efr\u003c/span\u003e can be used as a fractional unit here to create a responsive design.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003egrid-template-rows\u003c/b\u003e: Determines the number of rows and their sizes. The unit\n    \u003cspan\u003efr\u003c/span\u003e can be used as a fractional unit here to create a responsive design.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003egrid-template-areas\u003c/b\u003e: Creates names for grid areas that grid items can\n    place themselves in.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003ejustify-content\u003c/b\u003e: Determines how grid tracks are aligned along the\n    \u003cspan\u003einline-axis\u003c/span\u003e (row) with possible values including \u003cspan\u003estart\u003c/span\u003e,\n    \u003cspan\u003eend\u003c/span\u003e, \u003cspan\u003ecenter\u003c/span\u003e, \u003cspan\u003espace-around\u003c/span\u003e,\n    \u003cspan\u003espace-between\u003c/span\u003e, and \u003cspan\u003espace-evenly\u003c/span\u003e.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003ealign-content\u003c/b\u003e: Determines how grid tracks are aligned along the\n    \u003cspan\u003eblock-axis\u003c/span\u003e (column) with possible values including \u003cspan\u003estart\u003c/span\u003e,\n    \u003cspan\u003eend\u003c/span\u003e, \u003cspan\u003ecenter\u003c/span\u003e, \u003cspan\u003espace-around\u003c/span\u003e,\n    \u003cspan\u003espace-between\u003c/span\u003e, and \u003cspan\u003espace-evenly\u003c/span\u003e.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003ealign-items\u003c/b\u003e: Determines how grid items are aligned in columns (called the\n    \u003ci\u003eblock-axis\u003c/i\u003e). Possible values include \u003cspan\u003estart\u003c/span\u003e, \u003cspan\u003eend\u003c/span\u003e,\n    \u003cspan\u003ecenter\u003c/span\u003e, and \u003cspan\u003estretch\u003c/span\u003e.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003ejustify-items\u003c/b\u003e: Determines how grid items are aligned in rows (called the\n    \u003ci\u003einline-axis\u003c/i\u003e). Possible values include \u003cspan\u003estart\u003c/span\u003e, \u003cspan\u003eend\u003c/span\u003e,\n    \u003cspan\u003ecenter\u003c/span\u003e, and \u003cspan\u003estretch\u003c/span\u003e.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003eplace-items\u003c/b\u003e: A shorthand for both \u003cspan\u003ealign-items\u003c/span\u003e and\n    \u003cspan\u003ejustify-items\u003c/span\u003e. If one value is given, it will apply to both. If two\n    values are given, they will apply to \u003cspan\u003ealign-items\u003c/span\u003e and\n    \u003cspan\u003ejustify-items\u003c/span\u003e respectively.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003egap\u003c/b\u003e: Determines the amount of space between grid items. This can take\n    one or two length values. If it is given two, they will be treated as a row gap and a\n    column gap respectively. Alternatively, a \u003cspan\u003erow-gap\u003c/span\u003e and \u003cspan\u003ecolumn-gap\u003c/span\u003e\n    property can be specified to individually set the gap between rows and columns.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\n  For grid items, these are some of the most common properties used to position themselves:\n\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\n    \u003cb\u003egrid-column-start\u003c/b\u003e: Determines what column this item starts on, based on\n    a line number.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003egrid-column-end\u003c/b\u003e: Determines what column this item ends on, based on\n    a line number.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003egrid-column\u003c/b\u003e: A shorthand for both \u003cspan\u003egrid-column-start\u003c/span\u003e and\n    \u003cspan\u003egrid-column-end\u003c/span\u003e specified in the format \u003cspan\u003estart / end\u003c/span\u003e.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003egrid-row-start\u003c/b\u003e: Determines what row this item starts on, based on\n    a line number.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003egrid-row-end\u003c/b\u003e: Determines what row this item ends on, based on\n    a line number.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003egrid-row\u003c/b\u003e: A shorthand for both \u003cspan\u003egrid-row-start\u003c/span\u003e and\n    \u003cspan\u003egrid-row-end\u003c/span\u003e specified in the format \u003cspan\u003estart / end\u003c/span\u003e.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003egrid-area\u003c/b\u003e: Places the item in a grid-area based on a name created in\n    \u003cspan\u003egrid-template-areas\u003c/span\u003e.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003ealign-self\u003c/b\u003e: Overrides the \u003cspan\u003ealign-items\u003c/span\u003e value used\n    for the grid container.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003ejustify-self\u003c/b\u003e: Overrides the \u003cspan\u003ejustify-items\u003c/span\u003e value used\n    for the grid container.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003eplace-self\u003c/b\u003e: A shorthand for both \u003cspan\u003ealign-self\u003c/span\u003e and\n    \u003cspan\u003ejustify-self\u003c/span\u003e in the same format as \u003cspan\u003eplace-items\u003c/span\u003e.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003c/div\u003e",
                    "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout",
                    "kinds": []
                }
            ],
            "section": "",
            "hasCodeExample": false
        },
        {
            "uid": "working-with-images",
            "name": "Working With Images",
            "module": null,
            "releaseDate": "0001-01-01T00:00:00Z",
            "acl": {
                "isFree": false,
                "isFreeForStudents": false,
                "productRequired": [
                    "frontendexpert"
                ],
                "isAvailable": true
            },
            "description": "Are images content or style? That is the question.",
            "video": {
                "vimeoId": "628878574",
                "duration": 12,
                "annotations": [],
                "instructor": "Conner Ardman",
                "thumbnail": "https://i.vimeocdn.com/video/1299559416-86c94437a792d5ae04dd684d753bcdb948b05863aa539a21e_640x360?r=pad"
            },
            "questions": [],
            "references": [],
            "codeExample": {
                "runtime": "css",
                "arguments": [],
                "files": [
                    {
                        "name": "index.html",
                        "contents": "\u003c!--\nWelcome to our Playground!\n--\u003e\n\n\u003cdiv\u003e\n  \u003cp\u003eThis container has a background image!\u003c/p\u003e\n\u003c/div\u003e",
                        "mode": 420,
                        "isEditable": true
                    },
                    {
                        "name": "styles.css",
                        "contents": "/* Welcome to our Playground! */\n\ndiv {\n  height: 75vh;\n  color: white;\n  background-image: url(\"https://assets.algoexpert.io/prod/dist/ae-social-logo.png\");\n  background-size: 100%;\n}",
                        "mode": 420,
                        "isEditable": true
                    }
                ],
                "reactConfig": null
            },
            "links": [],
            "preReqs": [],
            "keyTerms": [
                {
                    "name": "Image Sprite",
                    "section": null,
                    "definition": "\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A group of images all included in a single image file. These images are usually\n  split on the client using the CSS \u003cspan\u003ebackground-image\u003c/span\u003e property along with\n  \u003cspan\u003ebackground-position\u003c/span\u003e. The primary benefit of sprites is to reduce the total file\n  size and the number of files the client needs to download, which can decrease\n  page load times.\n\u003c/p\u003e\n\u003c/div\u003e",
                    "url": null,
                    "kinds": []
                }
            ],
            "section": "",
            "hasCodeExample": false
        },
        {
            "uid": "css-inheritance",
            "name": "CSS Inheritance",
            "module": null,
            "releaseDate": "0001-01-01T00:00:00Z",
            "acl": {
                "isFree": false,
                "isFreeForStudents": false,
                "productRequired": [
                    "frontendexpert"
                ],
                "isAvailable": true
            },
            "description": "Much like biological organisms can pass down traits from parent to offspring through the process of heredity, CSS elements can pass down properties from parent to child through the process of inheritance.",
            "video": {
                "vimeoId": "627925734",
                "duration": 8,
                "annotations": [],
                "instructor": "Conner Ardman",
                "thumbnail": "https://i.vimeocdn.com/video/1299560406-8b6543b4fcdfcd545332f20e60b551f1d6e693bb2cd3c2188_640x360?r=pad"
            },
            "questions": [],
            "references": [],
            "codeExample": {
                "runtime": "css",
                "arguments": [],
                "files": [
                    {
                        "name": "index.html",
                        "contents": "\u003c!--\nWelcome to our Playground!\n--\u003e\n\n\u003cdiv\u003e\n  \u003cp\u003eI inherit my color from my parent by default\u003c/p\u003e\n  \u003cbutton\u003eI don't inherit my color from my parent by default\u003c/button\u003e\n\u003c/div\u003e",
                        "mode": 420,
                        "isEditable": true
                    },
                    {
                        "name": "styles.css",
                        "contents": "/* Welcome to our Playground! */\n\ndiv {\n  color: red;\n}",
                        "mode": 420,
                        "isEditable": true
                    }
                ],
                "reactConfig": null
            },
            "links": [],
            "preReqs": [],
            "keyTerms": [
                {
                    "name": "CSS Inheritance",
                    "section": null,
                    "definition": "\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  How elements choose a value when none has been explicitly declared in any\n  stylesheet. All properties are either \u003cb\u003einherited properties\u003c/b\u003e or\n  \u003cb\u003enon-inherited properties\u003c/b\u003e. Inherited properties will take their\n  parent's value in the case no value has been set for the property. Non-inherited\n  properties on the other hand will be set to \u003cspan\u003einitial\u003c/span\u003e in this case.\n\u003c/p\u003e\n\n\u003cp\u003e\n  While the default groupings of inherited and non-inherited properties is usually\n  all that's needed, this can be changed by using any of these values for any\n  declaration:\n\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\n    \u003cb\u003einherit\u003c/b\u003e: The value should inherit from its parent, regardless of if it\n    is normally an inherited property.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003einitial\u003c/b\u003e: The value should be set to the value defined in the CSS specification.\n    Note this is oftentimes different from browser defaults.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003eunset\u003c/b\u003e: The value should be set to \u003cspan\u003einherit\u003c/span\u003e if it is normally\n    an inherited property, otherwise \u003cspan\u003einitial\u003c/span\u003e. This can be useful for\n    \"resetting\" browser defaults from the user agent stylesheet.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003erevert\u003c/b\u003e: The value should revert back to the next stylesheet in the cascade.\n    For author stylesheets, this would act as if the author did not write any declaration\n    for the property, but it would still honor the user agent and user stylesheets as normal.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e",
                    "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/inheritance",
                    "kinds": []
                }
            ],
            "section": "",
            "hasCodeExample": false
        },
        {
            "uid": "responsive-design",
            "name": "Responsive Design",
            "module": null,
            "releaseDate": "0001-01-01T00:00:00Z",
            "acl": {
                "isFree": false,
                "isFreeForStudents": false,
                "productRequired": [
                    "frontendexpert"
                ],
                "isAvailable": true
            },
            "description": "AlgoExpert is a perfect example of a beautifully responsive website. Go ahead, resize your browser window all you want—the layout won't break!",
            "video": {
                "vimeoId": "625120573",
                "duration": 10,
                "annotations": [],
                "instructor": "Conner Ardman",
                "thumbnail": "https://i.vimeocdn.com/video/1299555035-88d8c41eae4d81b32f1afebf70a2520759558d3ada62272f4_640x360?r=pad"
            },
            "questions": [],
            "references": [],
            "codeExample": {
                "runtime": "css",
                "arguments": [],
                "files": [
                    {
                        "name": "index.html",
                        "contents": "\u003c!--\nWelcome to our Playground!\n--\u003e\n\n\u003cp\u003eTry resizing the window to see how I change!\u003c/p\u003e",
                        "mode": 420,
                        "isEditable": true
                    },
                    {
                        "name": "styles.css",
                        "contents": "/* Welcome to our Playground! */\n\np {\n  font-size: 24px;\n  color: blue;\n}\n\n@media (max-width: 600px) {\n  p {\n    color: red;\n  }\n}",
                        "mode": 420,
                        "isEditable": true
                    }
                ],
                "reactConfig": null
            },
            "links": [],
            "preReqs": [],
            "keyTerms": [
                {
                    "name": "Mobile First Design",
                    "section": null,
                    "definition": "\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  Building websites or applications with mobile devices as the primary use case,\n  then scaling them up to larger devices with responsive CSS. In general,\n  it is easier to scale a design up to larger screens than to scale it down to\n  smaller screens. Along with the massive growth of mobile browsing, this\n  makes mobile first design a great development workflow.\n\u003c/p\u003e\n\u003c/div\u003e",
                    "url": null,
                    "kinds": []
                }
            ],
            "section": "",
            "hasCodeExample": false
        },
        {
            "uid": "animations",
            "name": "Animations",
            "module": null,
            "releaseDate": "0001-01-01T00:00:00Z",
            "acl": {
                "isFree": true,
                "isFreeForStudents": false,
                "productRequired": [
                    "frontendexpert"
                ],
                "isAvailable": true
            },
            "description": "You know all those cool animations that are scattered across the AlgoExpert website? The ones that made you stop and think, \"Whoa, that's pretty neat!\"\n\nYeah, they're all CSS.",
            "video": {
                "vimeoId": "627071766",
                "duration": 13,
                "annotations": [],
                "instructor": "Conner Ardman",
                "thumbnail": "https://i.vimeocdn.com/video/1299560250-eed77228b68ebfead79448ac92cb9e2ad13e6ad456d7af6b9_640x360?r=pad"
            },
            "questions": [],
            "references": [],
            "codeExample": {
                "runtime": "css",
                "arguments": [],
                "files": [
                    {
                        "name": "index.html",
                        "contents": "\u003c!--\nWelcome to our Playground!\n--\u003e\n\n\u003cdiv\u003eAnimation\u003c/div\u003e",
                        "mode": 420,
                        "isEditable": true
                    },
                    {
                        "name": "styles.css",
                        "contents": "/* Welcome to our Playground! */\n\ndiv {\n  background-color: lightblue;\n  width: 30%;\n  height: 6em;\n  border-radius: 12px;\n  padding: 12px;\n  margin: 4em;\n  transition-property: width;\n  transition-duration: 1s;\n}\n\ndiv:hover {\n  width: 50%;\n}",
                        "mode": 420,
                        "isEditable": true
                    }
                ],
                "reactConfig": null
            },
            "links": [],
            "preReqs": [],
            "keyTerms": [
                {
                    "name": "Transitions",
                    "section": null,
                    "definition": "\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A css module for smoothly transitioning between values when a value is\n  changed. Transitions can be defined with a combination of these properties:\n\u003c/p\u003e\n\n\n\u003cul\u003e\n  \u003cli\u003e\n    \u003cb\u003etransition-property\u003c/b\u003e: The name of the CSS property to transition.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003etransition-duration\u003c/b\u003e: How long the transition should take.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003etransition-timing-function\u003c/b\u003e: How the transition should progress.\n    This can take a variety of keyword values, such as \u003cspan\u003elinear\u003c/span\u003e\n    and \u003cspan\u003eease-in\u003c/span\u003e, or custom values using the \u003cspan\u003ecubic-bezier()\u003c/span\u003e\n    or \u003cspan\u003esteps()\u003c/span\u003e functions.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003etransition-delay\u003c/b\u003e: How long to wait before starting the transition.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\n\u003cp\u003e\n  Alternatively, the \u003cspan\u003etransition\u003c/span\u003e property can be used as a shorthand\n  for all of these values. The first time value will be used for the duration,\n  and the second will be used for a delay. Other than that, the order does not\n  matter.\n\u003c/p\u003e\n\n\n\u003cp\u003e\n  For example, this would set the width to smoothly transition linearly over\n  one second, two seconds after the value is changed:\n\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"code-wrapper prism\"\u003e\n  \u003cpre\n    class=\"line-numbers\"\n  \u003e\u003ccode class=\"language-css\"\u003etransition: width 1s linear 2s;\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e",
                    "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Transitions",
                    "kinds": []
                },
                {
                    "name": "Animations",
                    "section": null,
                    "definition": "\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A css module for animating properties, very similar to \u003cb\u003etransitions\u003c/b\u003e,\n  but with a bit more control. An animation is defined using \u003cb\u003ekeyframes\u003c/b\u003e\n  as well as these properties:\n\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\n    \u003cb\u003eanimation-name\u003c/b\u003e: The name of the \u003cb\u003ekeyframes\u003c/b\u003e animation.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003eanimation-duration\u003c/b\u003e: How long the animation should take.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003eanimation-fill-mode\u003c/b\u003e: If the element should stay in its animated position\n    after the animation completes or if it should move to the starting position of\n    the animation before it begins, specified with the \u003cspan\u003ebackwards\u003c/span\u003e\n    and \u003cspan\u003eforwards\u003c/span\u003e values respectively or \u003cspan\u003eboth\u003c/span\u003e to follow\n    the rules of both values.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003eanimation-direction\u003c/b\u003e: If the animation should play in \u003cspan\u003enormal\u003c/span\u003e\n    or \u003cspan\u003ereverse\u003c/span\u003e order. A value of \u003cspan\u003ealternate\u003c/span\u003e can also be\n    used to switch between normal and reverse, or \u003cspan\u003ealternate-reverse\u003c/span\u003e\n    can be used to do the same, but starting with the reverse direction.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003eanimation-iteration-count\u003c/b\u003e: How many times to run the animation, or \u003cspan\u003einfinite\u003c/span\u003e\n    to run the animation indefinitely.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003eanimation-play-state\u003c/b\u003e: If the animation is currently \u003cspan\u003erunning\u003c/span\u003e\n    or \u003cspan\u003epaused\u003c/span\u003e. This is particularly useful for pausing an animation\n    using JavaScript.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003eanimation-timing-function\u003c/b\u003e: How the animation should progress through the\n    keyframes. This can take a variety of keyword values, such as \u003cspan\u003elinear\u003c/span\u003e\n    and \u003cspan\u003eease-in\u003c/span\u003e, or custom values using the \u003cspan\u003ecubic-bezier()\u003c/span\u003e\n    or \u003cspan\u003esteps()\u003c/span\u003e functions.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003eanimation-delay\u003c/b\u003e: How long to wait before starting the animation.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\n  Alternatively, the \u003cspan\u003eanimation\u003c/span\u003e property can be used as a shorthand\n  for all of these values. The first time value will be used for the duration,\n  and the second will be used for a delay. Other than that, the order usually will\n  not matter assuming the \u003cspan\u003eanimation-name\u003c/span\u003e is not using a conflicting\n  keyword with another possible value.\n\u003c/p\u003e\n\n\u003cp\u003e\n  For example after a two second delay, this would run the move animation over three seconds\n  with the ease timing function. The animation would continue to run indefinitely, alternating the order\n  each time.\n\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"code-wrapper prism\"\u003e\n  \u003cpre\n    class=\"line-numbers\"\n  \u003e\u003ccode class=\"language-css\"\u003eanimation: move 3s ease infinite alternate 2s;\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e",
                    "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Animations",
                    "kinds": []
                },
                {
                    "name": "@keyframes",
                    "section": null,
                    "definition": "\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A keyword for defining points within an animation timeline. An animation is made\n  up of a variety of keyframes, and the browser will fill in the spaces between the\n  keyframes based on the timing function. Keyframes are defined using this syntax:\n\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"code-wrapper prism\"\u003e\n  \u003cpre\n    class=\"line-numbers\"\n  \u003e\u003ccode class=\"language-css\"\u003e@keyframes animation-name {\n  from {\n    property: value;\n    property: value;\n  }\n\n  50% {\n    property: value;\n    property: value;\n  }\n\n  to {\n    property: value;\n    property: value;\n  }\n}\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  The \u003cspan\u003efrom\u003c/span\u003e and \u003cspan\u003eto\u003c/span\u003e keywords are equivalent to \u003cspan\u003e0%\u003c/span\u003e\n  and \u003cspan\u003e100%\u003c/span\u003e respectively.\n\u003c/p\u003e\n\u003c/div\u003e",
                    "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/@keyframes",
                    "kinds": []
                }
            ],
            "section": "",
            "hasCodeExample": false
        },
        {
            "uid": "css-variables",
            "name": "CSS Variables",
            "module": null,
            "releaseDate": "0001-01-01T00:00:00Z",
            "acl": {
                "isFree": false,
                "isFreeForStudents": false,
                "productRequired": [
                    "frontendexpert"
                ],
                "isAvailable": true
            },
            "description": "Yup, you can declare variables in CSS.\n\nNope, we couldn't believe it either.",
            "video": {
                "vimeoId": "626091475",
                "duration": 7,
                "annotations": [],
                "instructor": "Conner Ardman",
                "thumbnail": "https://i.vimeocdn.com/video/1299560678-b8983d16080aa74dbe51bd97a5bd1cbac247415f9d10b5cb8_640x360?r=pad"
            },
            "questions": [],
            "references": [],
            "codeExample": {
                "runtime": "css",
                "arguments": [],
                "files": [
                    {
                        "name": "index.html",
                        "contents": "\u003c!--\nWelcome to our Playground!\n--\u003e\n\n\u003cheader\u003e\n  \u003ch1\u003eCSS Variables\u003c/h1\u003e\n\u003c/header\u003e\n\u003cmain\u003e\n  \u003csection\u003e\n    \u003ch2\u003eSection 1\u003c/h2\u003e\n  \u003c/section\u003e\n  \u003csection\u003e\n    \u003ch2\u003eSection 2\u003c/h2\u003e\n  \u003c/section\u003e\n\u003c/main\u003e",
                        "mode": 420,
                        "isEditable": true
                    },
                    {
                        "name": "styles.css",
                        "contents": "/* Welcome to our Playground! */\n\n:root {\n  --main-color: #00334C;\n}\n\nh1 {\n  color: var(--main-color);\n}\n\nh2 {\n  padding: 12px;\n  color: white;\n}\n\nmain {\n  display: flex;\n  border: 5px solid black;\n  gap: 12px;\n  width: 412px;\n}\n\nsection {\n  flex-basis: 200px;\n  flex-shrink: 0;\n  flex-grow: 0;\n  background-color: var(--main-color);\n}",
                        "mode": 420,
                        "isEditable": true
                    }
                ],
                "reactConfig": null
            },
            "links": [],
            "preReqs": [],
            "keyTerms": [
                {
                    "name": "Custom Properties",
                    "section": null,
                    "definition": "\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  Also known as variables, these are used to keep track of repeated values in CSS.\n  Custom properties always start with \u003cspan\u003e--\u003c/span\u003e and can be included in any ruleset.\n  However, most commonly they are defined on the \u003cspan\u003e:root\u003c/span\u003e ruleset so the\n  variables will be accessible throughout the website. Custom properties are then\n  used with the \u003cspan\u003evar()\u003c/span\u003e CSS function. For example, this code\n  defines a custom property called \u003cspan\u003e--main-color\u003c/span\u003e and uses it for a background color:\n\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"code-wrapper prism\"\u003e\n  \u003cpre\n    class=\"line-numbers\"\n  \u003e\u003ccode class=\"language-css\"\u003e:root {\n  --main-color: #00334C;\n}\n\nmain {\n  background-color: var(--main-color);\n}\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e",
                    "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties",
                    "kinds": []
                }
            ],
            "section": "",
            "hasCodeExample": false
        },
        {
            "uid": "frameworks-and-preprocessors",
            "name": "Frameworks And Preprocessors",
            "module": null,
            "releaseDate": "0001-01-01T00:00:00Z",
            "acl": {
                "isFree": false,
                "isFreeForStudents": false,
                "productRequired": [
                    "frontendexpert"
                ],
                "isAvailable": true
            },
            "description": "Frameworks and preprocessors are like super steroids for your style sheets. Use them, and your code will become unstoppable. Even Thanos wielding the Infinity Gauntlet will fear the power of your CSS.",
            "video": {
                "vimeoId": "629789929",
                "duration": 9,
                "annotations": [],
                "instructor": "Conner Ardman",
                "thumbnail": "https://i.vimeocdn.com/video/1299556138-2bdac1404ca5af333494b3e1e892f40a8a4d704ad28e2ba8e_640x360?r=pad"
            },
            "questions": [],
            "references": [],
            "codeExample": {
                "runtime": "css",
                "arguments": [],
                "files": [
                    {
                        "name": "index.html",
                        "contents": "\u003c!--\nWelcome to our Playground!\n--\u003e\n\n",
                        "mode": 420,
                        "isEditable": true
                    },
                    {
                        "name": "styles.css",
                        "contents": "/* Welcome to our Playground! */\n\n",
                        "mode": 420,
                        "isEditable": true
                    }
                ],
                "reactConfig": null
            },
            "links": [],
            "preReqs": [],
            "keyTerms": [
                {
                    "name": "CSS Framework",
                    "section": null,
                    "definition": "\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  Pre-written code that can be used to simplify development. Oftentimes these\n  include ready to use classes, pre-built components and responsive layout systems. \n\u003c/p\u003e\n\u003c/div\u003e",
                    "url": null,
                    "kinds": []
                },
                {
                    "name": "Preprocessor",
                    "section": null,
                    "definition": "\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A program that converts code of another syntax into CSS that the browser can understand.\n  Usually these add new features to CSS to make the code easier to read, write and\n  maintain.\n\u003c/p\u003e\n\u003c/div\u003e",
                    "url": null,
                    "kinds": []
                }
            ],
            "section": "",
            "hasCodeExample": false
        },
        {
            "uid": "css-methodologies-and-best-practices",
            "name": "CSS Methodologies And Best Practices",
            "module": null,
            "releaseDate": "0001-01-01T00:00:00Z",
            "acl": {
                "isFree": false,
                "isFreeForStudents": false,
                "productRequired": [
                    "frontendexpert"
                ],
                "isAvailable": true
            },
            "description": "Congratulations on making it to the end of the CSS Crash Course! It's certainly been a long journey. \n\nIn this final video, we'll look at some advanced methodologies and high-level concepts that will help us define what it truly means to write good CSS.",
            "video": {
                "vimeoId": "629791118",
                "duration": 14,
                "annotations": [],
                "instructor": "Conner Ardman",
                "thumbnail": "https://i.vimeocdn.com/video/1299559572-16a82092341c66ddf135b96bb7c0eb86267e48b46b9c4b4bc_640x360?r=pad"
            },
            "questions": [],
            "references": [],
            "codeExample": {
                "runtime": "css",
                "arguments": [],
                "files": [
                    {
                        "name": "index.html",
                        "contents": "\u003c!--\nWelcome to our Playground!\n--\u003e\n\n\u003cp class=\"message\"\u003e\n  This is styled following the BEM conventions!\n\u003c/p\u003e\n\n\u003cp class=\"message message--success\"\u003e\n  This is a succes message using BEM!\n\u003c/p\u003e",
                        "mode": 420,
                        "isEditable": true
                    },
                    {
                        "name": "styles.css",
                        "contents": "/* Welcome to our Playground! */\n\n.message {\n  padding: 12px;\n  border: 2px solid black;\n  border-radius: 12px;\n  font-size: 18px;\n}\n\n.message--success {\n  color: white;\n  background-color: green;\n}",
                        "mode": 420,
                        "isEditable": true
                    }
                ],
                "reactConfig": null
            },
            "links": [],
            "preReqs": [],
            "keyTerms": [
                {
                    "name": "BEM",
                    "section": null,
                    "definition": "\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  The \"Block, Element, Modifier\" CSS methodology. This breaks CSS classes into\n  three categories:\n\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\n    \u003cb\u003eBlocks\u003c/b\u003e: Standalone elements with their own meaning. These are referenced\n    simply by the name of the block such as \u003cspan\u003eclass=\"menu\"\u003c/span\u003e.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003eElements\u003c/b\u003e: Parts of a block without their own meaning. These are referenced\n    by the name of the block, two underscores then the name of the element such as\n    \u003cspan\u003eclass=\"menu__item\"\u003c/span\u003e.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003eModifiers\u003c/b\u003e: Flags to change styles for blocks or elements, such as\n    \u003ci\u003edisabled\u003c/i\u003e or \u003ci\u003eselected\u003c/i\u003e. These are prefixed by the class they modify and\n    two dashes, and they are included in addition to that original class\n    such as \u003cspan\u003eclass=\"menu menu--disabled\"\u003c/span\u003e.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e",
                    "url": null,
                    "kinds": []
                },
                {
                    "name": "OOCSS",
                    "section": null,
                    "definition": "\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  The \"Object-Oriented\" CSS methodology. This is based on object-oriented programming\n  principles, which can be applied to CSS class design by treating UI components as\n  objects. Styles are then given one of two categories:\n\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\n    \u003cb\u003eStructure\u003c/b\u003e: \"Invisible\" properties such as width and margin.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003eSkin\u003c/b\u003e: \"Visible\" properties such as color and border.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\n  Along with separating structure and skin into classes, OOCSS also makes a clear\n  distinction between \u003cb\u003econtent\u003c/b\u003e and \u003cb\u003econtainers\u003c/b\u003e. The idea here is that\n  containers should function the same, regardless of the content inside of them.\n  Moreover, content should not depend on the container it is nested within.\n\u003c/p\u003e\n\u003c/div\u003e",
                    "url": null,
                    "kinds": []
                },
                {
                    "name": "Atomic CSS",
                    "section": null,
                    "definition": "\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A CSS methodology based on the idea of minimizing any repeated declarations.\n  Rather than creating classes based on components, Atomic CSS creates utility\n  classes based on single declarations. For example, in Atomic CSS a \"margin-12\"\n  class might be created that adds 12 pixels of margin, rather than including\n  that declaration on all of the components needing 12 pixels of margin.\n\u003c/p\u003e\n\u003c/div\u003e",
                    "url": null,
                    "kinds": []
                },
                {
                    "name": "SMACSS",
                    "section": null,
                    "definition": "\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  The \"Scalable and Modular Architecture For CSS\" methodology, usually pronounced\n  as \"smacks\". This splits CSS into five different categories, each of which get\n  their own file:\n\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\n    \u003cb\u003eBase\u003c/b\u003e: Page defaults, usually just type selectors.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003eLayout\u003c/b\u003e: Major structural layout of the page, using ID and class selectors.\n    The classes are usually prefixed with \u003cspan\u003el-\u003c/span\u003e or \u003cspan\u003elayout-\u003c/span\u003e.\n    For example, a navigation element might have the class \u003cspan\u003el-nav\u003c/span\u003e.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003eModule\u003c/b\u003e: Smaller reusable components, usually using class selectors\n    without any name prefixes.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003eState\u003c/b\u003e: Specific states for layouts or modules, such as disabled or selected states,\n    usually using class selectors again.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003eTheme\u003c/b\u003e: Style rules for layouts and modules related to a theme, oftentimes based\n    on user preferences such as a dark mode.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e",
                    "url": null,
                    "kinds": []
                },
                {
                    "name": "ITCSS",
                    "section": null,
                    "definition": "\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  The \"Inverted Triangle\" CSS methodology. This methodology is mostly focused on\n  the order of CSS code, rather than having opinions on naming conventions. The primary\n  idea here is to have generic styles first, which should have the largest reach\n  across elements and the least specific selectors. The exact layers of the triangle\n  can be changed to fit the needs of a specific project, but a general structure\n  looks like this:\n\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003cb\u003eSettings\u003c/b\u003e: Global variables affecting the entire website.\u003c/li\u003e\n  \u003cli\u003e\u003cb\u003eTools\u003c/b\u003e: Mixins and functions for use with \u003cb\u003epreprocessors\u003c/b\u003e.\u003c/li\u003e\n  \u003cli\u003e\u003cb\u003eGeneric\u003c/b\u003e: High level generic styles, usually to reset browser defaults for consistency across browsers.\u003c/li\u003e\n  \u003cli\u003e\u003cb\u003eElements\u003c/b\u003e: Defaults for elements using type selectors.\u003c/li\u003e\n  \u003cli\u003e\u003cb\u003eObjects\u003c/b\u003e: The most generic classes, oftentimes for larger containers.\u003c/li\u003e\n  \u003cli\u003e\u003cb\u003eComponents\u003c/b\u003e: Classes for individual UI components.\u003c/li\u003e\n  \u003cli\u003e\u003cb\u003eTrumps\u003c/b\u003e: \u003cspan\u003e!important\u003c/span\u003e overrides for when they are needed.\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/div\u003e",
                    "url": null,
                    "kinds": []
                }
            ],
            "section": "",
            "hasCodeExample": false
        }
    ]
}