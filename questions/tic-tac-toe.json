{
    "acl": {
        "isAvailable": true,
        "isFree": false,
        "isFreeForStudents": false,
        "productRequired": [
            "frontendexpert"
        ]
    },
    "category": "DOM Manipulation",
    "contents": {
        "acl": {
            "isAvailable": true,
            "isFree": false,
            "isFreeForStudents": false,
            "productRequired": [
                "frontendexpert"
            ]
        },
        "category": "DOM Manipulation",
        "hints": [
            "<p>\n  It can be helpful to keep track of the current board state to always know which\n  squares belong to which player.\n</p>",
            "<p>\n  You'll need to add event listeners to all of the different buttons to perform the\n  required actions when they are clicked.\n</p>",
            "<p>\n  To hide and show the restart button, you can change its <span>style.display</span>\n  property with JavaScript. A display value of <span>none</span> hides an element,\n  and <span>block</span> would show the element again.\n</p>",
            "<p>\n  A tie game occurs when the total number of moves is equal to the total number of squares.\n  For this reason, it can be helpful to keep track of the number of moves taken.\n</p>",
            "<p>\n  To determine a winner, check after each move if the current player has achieved\n  a 3-in-a-row winning combination. There are a few ways to determine this, but\n  we recommend one of these approaches:\n</p>\n<ul>\n  <li>\n    Look at each row, column and long diagonal. For each of these, check if all\n    of the values belong to the current player.\n  </li>\n  <li>\n    Keep a constant array of possible winning combinations. Compare the board\n    to those possible combinations to see if the current player achieved one of them.\n  </li>\n</ul>"
        ],
        "languageToWrite": "javascript",
        "name": "Tic Tac Toe",
        "notes": "",
        "prompt": "<div class=\"html\">\n  <p>\n    Tic Tac Toe is a simple game where two players alternate marking the squares\n    of a 3x3 board with \"X\"s and \"O\"s. The first player marks squares with \"X\"s,\n    while the second player marks them with \"O\"s. The winner of the game is the\n    first player to get three of their letters in a horizontal, vertical, or\n    diagonal row. If the board fills up without any player winning, the game\n    ends in a tie.\n  </p>\n  <p>\n    You're given HTML and CSS files for a simple Tic Tac Toe board, and you need\n    to make the board functional using JavaScript.\n  </p>\n  <p>\n    The board has static heading that says \"Tic Tac Toe\", a dynamic heading\n    that's initialized to \"Player 1's Turn\", and nine squares, which are meant\n    to be clicked on by players. The board also has a restart button, which is\n    hidden by default.\n  </p>\n  <p>The board should have the following functionality:</p>\n  <ul>\n    <li>\n      When a square is clicked on, an <span>X</span> or an <span>O</span> should\n      appear on it, depending on whose turn it currently is. Additionally, the\n      square should become disabled until the game is restarted.\n    </li>\n    <li>\n      The dynamic heading should always stay updated with whose turn it\n      currently is. For example, when it's player 2's turn, it should say\n      \"Player 2's Turn\".\n    </li>\n    <li>\n      When the game ends, the dynamic heading should say who won. For example,\n      if player 1 won, it should say \"Player 1 Won!\". In the event of a tie, it\n      should say \"Tie Game!\"\n    </li>\n    <li>\n      The restart button should appear when the game ends. Clicking it should\n      restart the game and hide the button again.\n    </li>\n  </ul>\n  <p>\n    Your JavaScript code has already been linked to the pre-written HTML code\n    via a deferred script tag.\n  </p>\n</div>",
        "promptCode": {
            "css": "#board {\n  width: 280px;\n  min-height: 450px;\n  border-radius: 10%;\n  padding: 0 20px 20px 20px;\n  text-align: center;\n  background-color: grey;\n  color: white;\n}\n\nh1 {\n  padding-top: 12px;\n}\n\nh2 {\n  margin: 8px;\n}\n\ntable {\n  margin: auto;\n  border-spacing: 8px;\n}\n\nbutton {\n  font-weight: bold;\n  border-radius: 8px;\n  cursor: pointer;\n  background-color: #6e072d;\n  border-color: #6e6e6e;\n  color: white;\n}\n\n.game-square {\n  font-size: 50px;\n  width: 70px;\n  height: 70px;\n  vertical-align: top;\n}\n\n.game-square:disabled {\n  cursor: default;\n}\n\n#restart-button {\n  display: none;\n  font-size: 24px;\n  padding: 12px;\n  margin: 12px auto;\n}\n",
            "html": "<div id=\"board\">\n  <h1>Tic Tac Toe</h1>\n  <h2 id=\"game-heading\" aria-live=\"polite\">Player 1's Turn</h2>\n  <table role=\"grid\">\n    <tbody>\n      <tr>\n        <td><button class=\"game-square\"></button></td>\n        <td><button class=\"game-square\"></button></td>\n        <td><button class=\"game-square\"></button></td>\n      </tr>\n      <tr>\n        <td><button class=\"game-square\"></button></td>\n        <td><button class=\"game-square\"></button></td>\n        <td><button class=\"game-square\"></button></td>\n      </tr>\n      <tr>\n        <td><button class=\"game-square\"></button></td>\n        <td><button class=\"game-square\"></button></td>\n        <td><button class=\"game-square\"></button></td>\n      </tr>\n    </tbody>\n  </table>\n  <button id=\"restart-button\">Restart Game</button>\n</div>\n"
        },
        "reactConfig": null,
        "solutions": {
            "javascript": [
                "// Copyright \u00a9 2023 AlgoExpert LLC. All rights reserved.\n\nconst BOARD_WIDTH = 3;\n\nlet boardState = generateEmptyBoardState();\nlet currentPlayer = 1;\nlet numMovesDone = 0;\n\nconst gameHeading = document.getElementById('game-heading');\nconst gameSquares = document.querySelectorAll('.game-square');\nconst restartButton = document.getElementById('restart-button');\n\ngameSquares.forEach((gameSquare, i) => {\n  gameSquare.addEventListener('click', () => {\n    const row = Math.floor(i / BOARD_WIDTH);\n    const col = i % BOARD_WIDTH;\n    makeMove(gameSquare, row, col);\n  });\n});\n\nrestartButton.addEventListener('click', restartGame);\n\nfunction makeMove(gameSquare, row, col) {\n  gameSquare.textContent = currentPlayer === 1 ? 'X' : 'O';\n  gameSquare.disabled = true;\n  numMovesDone++;\n  boardState[row][col] = currentPlayer;\n\n  if (didPlayerWin()) {\n    gameHeading.textContent = `Player ${currentPlayer} Won!`;\n    endGame();\n  } else if (numMovesDone >= BOARD_WIDTH * BOARD_WIDTH) {\n    gameHeading.textContent = 'Tie Game!';\n    endGame();\n  } else {\n    currentPlayer = currentPlayer === 1 ? 2 : 1;\n    setCurrentPlayerHeading();\n  }\n}\n\nfunction didPlayerWin() {\n  const rows = [0, 1, 2];\n  const wonHorizontal = rows.some(row => {\n    return (\n      boardState[row][0] === currentPlayer &&\n      boardState[row][1] === currentPlayer &&\n      boardState[row][2] === currentPlayer\n    );\n  });\n\n  const cols = [0, 1, 2];\n  const wonVertical = cols.some(col => {\n    return (\n      boardState[0][col] === currentPlayer &&\n      boardState[1][col] === currentPlayer &&\n      boardState[2][col] === currentPlayer\n    );\n  });\n\n  const wonTopLeftToBottomRight =\n    boardState[0][0] === currentPlayer &&\n    boardState[1][1] === currentPlayer &&\n    boardState[2][2] === currentPlayer;\n\n  const wonTopRightToBottomLeft =\n    boardState[0][2] === currentPlayer &&\n    boardState[1][1] === currentPlayer &&\n    boardState[2][0] === currentPlayer;\n\n  return wonHorizontal || wonVertical || wonTopLeftToBottomRight || wonTopRightToBottomLeft;\n}\n\nfunction endGame() {\n  restartButton.style.display = 'block';\n  gameSquares.forEach(gameSquare => {\n    gameSquare.disabled = true;\n  });\n}\n\nfunction setCurrentPlayerHeading() {\n  gameHeading.textContent = `Player ${currentPlayer}'s Turn`;\n}\n\nfunction restartGame() {\n  boardState = generateEmptyBoardState();\n  currentPlayer = 1;\n  numMovesDone = 0;\n  setCurrentPlayerHeading();\n  gameSquares.forEach(gameSquare => {\n    gameSquare.textContent = '';\n    gameSquare.disabled = false;\n  });\n  restartButton.style.display = 'none';\n}\n\nfunction generateEmptyBoardState() {\n  return new Array(BOARD_WIDTH).fill().map(() => new Array(BOARD_WIDTH).fill());\n}",
                "// Copyright \u00a9 2023 AlgoExpert LLC. All rights reserved.\n\nconst BOARD_WIDTH = 3;\n\n// If the game squares were numbered from 0 to 8.\nconst WIN_CONDITIONS = [\n  [0, 1, 2], // first row\n  [3, 4, 5], // second row\n  [6, 7, 8], // third row\n  [0, 3, 6], // first column\n  [1, 4, 7], // second column\n  [2, 5, 8], // third column\n  [0, 4, 8], // first diagonal\n  [2, 4, 6], // second diagonal\n];\n\nlet currentPlayer = 1;\nlet numMovesDone = 0;\n\nconst gameHeading = document.getElementById('game-heading');\nconst gameSquares = document.querySelectorAll('.game-square');\nconst restartButton = document.getElementById('restart-button');\n\ngameSquares.forEach((gameSquare, i) => {\n  gameSquare.addEventListener('click', () => {\n    const row = Math.floor(i / BOARD_WIDTH);\n    const col = i % BOARD_WIDTH;\n    makeMove(gameSquare);\n  });\n});\n\nrestartButton.addEventListener('click', restartGame);\n\nfunction makeMove(gameSquare) {\n  gameSquare.textContent = currentPlayer === 1 ? 'X' : 'O';\n  gameSquare.disabled = true;\n  numMovesDone++;\n\n  if (didPlayerWin()) {\n    gameHeading.textContent = `Player ${currentPlayer} Won!`;\n    endGame();\n  } else if (numMovesDone >= BOARD_WIDTH * BOARD_WIDTH) {\n    gameHeading.textContent = 'Tie Game!';\n    endGame();\n  } else {\n    currentPlayer = currentPlayer === 1 ? 2 : 1;\n    setCurrentPlayerHeading();\n  }\n}\n\nfunction didPlayerWin() {\n  const relevantText = currentPlayer === 1 ? 'X' : 'O';\n  return WIN_CONDITIONS.some(condition => {\n    return condition.every(gameSquarePosition => {\n      return gameSquares[gameSquarePosition].textContent === relevantText;\n    });\n  });\n}\n\nfunction endGame() {\n  restartButton.style.display = 'block';\n  gameSquares.forEach(gameSquare => {\n    gameSquare.disabled = true;\n  });\n}\n\nfunction setCurrentPlayerHeading() {\n  gameHeading.textContent = `Player ${currentPlayer}'s Turn`;\n}\n\nfunction restartGame() {\n  currentPlayer = 1;\n  numMovesDone = 0;\n  setCurrentPlayerHeading();\n  gameSquares.forEach(gameSquare => {\n    gameSquare.textContent = '';\n    gameSquare.disabled = false;\n  });\n  restartButton.style.display = 'none';\n}"
            ]
        },
        "startingCode": {
            "javascript": "// Write your code here.\n"
        },
        "submissionStatistics": {
            "correctCount": 1082,
            "failureCount": 602
        },
        "testHarness": {
            "sandboxCode": "// This file is initialized with a few test cases.\n// Feel free to add, edit, or remove test cases in\n// this file as you see fit!\n\n/* ---------------------------------- *\n * ----- BROWSER TESTING SET-UP ----- *\n * ---------------------------------- */\nconst {JSDOM} = require('jsdom');\nconst {readFileSync} = require('fs');\nconst {expect} = require('chai');\n\nconst html = readFileSync('data/index.html');\n\nlet gameHeading;\nlet gameSquares;\nlet restartButton;\n\nconst resetDom = () => {\n  const dom = new JSDOM(html, {\n    resources: 'usable',\n    pretendToBeVisual: true,\n  });\n\n  global.document = dom.window.document;\n  global.window = dom.window;\n\n  Object.defineProperty(window.HTMLElement.prototype, 'innerText', {\n    configurable: true,\n    get() {\n      return this.textContent;\n    },\n    set(val) {\n      this.textContent = val;\n    },\n  });\n\n  delete require.cache[require.resolve('./program.js')];\n  require('./program.js');\n\n  gameHeading = document.getElementById('game-heading');\n  gameSquares = document.querySelectorAll('.game-square');\n  restartButton = document.getElementById('restart-button');\n};\n/* ---------------------------------- *\n * ----- BROWSER TESTING SET-UP ----- *\n * ---------------------------------- */\n\nconst makeTieGame = () => {\n  gameSquares[0].click();\n  gameSquares[1].click();\n  gameSquares[2].click();\n  gameSquares[4].click();\n  gameSquares[3].click();\n  gameSquares[5].click();\n  gameSquares[7].click();\n  gameSquares[6].click();\n  gameSquares[8].click();\n};\n\nconst makePlayer1Win = () => {\n  gameSquares[0].click();\n  gameSquares[3].click();\n  gameSquares[1].click();\n  gameSquares[4].click();\n  gameSquares[2].click();\n};\n\nconst makePlayer2Win = () => {\n  gameSquares[3].click();\n  gameSquares[0].click();\n  gameSquares[4].click();\n  gameSquares[1].click();\n  gameSquares[6].click();\n  gameSquares[2].click();\n};\n\ndescribe('tic tac toe', () => {\n  beforeEach(() => {\n    resetDom();\n  });\n\n  describe('game heading', () => {\n    describe('while the game is active', () => {\n      it(`shows the correct player's turn`, () => {\n        expect(gameHeading.textContent).to.be.equal(`Player 1's Turn`);\n        gameSquares[0].click();\n        expect(gameHeading.textContent).to.be.equal(`Player 2's Turn`);\n        gameSquares[1].click();\n        expect(gameHeading.textContent).to.be.equal(`Player 1's Turn`);\n        gameSquares[2].click();\n        expect(gameHeading.textContent).to.be.equal(`Player 2's Turn`);\n        gameSquares[4].click();\n        expect(gameHeading.textContent).to.be.equal(`Player 1's Turn`);\n        gameSquares[3].click();\n        expect(gameHeading.textContent).to.be.equal(`Player 2's Turn`);\n        gameSquares[5].click();\n        expect(gameHeading.textContent).to.be.equal(`Player 1's Turn`);\n        gameSquares[7].click();\n        expect(gameHeading.textContent).to.be.equal(`Player 2's Turn`);\n        gameSquares[6].click();\n        expect(gameHeading.textContent).to.be.equal(`Player 1's Turn`);\n      });\n    });\n\n    describe('when the game is a tie', () => {\n      it('shows the correct text', () => {\n        makeTieGame();\n        expect(gameHeading.textContent).to.be.equal('Tie Game!');\n      });\n    });\n\n    describe('when player 1 wins', () => {\n      it('shows the correct text', () => {\n        makePlayer1Win();\n        expect(gameHeading.textContent).to.be.equal('Player 1 Won!');\n      });\n    });\n\n    describe('when player 2 wins', () => {\n      it('shows the correct text', () => {\n        makePlayer2Win();\n        expect(gameHeading.textContent).to.be.equal('Player 2 Won!');\n      });\n    });\n  });\n});\n",
            "unitTests": "/* ---------------------------------- *\n * ----- BROWSER TESTING SET-UP ----- *\n * ---------------------------------- */\nconst {JSDOM} = require('jsdom');\nconst {readFileSync} = require('fs');\nconst {expect} = require('chai');\n\nconst html = readFileSync('data/index.html');\n\nlet gameHeading;\nlet gameSquares;\nlet restartButton;\n\nconst resetDom = () => {\n  const dom = new JSDOM(html, {\n    resources: 'usable',\n    pretendToBeVisual: true,\n  });\n\n  global.document = dom.window.document;\n  global.window = dom.window;\n\n  Object.defineProperty(window.HTMLElement.prototype, 'innerText', {\n    configurable: true,\n    get() {\n      return this.textContent;\n    },\n    set(val) {\n      this.textContent = val;\n    },\n  });\n\n  delete require.cache[require.resolve('./program.js')];\n  require('./program.js');\n\n  gameHeading = document.getElementById('game-heading');\n  gameSquares = document.querySelectorAll('.game-square');\n  restartButton = document.getElementById('restart-button');\n};\n/* ---------------------------------- *\n * ----- BROWSER TESTING SET-UP ----- *\n * ---------------------------------- */\n\nconst makeTieGame = () => {\n  gameSquares[0].click();\n  gameSquares[1].click();\n  gameSquares[2].click();\n  gameSquares[4].click();\n  gameSquares[3].click();\n  gameSquares[5].click();\n  gameSquares[7].click();\n  gameSquares[6].click();\n  gameSquares[8].click();\n};\n\nconst makePlayer1Win = () => {\n  gameSquares[0].click();\n  gameSquares[3].click();\n  gameSquares[1].click();\n  gameSquares[4].click();\n  gameSquares[2].click();\n};\n\nconst makePlayer2Win = () => {\n  gameSquares[3].click();\n  gameSquares[0].click();\n  gameSquares[4].click();\n  gameSquares[1].click();\n  gameSquares[6].click();\n  gameSquares[2].click();\n};\n\ndescribe('tic tac toe', () => {\n  beforeEach(() => {\n    resetDom();\n  });\n\n  describe('game heading', () => {\n    describe('while the game is active', () => {\n      it(`shows the correct player's turn`, () => {\n        expect(gameHeading.textContent).to.be.equal(`Player 1's Turn`);\n        gameSquares[0].click();\n        expect(gameHeading.textContent).to.be.equal(`Player 2's Turn`);\n        gameSquares[1].click();\n        expect(gameHeading.textContent).to.be.equal(`Player 1's Turn`);\n        gameSquares[2].click();\n        expect(gameHeading.textContent).to.be.equal(`Player 2's Turn`);\n        gameSquares[4].click();\n        expect(gameHeading.textContent).to.be.equal(`Player 1's Turn`);\n        gameSquares[3].click();\n        expect(gameHeading.textContent).to.be.equal(`Player 2's Turn`);\n        gameSquares[5].click();\n        expect(gameHeading.textContent).to.be.equal(`Player 1's Turn`);\n        gameSquares[7].click();\n        expect(gameHeading.textContent).to.be.equal(`Player 2's Turn`);\n        gameSquares[6].click();\n        expect(gameHeading.textContent).to.be.equal(`Player 1's Turn`);\n      });\n    });\n\n    describe('when the game is a tie', () => {\n      it('shows the correct text', () => {\n        makeTieGame();\n        expect(gameHeading.textContent).to.be.equal('Tie Game!');\n      });\n    });\n\n    describe('when player 1 wins', () => {\n      it('shows the correct text', () => {\n        makePlayer1Win();\n        expect(gameHeading.textContent).to.be.equal('Player 1 Won!');\n      });\n    });\n\n    describe('when player 2 wins', () => {\n      it('shows the correct text', () => {\n        makePlayer2Win();\n        expect(gameHeading.textContent).to.be.equal('Player 2 Won!');\n      });\n    });\n  });\n\n  describe('game squares', () => {\n    describe('while the game is active', () => {\n      it('should display the correct symbol after being clicked', () => {\n        expect(gameSquares[0].textContent).to.be.equal('');\n        gameSquares[0].click();\n        expect(gameSquares[0].textContent).to.be.equal('X');\n        expect(gameSquares[1].textContent).to.be.equal('');\n        gameSquares[1].click();\n        expect(gameSquares[1].textContent).to.be.equal('O');\n        expect(gameSquares[2].textContent).to.be.equal('');\n        gameSquares[2].click();\n        expect(gameSquares[2].textContent).to.be.equal('X');\n        expect(gameSquares[4].textContent).to.be.equal('');\n        gameSquares[4].click();\n        expect(gameSquares[4].textContent).to.be.equal('O');\n        expect(gameSquares[3].textContent).to.be.equal('');\n        gameSquares[3].click();\n        expect(gameSquares[3].textContent).to.be.equal('X');\n        expect(gameSquares[5].textContent).to.be.equal('');\n        gameSquares[5].click();\n        expect(gameSquares[5].textContent).to.be.equal('O');\n        expect(gameSquares[7].textContent).to.be.equal('');\n        gameSquares[7].click();\n        expect(gameSquares[7].textContent).to.be.equal('X');\n        expect(gameSquares[6].textContent).to.be.equal('');\n        gameSquares[6].click();\n        expect(gameSquares[6].textContent).to.be.equal('O');\n      });\n\n      it('should be enabled by default and disabled after being clicked', () => {\n        expect(gameSquares[0].disabled).to.be.equal(false);\n        gameSquares[0].click();\n        expect(gameSquares[0].disabled).to.be.equal(true);\n        expect(gameSquares[1].disabled).to.be.equal(false);\n        gameSquares[1].click();\n        expect(gameSquares[1].disabled).to.be.equal(true);\n        expect(gameSquares[2].disabled).to.be.equal(false);\n        gameSquares[2].click();\n        expect(gameSquares[2].disabled).to.be.equal(true);\n        expect(gameSquares[4].disabled).to.be.equal(false);\n        gameSquares[4].click();\n        expect(gameSquares[4].disabled).to.be.equal(true);\n        expect(gameSquares[3].disabled).to.be.equal(false);\n        gameSquares[3].click();\n        expect(gameSquares[3].disabled).to.be.equal(true);\n        expect(gameSquares[5].disabled).to.be.equal(false);\n        gameSquares[5].click();\n        expect(gameSquares[5].disabled).to.be.equal(true);\n        expect(gameSquares[7].disabled).to.be.equal(false);\n        gameSquares[7].click();\n        expect(gameSquares[7].disabled).to.be.equal(true);\n        expect(gameSquares[6].disabled).to.be.equal(false);\n        gameSquares[6].click();\n        expect(gameSquares[6].disabled).to.be.equal(true);\n      });\n    });\n\n    describe('when the game is a tie', () => {\n      it('should all be disabled', () => {\n        makeTieGame();\n        gameSquares.forEach(gameSquare => {\n          expect(gameSquare.disabled).to.be.equal(true);\n        });\n      });\n    });\n\n    describe('when player 1 wins', () => {\n      it('should all be disabled', () => {\n        makePlayer1Win();\n        gameSquares.forEach(gameSquare => {\n          expect(gameSquare.disabled).to.be.equal(true);\n        });\n      });\n    });\n\n    describe('when player 2 wins', () => {\n      it('should all be disabled', () => {\n        makePlayer2Win();\n        gameSquares.forEach(gameSquare => {\n          expect(gameSquare.disabled).to.be.equal(true);\n        });\n      });\n    });\n  });\n\n  describe('restart button', () => {\n    describe('while the game is active', () => {\n      it('is hidden', () => {\n        expect(window.getComputedStyle(restartButton).display).to.be.equal('none');\n        gameSquares[0].click();\n        expect(window.getComputedStyle(restartButton).display).to.be.equal('none');\n        gameSquares[1].click();\n        expect(window.getComputedStyle(restartButton).display).to.be.equal('none');\n        gameSquares[2].click();\n        expect(window.getComputedStyle(restartButton).display).to.be.equal('none');\n        gameSquares[4].click();\n        expect(window.getComputedStyle(restartButton).display).to.be.equal('none');\n        gameSquares[3].click();\n        expect(window.getComputedStyle(restartButton).display).to.be.equal('none');\n        gameSquares[5].click();\n        expect(window.getComputedStyle(restartButton).display).to.be.equal('none');\n        gameSquares[7].click();\n        expect(window.getComputedStyle(restartButton).display).to.be.equal('none');\n        gameSquares[6].click();\n        expect(window.getComputedStyle(restartButton).display).to.be.equal('none');\n      });\n    });\n\n    describe('when the game is a tie', () => {\n      it('is visible', () => {\n        makeTieGame();\n        expect(window.getComputedStyle(restartButton).display).to.not.be.equal('none');\n      });\n    });\n\n    describe('when player 1 wins', () => {\n      it('shows the correct text', () => {\n        makePlayer1Win();\n        expect(window.getComputedStyle(restartButton).display).to.not.be.equal('none');\n      });\n    });\n\n    describe('when player 2 wins', () => {\n      it('shows the correct text', () => {\n        makePlayer2Win();\n        expect(window.getComputedStyle(restartButton).display).to.not.be.equal('none');\n      });\n    });\n\n    describe('on click', () => {\n      beforeEach(() => {\n        makePlayer2Win();\n        restartButton.click();\n      });\n\n      it('resets the game heading correctly', () => {\n        expect(gameHeading.textContent).to.be.equal(`Player 1's Turn`);\n      });\n\n      it('resets all of the game squares', () => {\n        gameSquares.forEach(gameSquare => {\n          expect(gameSquare.textContent).to.be.equal('');\n          expect(gameSquare.disabled).to.be.equal(false);\n        });\n      });\n\n      it('allows the game to be replayed', () => {\n        makePlayer1Win();\n        expect(gameHeading.textContent).to.be.equal('Player 1 Won!');\n      });\n\n      it('hides the restart button', () => {\n        expect(window.getComputedStyle(restartButton).display).to.be.equal('none');\n      });\n    });\n  });\n\n  describe('gameplay', () => {\n    describe('horizontal win conditions', () => {\n      it('first row should work', () => {\n        gameSquares[0].click();\n        gameSquares[3].click();\n        gameSquares[1].click();\n        gameSquares[4].click();\n        gameSquares[2].click();\n        expect(gameHeading.textContent).to.be.equal('Player 1 Won!');\n      });\n\n      it('second row should work', () => {\n        gameSquares[3].click();\n        gameSquares[0].click();\n        gameSquares[4].click();\n        gameSquares[1].click();\n        gameSquares[5].click();\n        expect(gameHeading.textContent).to.be.equal('Player 1 Won!');\n      });\n\n      it('third row should work', () => {\n        gameSquares[6].click();\n        gameSquares[0].click();\n        gameSquares[7].click();\n        gameSquares[1].click();\n        gameSquares[8].click();\n        expect(gameHeading.textContent).to.be.equal('Player 1 Won!');\n      });\n    });\n\n    describe('vertical win conditions', () => {\n      it('first column should work', () => {\n        gameSquares[0].click();\n        gameSquares[1].click();\n        gameSquares[3].click();\n        gameSquares[4].click();\n        gameSquares[6].click();\n        expect(gameHeading.textContent).to.be.equal('Player 1 Won!');\n      });\n\n      it('second column should work', () => {\n        gameSquares[1].click();\n        gameSquares[0].click();\n        gameSquares[4].click();\n        gameSquares[3].click();\n        gameSquares[7].click();\n        expect(gameHeading.textContent).to.be.equal('Player 1 Won!');\n      });\n\n      it('third column should work', () => {\n        gameSquares[2].click();\n        gameSquares[0].click();\n        gameSquares[5].click();\n        gameSquares[3].click();\n        gameSquares[8].click();\n        expect(gameHeading.textContent).to.be.equal('Player 1 Won!');\n      });\n    });\n\n    describe('diagonal win conditions', () => {\n      it('top-left to bottom-right should work', () => {\n        gameSquares[0].click();\n        gameSquares[1].click();\n        gameSquares[4].click();\n        gameSquares[2].click();\n        gameSquares[8].click();\n        expect(gameHeading.textContent).to.be.equal('Player 1 Won!');\n      });\n\n      it('top-right to bottom-left should work', () => {\n        gameSquares[2].click();\n        gameSquares[0].click();\n        gameSquares[4].click();\n        gameSquares[1].click();\n        gameSquares[6].click();\n        expect(gameHeading.textContent).to.be.equal('Player 1 Won!');\n      });\n    });\n  });\n});\n"
        },
        "testStrategy": "MOCHA",
        "uid": "tic-tac-toe",
        "video": {
            "annotations": [],
            "codeWalkthroughTime": null,
            "duration": 32,
            "instructor": "Conner Ardman",
            "overviewTime": null,
            "vimeoId": "645661027"
        }
    },
    "difficulty": null,
    "instructor": "Conner Ardman",
    "name": "Tic Tac Toe",
    "releaseDate": "2021-05-24T00:00:00Z",
    "type": "CODING_FRONTEND",
    "uid": "tic-tac-toe"
}