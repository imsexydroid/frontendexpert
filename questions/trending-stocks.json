{
    "acl": {
        "isAvailable": true,
        "isFree": false,
        "isFreeForStudents": false,
        "productRequired": [
            "frontendexpert"
        ]
    },
    "category": "JavaScript",
    "contents": {
        "acl": {
            "isAvailable": true,
            "isFree": false,
            "isFreeForStudents": false,
            "productRequired": [
                "frontendexpert"
            ]
        },
        "assessmentSummary": null,
        "category": "JavaScript",
        "changelog": [],
        "customInputVars": [],
        "difficulty": 0,
        "hints": [
            "<p>\n  The <span>Promise.all(promises)</span> function can be used to wait for\n  multiple promises to resolve at once.\n</p>\n",
            "\n<p>\n  The <span>arr.sort((valueA, valueB) => {})</span> function can be used to\n  sort an array with a custom sorting function. If the comparison function\n  returns a negative number, then valueA is sorted before valueB. If it returns\n  a positive number, then valueB is sorted before valueA.\n</p>"
        ],
        "isLongOutput": false,
        "isSlowExecution": false,
        "jsonTests": [],
        "languagesSupported": [
            "javascript"
        ],
        "name": "Trending Stocks",
        "notes": "",
        "prompt": "<div class=\"html\">\n  <p>\n    Write an asynchronous <span>trendingStocks</span> function that takes in a\n    required integer <span>n</span> and returns data\n    about the top <span>n</span> US-based stocks by market cap.\n  </p>\n\n  <p>\n    Specifically, the function should return an array containing <span>n</span> objects,\n    and each object should have 6 own properties: \"name\", \"symbol\",\n    \"price\", \"market-cap\", \"52-week-high\", and \"52-week-low\". These objects should contain the data\n    of the top <span>n</span> US-based stocks by market-cap.\n  </p>\n\n  <p>\n    You have been provided 3 different APIs (a symbols API, a prices API, and a market-cap API), each of which returns different stock-related data:\n  </p>\n\n  <pre><span class=\"CodeEditor-promptString CodeEditor-selectable\">https://api.frontendexpert.io/api/fe/stock-symbols</span></pre>\n  <p>\n    The symbols API returns a JSON-formatted array of objects, each representing one\n    of the 500 top US-based stocks by market-cap. Each object has 2 keys: \"name\", and \"symbol\".\n    These symbols are the same symbols used in the prices and market-cap APIs.\n    For example, the return value of this API might look like this:\n  </p>\n</div>\n<div class=\"code-wrapper prism\" style=\"margin-top: -15px; margin-bottom: 30px;\">\n  <pre class=\"line-numbers\"><code class=\"language-json\">[\n  {\n    \"symbol\": \"GOOG\",\n    \"name\": \"Alphabet Inc Class C\"\n  },\n  ...\n]</code></pre>\n</div>\n<div class=\"html\">\n  <pre><span class=\"CodeEditor-promptString CodeEditor-selectable\">https://api.frontendexpert.io/api/fe/stock-prices</span></pre>\n  <p>\n    The prices API takes one query parameter called <span>symbols</span>. This value\n    should be a JSON stringified array of requested stock symbols. For example:\n    a request to this API would look like this:\n  </p>\n  <pre><span class=\"CodeEditor-promptString CodeEditor-selectable\">https://api.frontendexpert.io/api/fe/stock-prices?symbols=[\"GOOG\"]</span></pre>\n\n  <p>\n    The prices API returns a JSON formatted array of objects, each representing one\n    of the requested stocks from the query parameter. Each object has 4 keys:\n    \"52-week-high\", \"52-week-low\", \"price\", and \"symbol\". These are the same\n    keys required for the objects in the return array, excluding the name and\n    market-cap. For example, the return value of this API might look like this:\n  </p>\n</div>\n<div class=\"code-wrapper prism\" style=\"margin-top: -15px; margin-bottom: 30px;\">\n  <pre class=\"line-numbers\"><code class=\"language-json\">[\n  {\n    \"symbol\": \"GOOG\",\n    \"price\": 1001.52,\n    \"52-week-low\": 1186.89,\n    \"52-week-high\": 803.1903\n  },\n  ...\n]</code></pre>\n</div>\n\n<div class=\"html\">\n  <pre><span class=\"CodeEditor-promptString CodeEditor-selectable\">https://api.frontendexpert.io/api/fe/stock-market-caps</span></pre>\n  <p>\n    The market-caps API returns a JSON formatted array of objects, each representing one\n    of the 500 top US-based stocks by market-cap. Each object has 2 keys: \"market-cap\", and \"symbol\".\n    These symbols are the same symbols as used in the symbols and prices APIs.\n    For example, the return value of this API might look like this:\n  </p>\n</div>\n<div class=\"code-wrapper prism\" style=\"margin-top: -15px\">\n  <pre class=\"line-numbers\"><code class=\"language-json\">[\n  {\n    \"symbol\": \"GOOG\",\n    \"market-cap\": 728535558140\n  },\n  ...\n]</code></pre>\n</div>\n\n\n<div class=\"html\">\n  <p>\n    Your code should minimize daisy-chained fetch requests as much as possible\n    (i.e. if two requests don't depend on each other's responses, they should\n    not wait for each other). The parameter <span>n</span> will always be\n    positive and less than or equal to 500.\n  </p>\n\n  <h3>Sample Usage</h3>\n</div>\n<div class=\"code-wrapper prism\" style=\"margin-top: -10px\">\n  <pre\n    class=\"line-numbers\"\n  ><code class=\"language-javascript\">await trendingStocks(0); // returns []\nawait trendingStocks(2); // returns [\n  {\n    \"52-week-high\": 131.12,\n    \"52-week-low\": 180.1,\n    \"market-cap\": 809508034020,\n    \"name\": \"Apple Inc.\",\n    \"price\": 155.15,\n    \"symbol\": \"AAPL\",\n  },\n  {\n    \"52-week-high\": 824.3,\n    \"52-week-low\": 1198,\n    \"market-cap\": 733823966137,\n    \"name\": \"Alphabet Inc Class A\",\n    \"price\": 1007.71,\n    \"symbol\": \"GOOGL\",\n  },\n]</code></pre>\n</div>",
        "releaseDate": "2022-09-10T00:00:00Z",
        "resources": {
            "javascript": {
                "language": "javascript",
                "sandboxCode": "// This file is initialized with a few test cases.\n// Feel free to add, edit, or remove test cases in\n// this file as you see fit!\n\nconst chai = require('chai');\nconst {getPrices, getSymbols, getMarketCaps} = require('./data/api');\nconst spies = require('chai-spies');\nconst {expect} = chai;\n\nchai.use(spies);\nconst {trendingStocks} = require('./program.js');\n\nconst convertStringToUrlObj = url => {\n  const [base, params] = url.split('?');\n  const paramPairs = params?.split('&');\n  const urlObj = new URL(base);\n  paramPairs?.forEach(paramStr => {\n    const [key, value] = paramStr.split('=');\n    urlObj.searchParams.set(key, value);\n  });\n  return urlObj;\n};\n\nglobal.fetch = url => {\n  const urlObj = typeof url === 'object' ? url : convertStringToUrlObj(url);\n  if (urlObj.origin + urlObj.pathname === 'https://api.frontendexpert.io/api/fe/stock-prices') {\n    const prices = getPrices(urlObj.searchParams.get('symbols'));\n    const response = {\n      status: 200,\n      ok: true,\n      statusText: 'OK',\n      type: 'cors',\n      url: urlObj.toString(),\n      redirected: false,\n      json: async () => prices,\n      text: async () => JSON.stringify(prices),\n    };\n    return Promise.resolve(response);\n  } else if (\n    urlObj.origin + urlObj.pathname ===\n    'https://api.frontendexpert.io/api/fe/stock-symbols'\n  ) {\n    const symbols = getSymbols();\n    const response = {\n      status: 200,\n      ok: true,\n      statusText: 'OK',\n      type: 'cors',\n      url: urlObj.toString(),\n      redirected: false,\n      json: async () => symbols,\n      text: async () => JSON.stringify(symbols),\n    };\n    return Promise.resolve(response);\n  } else if (\n    urlObj.origin + urlObj.pathname ===\n    'https://api.frontendexpert.io/api/fe/stock-market-caps'\n  ) {\n    const marketCaps = getMarketCaps();\n    const response = {\n      status: 200,\n      ok: true,\n      statusText: 'OK',\n      type: 'cors',\n      url: urlObj.toString(),\n      redirected: false,\n      json: async () => marketCaps,\n      text: async () => JSON.stringify(marketCaps),\n    };\n    return Promise.resolve(response);\n  }\n\n  const response = {\n    status: 404,\n    ok: false,\n    statusText: 'Not Found',\n    type: 'cors',\n    url: urlObj.toString(),\n    redirected: false,\n  };\n  return Promise.resolve(response);\n};\n\ndescribe('trending stocks', () => {\n  beforeEach(() => {\n    chai.spy.restore();\n  });\n\n  it('passing 1 returns 1 stock', async () => {\n    const stocks = await trendingStocks(1);\n    expect(stocks.length).to.deep.equal(1);\n  });\n\n  it('passing 1 returns the correct first stock', async () => {\n    const stocks = await trendingStocks(1);\n    expect(stocks[0]).to.deep.equal({\n      '52-week-high': 131.12,\n      '52-week-low': 180.1,\n      'market-cap': 809508034020,\n      name: 'Apple Inc.',\n      price: 155.15,\n      symbol: 'AAPL',\n    });\n  });\n\n  it('makes exactly 3 fetch requests per function call', async () => {\n    chai.spy.on(global, 'fetch');\n    const stocks = await trendingStocks(5);\n    expect(global.fetch).to.have.been.called.exactly(3);\n  });\n});\n",
                "solutions": [
                    "// Copyright \u00a9 2023 AlgoExpert LLC. All rights reserved.\n\nconst SYMBOLS_API_BASE_URL = 'https://api.frontendexpert.io/api/fe/stock-symbols';\nconst MARKET_CAPS_API_BASE_URL = 'https://api.frontendexpert.io/api/fe/stock-market-caps';\nconst PRICES_API_BASE_URL = 'https://api.frontendexpert.io/api/fe/stock-prices';\n\nasync function trendingStocks(n) {\n  const [symbolsResponse, marketCapsResponse] = await Promise.all([\n    fetch(SYMBOLS_API_BASE_URL),\n    fetch(MARKET_CAPS_API_BASE_URL),\n  ]);\n\n  const [symbols, marketCaps] = await Promise.all([\n    symbolsResponse.json(),\n    marketCapsResponse.json(),\n  ]);\n\n  const requestedSymbols = marketCaps\n    .sort((stockA, stockB) => {\n      return stockB['market-cap'] - stockA['market-cap'];\n    })\n    .slice(0, n)\n    .map(marketCapObj => marketCapObj.symbol);\n\n  const pricesUrl = new URL(PRICES_API_BASE_URL);\n  pricesUrl.searchParams.set('symbols', JSON.stringify(requestedSymbols));\n  const pricesResponse = await fetch(pricesUrl);\n  const prices = await pricesResponse.json();\n\n  const namesAndMarketCapsBySymbol = getNamesAndMarketCapsBySymbol(symbols, marketCaps);\n\n  const stockData = prices.map(({symbol, ...rest}) => ({\n    symbol,\n    ...namesAndMarketCapsBySymbol[symbol],\n    ...rest,\n  }));\n\n  return stockData;\n}\n\nfunction getNamesAndMarketCapsBySymbol(symbols, marketCaps) {\n  const namesAndMarketCapsBySymbol = {};\n  symbols.forEach(({symbol, name}) => {\n    namesAndMarketCapsBySymbol[symbol] = {name};\n  });\n\n  marketCaps.forEach(({symbol, 'market-cap': marketCap}) => {\n    namesAndMarketCapsBySymbol[symbol]['market-cap'] = marketCap;\n  });\n\n  return namesAndMarketCapsBySymbol;\n}\n\n// Do not edit the line below.\nexports.trendingStocks = trendingStocks;\n"
                ],
                "solutionsDisabled": false,
                "startingCode": "const SYMBOLS_API_BASE_URL = 'https://api.frontendexpert.io/api/fe/stock-symbols';\nconst MARKET_CAPS_API_BASE_URL = 'https://api.frontendexpert.io/api/fe/stock-market-caps';\nconst PRICES_API_BASE_URL = 'https://api.frontendexpert.io/api/fe/stock-prices';\n\nasync function trendingStocks(n) {\n  // Write your code here.\n}\n\n// Do not edit the line below.\nexports.trendingStocks = trendingStocks;\n",
                "unitTests": "const chai = require('chai');\nconst {getPrices, getSymbols, getMarketCaps} = require('./data/api');\nconst spies = require('chai-spies');\nconst {expect} = chai;\n\nchai.use(spies);\nconst {trendingStocks} = require('./program.js');\n\nconst convertStringToUrlObj = url => {\n  const [base, params] = url.split('?');\n  const paramPairs = params?.split('&');\n  const urlObj = new URL(base);\n  paramPairs?.forEach(paramStr => {\n    const [key, value] = paramStr.split('=');\n    urlObj.searchParams.set(key, value);\n  });\n  return urlObj;\n};\n\nglobal.fetch = url => {\n  const urlObj = typeof url === 'object' ? url : convertStringToUrlObj(url);\n  if (urlObj.origin + urlObj.pathname === 'https://api.frontendexpert.io/api/fe/stock-prices') {\n    const prices = getPrices(urlObj.searchParams.get('symbols'));\n    const response = {\n      status: 200,\n      ok: true,\n      statusText: 'OK',\n      type: 'cors',\n      url: urlObj.toString(),\n      redirected: false,\n      json: async () => prices,\n      text: async () => JSON.stringify(prices),\n    };\n    return Promise.resolve(response);\n  } else if (\n    urlObj.origin + urlObj.pathname ===\n    'https://api.frontendexpert.io/api/fe/stock-symbols'\n  ) {\n    const symbols = getSymbols();\n    const response = {\n      status: 200,\n      ok: true,\n      statusText: 'OK',\n      type: 'cors',\n      url: urlObj.toString(),\n      redirected: false,\n      json: async () => symbols,\n      text: async () => JSON.stringify(symbols),\n    };\n    return Promise.resolve(response);\n  } else if (\n    urlObj.origin + urlObj.pathname ===\n    'https://api.frontendexpert.io/api/fe/stock-market-caps'\n  ) {\n    const marketCaps = getMarketCaps();\n    const response = {\n      status: 200,\n      ok: true,\n      statusText: 'OK',\n      type: 'cors',\n      url: urlObj.toString(),\n      redirected: false,\n      json: async () => marketCaps,\n      text: async () => JSON.stringify(marketCaps),\n    };\n    return Promise.resolve(response);\n  }\n\n  const response = {\n    status: 404,\n    ok: false,\n    statusText: 'Not Found',\n    type: 'cors',\n    url: urlObj.toString(),\n    redirected: false,\n  };\n  return Promise.resolve(response);\n};\n\ndescribe('trending stocks', () => {\n  beforeEach(() => {\n    chai.spy.restore();\n  });\n\n  it('passing 0 returns and empty array', async () => {\n    const stocks = await trendingStocks(0);\n    expect(stocks).to.deep.equal([]);\n  });\n\n  it('passing 1 returns 1 stock', async () => {\n    const stocks = await trendingStocks(1);\n    expect(stocks.length).to.deep.equal(1);\n  });\n\n  it('stocks have the correct keys', async () => {\n    const stocks = await trendingStocks(1);\n    expect(stocks[0].hasOwnProperty('name')).to.be.true;\n    expect(stocks[0].hasOwnProperty('symbol')).to.be.true;\n    expect(stocks[0].hasOwnProperty('price')).to.be.true;\n    expect(stocks[0].hasOwnProperty('52-week-low')).to.be.true;\n    expect(stocks[0].hasOwnProperty('52-week-high')).to.be.true;\n    expect(stocks[0].hasOwnProperty('market-cap')).to.be.true;\n  });\n\n  it('passing 1 returns the correct first stock', async () => {\n    const stocks = await trendingStocks(1);\n    expect(stocks[0]).to.deep.equal({\n      '52-week-high': 131.12,\n      '52-week-low': 180.1,\n      'market-cap': 809508034020,\n      name: 'Apple Inc.',\n      price: 155.15,\n      symbol: 'AAPL',\n    });\n  });\n\n  it('passing 2 returns the correct first 2 stocks', async () => {\n    const stocks = await trendingStocks(2);\n    expect(stocks.length).to.equal(2);\n    expect(stocks).to.deep.include({\n      '52-week-high': 131.12,\n      '52-week-low': 180.1,\n      'market-cap': 809508034020,\n      name: 'Apple Inc.',\n      price: 155.15,\n      symbol: 'AAPL',\n    });\n    expect(stocks).to.deep.include({\n      '52-week-high': 824.3,\n      '52-week-low': 1198,\n      'market-cap': 733823966137,\n      name: 'Alphabet Inc Class A',\n      price: 1007.71,\n      symbol: 'GOOGL',\n    });\n  });\n\n  it('function can be called multiple times', async () => {\n    const stocks = await trendingStocks(1);\n    expect(stocks[0]).to.deep.equal({\n      '52-week-high': 131.12,\n      '52-week-low': 180.1,\n      'market-cap': 809508034020,\n      name: 'Apple Inc.',\n      price: 155.15,\n      symbol: 'AAPL',\n    });\n\n    const stocks2 = await trendingStocks(5);\n    expect(stocks2.length).to.equal(5);\n    expect(stocks2).to.deep.include({\n      '52-week-high': 131.12,\n      '52-week-low': 180.1,\n      'market-cap': 809508034020,\n      name: 'Apple Inc.',\n      price: 155.15,\n      symbol: 'AAPL',\n    });\n    expect(stocks2).to.deep.include({\n      '52-week-high': 824.3,\n      '52-week-low': 1198,\n      'market-cap': 733823966137,\n      name: 'Alphabet Inc Class A',\n      price: 1007.71,\n      symbol: 'GOOGL',\n    });\n    expect(stocks2).to.deep.include({\n      '52-week-high': 803.1903,\n      '52-week-low': 1186.89,\n      'market-cap': 728535558140,\n      name: 'Alphabet Inc Class C',\n      price: 1001.52,\n      symbol: 'GOOG',\n    });\n    expect(stocks2).to.deep.include({\n      '52-week-high': 812.5,\n      '52-week-low': 1498,\n      'market-cap': 685873374731,\n      name: 'Amazon.com Inc',\n      price: 1350.5,\n      symbol: 'AMZN',\n    });\n    expect(stocks2).to.deep.include({\n      '52-week-high': 63.22,\n      '52-week-low': 96.07,\n      'market-cap': 689978437468,\n      name: 'Microsoft Corp.',\n      price: 85.01,\n      symbol: 'MSFT',\n    });\n  });\n\n  it('makes exactly 3 fetch requests per function call', async () => {\n    chai.spy.on(global, 'fetch');\n    const stocks = await trendingStocks(5);\n    expect(global.fetch).to.have.been.called.exactly(3);\n  });\n\n  it('first two fetch calls do not wait for previous call to return', () => {\n    const savedFetch = global.fetch;\n    global.fetch = url => {\n      const value = savedFetch(url);\n      return new Promise(res => {\n        setTimeout(() => res(value), 0);\n      });\n    };\n    chai.spy.on(global, 'fetch');\n    const stocks = trendingStocks(1);\n    expect(global.fetch).to.have.been.called.exactly(2);\n    global.fetch = savedFetch;\n  });\n});\n"
            }
        },
        "spaceTime": "",
        "submissionStatistics": {
            "correctCount": 785,
            "failureCount": 288
        },
        "testStrategy": "SANDBOX_ONLY",
        "tests": [],
        "uid": "trending-stocks",
        "version": 0,
        "video": {
            "annotations": [],
            "codeWalkthroughTime": null,
            "duration": 0,
            "instructor": "Conner Ardman",
            "overviewTime": null,
            "vimeoId": "743238608"
        },
        "visualization": {
            "inputType": null,
            "outputType": null
        }
    },
    "difficulty": 0,
    "instructor": "Conner Ardman",
    "name": "Trending Stocks",
    "releaseDate": "2022-09-10T00:00:00Z",
    "type": "CODING_STANDARD",
    "uid": "trending-stocks"
}