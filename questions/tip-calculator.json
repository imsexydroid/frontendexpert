{
    "acl": {
        "isAvailable": true,
        "isFree": false,
        "isFreeForStudents": false,
        "productRequired": [
            "frontendexpert"
        ]
    },
    "category": "React Components",
    "contents": {
        "acl": {
            "isAvailable": true,
            "isFree": false,
            "isFreeForStudents": false,
            "productRequired": [
                "frontendexpert"
            ]
        },
        "category": "React Components",
        "hints": [
            "<p>\n  Inputs tend to be easiest to work with in React when using controlled\n  components with a single state value associated with each input.\n</p>",
            "<p>\n  In React, the <span>onChange</span> prop acts like the native\n  <span>input</span> event. Consider listening to this event to save any\n  changes as the user types in the inputs.\n</p>",
            "<p>\n  The <span>toFixed</span> function can be used to round a number to a specified\n  number of decimal places and convert the result into a string.\n</p>"
        ],
        "languageToWrite": "jsx",
        "name": "Tip Calculator",
        "notes": "",
        "prompt": "<div class=\"html\">\n  <p>\n    You're given a CSS file for a tip calculator, and you need to implement\n    the component using React.\n  </p>\n\n  <p>\n    The tip calculator should have 3 number inputs in this order, each with an\n    associated label:\n  </p>\n  <ul>\n    <li>\n      <b>Bill</b>: The total price of a bill, defaulting to 50.\n    </li>\n    <li>\n      <b>Tip Percentage</b>: The percentage that the user is tipping, defaulting to 18.\n    </li>\n    <li>\n      <b>Number of People</b>: The number of people splitting the bill,\n      defaulting to 1.\n    </li>\n  </ul>\n\n  <p>\n    Below the inputs are two paragraphs. The first paragraph displays the\n    total tip, rounded to two decimal places. The total tip is calculated by\n    multiplying the bill value by the percentage value (which must be converted to\n    a percentage by multiplying by .01). For example, if the bill\n    was $50 and the tip percentage was 18%, the first paragraph would read:\n    \"Total Tip: $9.00\".\n  </p>\n\n  <p>\n    The second paragraph displays the tip per person, rounded to two decimal\n    places. The tip per person is calculated by dividing the total tip by\n    the number of people splitting the bill. For example, if the total tip was\n    $9.00 and two people are splitting the bill, the second paragraph would read:\n    \"Tip Per Person: $4.50\".\n  </p>\n\n  <p>\n    If any of the values needed to calculate the total tip or the tip person are\n    empty strings, then the resulting numbers should be replaced by the \"-\"\n    character without a \"$\". For example, the second paragraph might read\n    \"Tip Per Person: -\" in this case. For simplicity, you do not need to handle\n    the case where a user types in 0 or a negative number for any of the inputs.\n  </p>\n\n  <p>\n    Your component has already been rendered to the DOM inside of a\n    <span>#root</span> div directly in the body with the CSS imported.\n  </p>\n</div>",
        "promptCode": {
            "css": "#root {\n  background-color: lightgrey;\n  width: fit-content;\n  padding: 10px;\n  border-radius: 10px;\n}\n\nlabel {\n  display: block;\n  font-weight: bold;\n}\n\ninput {\n  display: block;\n  width: 100%;\n  margin-bottom: 10px;\n}\n\np {\n  text-align: right;\n}"
        },
        "reactConfig": {
            "componentName": "TipCalculator"
        },
        "solutions": {
            "jsx": [
                "// Copyright \u00a9 2023 AlgoExpert LLC. All rights reserved.\n\nimport React, {useState} from 'react';\n\nexport default function TipCalculator() {\n  const [bill, setBill] = useState(50);\n  const [tipPercentage, setTipPercentage] = useState(18);\n  const [people, setPeople] = useState(1);\n\n  const totalTip = (bill * tipPercentage) / 100;\n  const perPersonTip = totalTip / people;\n\n  return (\n    <>\n      <label htmlFor=\"bill\">Bill</label>\n      <input\n        id=\"bill\"\n        type=\"number\"\n        min=\"0\"\n        value={bill}\n        onChange={event => {\n          setBill(parseInt(event.target.value));\n        }}\n      />\n\n      <label htmlFor=\"tipPercentage\">Tip Percentage</label>\n      <input\n        id=\"tipPercentage\"\n        type=\"number\"\n        min=\"0\"\n        value={tipPercentage}\n        onChange={event => {\n          setTipPercentage(parseInt(event.target.value));\n        }}\n      />\n\n      <label htmlFor=\"people\">Number of People</label>\n      <input\n        id=\"people\"\n        type=\"number\"\n        min=\"1\"\n        value={people}\n        onChange={event => {\n          setPeople(parseInt(event.target.value));\n        }}\n      />\n\n      <p>Total Tip: {isNaN(totalTip) ? '-' : `$${totalTip.toFixed(2)}`}</p>\n      <p>Tip Per Person: {isNaN(perPersonTip) ? '-' : `$${perPersonTip.toFixed(2)}`}</p>\n    </>\n  );\n}"
            ]
        },
        "startingCode": {
            "jsx": "import React from 'react';\n\nexport default function TipCalculator() {\n  // Write your code here.\n\n  return (\n    <>\n      {/* Write your code here. */}\n    </>\n  );\n}"
        },
        "submissionStatistics": {
            "correctCount": 2283,
            "failureCount": 2550
        },
        "testHarness": {
            "sandboxCode": "// This file is initialized with a few test cases.\n// Feel free to add, edit, or remove test cases in\n// this file as you see fit!\n\n/* ---------------------------------- *\n * ----- BROWSER TESTING SET-UP ----- *\n * ---------------------------------- */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport TipCalculator from './program';\nimport {act, Simulate} from 'react-dom/test-utils';\nconst {JSDOM} = require('jsdom');\nconst chai = require('chai');\nconst {expect} = chai;\n\nlet rootContainer;\nlet inputs;\nlet labels;\nlet paragraphs;\n\nconst resetDom = () => {\n  const dom = new JSDOM({\n    url: 'http://localhost:3000',\n    resources: 'usable',\n    pretendToBeVisual: true,\n  });\n\n  global.document = dom.window.document;\n  global.window = dom.window;\n\n  for (const [key, value] of Object.entries(React)) {\n    global[key] = value;\n  }\n\n  rootContainer = document.createElement('div');\n  rootContainer.id = 'root';\n  document.body.appendChild(rootContainer);\n\n  act(() => {\n    ReactDOM.render(<TipCalculator />, rootContainer);\n  });\n\n  inputs = document.querySelectorAll('input');\n  labels = document.querySelectorAll('label');\n  paragraphs = document.querySelectorAll('p');\n};\n\n/* ---------------------------------- *\n * ----- BROWSER TESTING SET-UP ----- *\n * ---------------------------------- */\n\nconst typeInInput = (input, text) => {\n  for (let i = 0; i < text.length; i++) {\n    const subStr = text.substr(0, i + 1);\n    const newChar = text.charAt(i);\n    input.value = subStr;\n\n    Simulate.input(input, {\n      inputType: 'insertText',\n      data: newChar,\n    });\n\n    const options = {\n      key: newChar,\n      charCode: 0, // Only set on keypress\n\n      // keycode and which are set to uppercase for keydown/keyup events\n      keyCode: newChar.toUpperCase().charCodeAt(0),\n      which: newChar.toUpperCase().charCodeAt(0),\n      code: `Key${newChar.toUpperCase()}`,\n    };\n\n    Simulate.keyDown(input, options);\n    Simulate.keyPress(input, {\n      ...options,\n      charCode: newChar.charCodeAt(0),\n      keyCode: newChar.charCodeAt(0),\n      which: newChar.charCodeAt(0),\n    });\n    Simulate.keyUp(input, options);\n  }\n  Simulate.change(input, {target: {value: text}});\n};\n\ndescribe('Tip Calculator', () => {\n  beforeEach(() => {\n    resetDom();\n  });\n\n  afterEach(() => {\n    ReactDOM.unmountComponentAtNode(rootContainer);\n    rootContainer.remove();\n    rootContainer = null;\n  });\n\n  describe('labels', () => {\n    const expected_labels = ['Bill', 'Tip Percentage', 'Number of People'];\n\n    it('have the correct text content', () => {\n      labels.forEach((label, i) => {\n        expect(label.textContent.trim()).to.equal(expected_labels[i]);\n      });\n    });\n  });\n\n  describe('inputs', () => {\n    it('bill input has the correct attributes and default value', () => {\n      const input = inputs[0];\n      expect(input.type).to.equal('number');\n      expect(input.value).to.equal('50');\n    });\n\n    it('bill input can be updated', () => {\n      const input = inputs[0];\n      typeInInput(input, '10');\n      expect(input.value).to.equal('10');\n      typeInInput(input, '15');\n      expect(input.value).to.equal('15');\n    });\n  });\n\n  describe('paragraphs', () => {\n    it('have the correct initial text', () => {\n      const expected_paragraphs = ['Total Tip: $9.00', 'Tip Per Person: $9.00'];\n\n      expect(paragraphs.length).to.equal(2);\n      paragraphs.forEach((label, i) => {\n        expect(label.textContent.trim()).to.equal(expected_paragraphs[i]);\n      });\n    });\n  });\n});\n",
            "unitTests": "/* ---------------------------------- *\n * ----- BROWSER TESTING SET-UP ----- *\n * ---------------------------------- */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport TipCalculator from './program';\nimport {act, Simulate} from 'react-dom/test-utils';\nconst {JSDOM} = require('jsdom');\nconst chai = require('chai');\nconst {expect} = chai;\n\nlet rootContainer;\nlet inputs;\nlet labels;\nlet paragraphs;\n\nconst resetDom = () => {\n  const dom = new JSDOM({\n    url: 'http://localhost:3000',\n    resources: 'usable',\n    pretendToBeVisual: true,\n  });\n\n  global.document = dom.window.document;\n  global.window = dom.window;\n\n  for (const [key, value] of Object.entries(React)) {\n    global[key] = value;\n  }\n\n  rootContainer = document.createElement('div');\n  rootContainer.id = 'root';\n  document.body.appendChild(rootContainer);\n\n  act(() => {\n    ReactDOM.render(<TipCalculator />, rootContainer);\n  });\n\n  inputs = document.querySelectorAll('input');\n  labels = document.querySelectorAll('label');\n  paragraphs = document.querySelectorAll('p');\n};\n\nfunction waitForRender() {\n  return new Promise(function (resolve) {\n    setImmediate(resolve);\n  });\n}\n\n/* ---------------------------------- *\n * ----- BROWSER TESTING SET-UP ----- *\n * ---------------------------------- */\n\nconst typeInInput = (input, text) => {\n  for (let i = 0; i < text.length; i++) {\n    const subStr = text.substr(0, i + 1);\n    const newChar = text.charAt(i);\n    input.value = subStr;\n\n    Simulate.input(input, {\n      inputType: 'insertText',\n      data: newChar,\n    });\n\n    const options = {\n      key: newChar,\n      charCode: 0, // Only set on keypress\n\n      // keycode and which are set to uppercase for keydown/keyup events\n      keyCode: newChar.toUpperCase().charCodeAt(0),\n      which: newChar.toUpperCase().charCodeAt(0),\n      code: `Key${newChar.toUpperCase()}`,\n    };\n\n    Simulate.keyDown(input, options);\n    Simulate.keyPress(input, {\n      ...options,\n      charCode: newChar.charCodeAt(0),\n      keyCode: newChar.charCodeAt(0),\n      which: newChar.charCodeAt(0),\n    });\n    Simulate.keyUp(input, options);\n  }\n  Simulate.change(input, {target: {value: text}});\n};\n\ndescribe('Tip Calculator', () => {\n  beforeEach(() => {\n    resetDom();\n  });\n\n  afterEach(() => {\n    ReactDOM.unmountComponentAtNode(rootContainer);\n    rootContainer.remove();\n    rootContainer = null;\n  });\n\n  describe('labels', () => {\n    const expected_labels = ['Bill', 'Tip Percentage', 'Number of People'];\n\n    it('have the correct text content', () => {\n      labels.forEach((label, i) => {\n        expect(label.textContent.trim()).to.equal(expected_labels[i]);\n      });\n    });\n\n    it('are associated with correct inputs', () => {\n      inputs.forEach((input, i) => {\n        const associatedLabels = input.labels;\n        expect(associatedLabels.length).to.equal(1);\n        expect(associatedLabels[0].textContent.trim()).to.equal(expected_labels[i]);\n      });\n    });\n  });\n\n  describe('inputs', () => {\n    it('bill input has the correct attributes and default value', () => {\n      const input = inputs[0];\n      expect(input.type).to.equal('number');\n      expect(input.value).to.equal('50');\n    });\n\n    it('percentage input has the correct attributes and default value', () => {\n      const input = inputs[1];\n      expect(input.type).to.equal('number');\n      expect(input.value).to.equal('18');\n    });\n\n    it('people input has the correct attributes and default value', () => {\n      const input = inputs[2];\n      expect(input.type).to.equal('number');\n      expect(input.value).to.equal('1');\n    });\n\n    it('bill input can be updated', () => {\n      const input = inputs[0];\n      typeInInput(input, '10');\n      expect(input.value).to.equal('10');\n      typeInInput(input, '15');\n      expect(input.value).to.equal('15');\n    });\n\n    it('percentage input can be updated', () => {\n      const input = inputs[1];\n      typeInInput(input, '20');\n      expect(input.value).to.equal('20');\n      typeInInput(input, '15');\n      expect(input.value).to.equal('15');\n    });\n\n    it('people input can be updated', () => {\n      const input = inputs[2];\n      typeInInput(input, '2');\n      expect(input.value).to.equal('2');\n      typeInInput(input, '5');\n      expect(input.value).to.equal('5');\n    });\n  });\n\n  describe('paragraphs', () => {\n    it('have the correct initial text', () => {\n      const expected_paragraphs = ['Total Tip: $9.00', 'Tip Per Person: $9.00'];\n      expect(paragraphs.length).to.equal(2);\n      paragraphs.forEach((label, i) => {\n        expect(label.textContent.trim()).to.equal(expected_paragraphs[i]);\n      });\n    });\n\n    it('correctly update on changes', async () => {\n      typeInInput(inputs[0], '30');\n      typeInInput(inputs[1], '20');\n      typeInInput(inputs[2], '2');\n      await waitForRender();\n\n      const expected_paragraphs = ['Total Tip: $6.00', 'Tip Per Person: $3.00'];\n      expect(paragraphs.length).to.equal(2);\n      paragraphs.forEach((label, i) => {\n        expect(label.textContent.trim()).to.equal(expected_paragraphs[i]);\n      });\n    });\n\n    it('correctly round updates on changes', async () => {\n      typeInInput(inputs[0], '100');\n      typeInInput(inputs[1], '18');\n      typeInInput(inputs[2], '7');\n      await waitForRender();\n\n      let expected_paragraphs = ['Total Tip: $18.00', 'Tip Per Person: $2.57'];\n      expect(paragraphs.length).to.equal(2);\n      paragraphs.forEach((label, i) => {\n        expect(label.textContent.trim()).to.equal(expected_paragraphs[i]);\n      });\n\n      typeInInput(inputs[2], '11');\n      await waitForRender();\n\n      expected_paragraphs = ['Total Tip: $18.00', 'Tip Per Person: $1.64'];\n      expect(paragraphs.length).to.equal(2);\n      paragraphs.forEach((label, i) => {\n        expect(label.textContent.trim()).to.equal(expected_paragraphs[i]);\n      });\n    });\n\n    it('correctly handles NaN', async () => {\n      typeInInput(inputs[0], '100');\n      typeInInput(inputs[1], '');\n      typeInInput(inputs[2], '7');\n      await waitForRender();\n\n      let expected_paragraphs = ['Total Tip: -', 'Tip Per Person: -'];\n      expect(paragraphs.length).to.equal(2);\n      paragraphs.forEach((label, i) => {\n        expect(label.textContent.trim()).to.equal(expected_paragraphs[i]);\n      });\n\n      typeInInput(inputs[1], '18');\n      await waitForRender();\n\n      expected_paragraphs = ['Total Tip: $18.00', 'Tip Per Person: $2.57'];\n      expect(paragraphs.length).to.equal(2);\n      paragraphs.forEach((label, i) => {\n        expect(label.textContent.trim()).to.equal(expected_paragraphs[i]);\n      });\n    });\n  });\n});\n"
        },
        "testStrategy": "REACT_MOCHA",
        "uid": "tip-calculator",
        "video": {
            "annotations": [],
            "codeWalkthroughTime": null,
            "duration": 0,
            "instructor": "Conner Ardman",
            "overviewTime": null,
            "vimeoId": "708835568"
        }
    },
    "difficulty": null,
    "instructor": "Conner Ardman",
    "name": "Tip Calculator",
    "releaseDate": "2022-05-24T00:00:00Z",
    "type": "CODING_FRONTEND",
    "uid": "tip-calculator"
}