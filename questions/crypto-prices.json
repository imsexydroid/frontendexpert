{
    "acl": {
        "isAvailable": true,
        "isFree": false,
        "isFreeForStudents": false,
        "productRequired": [
            "frontendexpert"
        ]
    },
    "category": "React Components",
    "contents": {
        "acl": {
            "isAvailable": true,
            "isFree": false,
            "isFreeForStudents": false,
            "productRequired": [
                "frontendexpert"
            ]
        },
        "category": "React Components",
        "hints": [
            "<p>\n  Since <span>fetch</span> needs to be called on mount and when the page changes,\n  consider using a <span>useEffect</span> that depends on the current page.\n</p>",
            "<p>\n  HTML tables generally use these tags that you might find useful:\n  <span>table</span>, <span>thead</span>, <span>tbody</span>, <span>tr</span>,\n  <span>th</span>, and <span>td</span>.\n</p>"
        ],
        "languageToWrite": "jsx",
        "name": "Crypto Prices",
        "notes": "<div class=\"html\">\n  <p>\n    There is a small typo in the video at 5:15. When creating the column\n    headings, all of the <span>th</span> tags should be contained in a single\n    <span>tr</span> tag. This is required as the heading cells are still\n    considered table cells and thus must be in a table row.\n  </p>\n</div>",
        "prompt": "<div class=\"html\">\n  <p>\n    You're given a CSS file for a component displaying cryptocurrency prices,\n    and you need to implement the component using React.\n  </p>\n\n  <p>\n    When the component initially mounts, it should make an API request to the\n    cryptocurrencies API at:\n  </p>\n  <pre><span class=\"CodeEditor-promptString CodeEditor-selectable\">https://api.frontendexpert.io/api/fe/cryptocurrencies</span></pre>\n\n  <p>\n    This API expects GET requests with one query parameter, the <span>page</span>.\n    The page should be a number representing which page of data is being requested,\n    starting at page 0. The API returns a JSON formatted object with two\n    keys: <span>coins</span> and <span>hasNext</span>. The <span>hasNext</span>\n    value will always be <span>true</span> unless the page requested includes\n    the last cryptocurrency, in which case <span>hasNext</span> will be\n    <span>false</span>. The <span>coins</span> value will be an array of coin\n    objects, each with a <span>name</span>, <span>price</span> and\n    <span>marketCap</span>, all as strings.\n  </p>\n\n  <p>\n    For example, a call to\n    <span>https://api.frontendexpert.io/api/fe/cryptocurrencies?page=3</span>\n    would return page three of data, which might look like this:\n  </p>\n</div>\n<div class=\"code-wrapper prism\" style=\"margin-top: -15px\">\n  <pre class=\"line-numbers\"><code class=\"language-json\">{\n  \"hasNext\": true,\n  \"coins\": [\n    {\n      \"name\": \"Monero\",\n      \"price\": \"$148.45\",\n      \"marketCap\": \"$2,690,082,919\"\n    },\n    ...\n  ]\n}</code></pre>\n</div>\n\n<div class=\"html\">\n<p>\n  Your component should return a table, with a caption of \"Crypto Prices\" and\n  three columns with headings of \"Coin\", \"Price\", and \"Market Cap\". Every coin\n  from the most recent call to the API should be given a row in the table.\n  For example, the table might initially look like this:\n</p>\n<pre>\n+-----------+------------+------------------+\n|   Coin    |   Price    |   Market Cap     |\n|-----------+------------+------------------|\n|  Bitcoin  | $29,970.48 | $571,108,740,782 |\n|  Ethereum | $2,064.89  | $249,824,561,307 |\n|  ...      | ...        | ...              |\n+-----------+------------+------------------+\n</pre>\n\n<p>\n  Below the table should be two buttons with the text of <span>Back</span> and\n  <span>Next</span>. The back button should return to the previous page, and the\n  next button should move to the next page. The back button should be disabled\n  on the first page, and the next button should be disabled on the last page.\n</p>\n\n<p>\n  Your component has already been rendered to the DOM inside of a\n  <span>#root</span> div directly in the body with the CSS imported.\n</p>\n</div>",
        "promptCode": {
            "css": "body {\n  background-color: lightgrey;\n}\n\ntable {\n  margin: auto;\n  border-collapse: collapse;\n  width: 100%;\n  table-layout: fixed;\n}\n\nth, td {\n  padding: 4px 8px;\n  border: 1px solid black;\n  background-color: white;\n}\n\nth[scope=\"row\"] {\n  text-align: left;\n}\n\ntd {\n  text-align: right;\n}\n\ncaption {\n  font-weight: bold;\n  font-size: 1.5em;\n  margin-bottom: 8px;\n}\n\nbutton, input[type=\"button\"] {\n  cursor: pointer;\n  padding: 12px;\n  font-size: 16px;\n  border-radius: 8px;\n  background-color: #02203c;\n  color: white;\n  transition: 0.5s;\n  margin-top: 10px;\n  position: absolute;\n}\n\nbutton:first-of-type, input[type=\"button\"]:first-of-type {\n  left: 16px;\n}\n\nbutton:last-of-type, input[type=\"button\"]:last-of-type {\n  right: 16px;\n}\n\nbutton:disabled, input[type=\"button\"]:disabled {\n  background-color: grey;\n}"
        },
        "reactConfig": {
            "componentName": "CryptoPrices"
        },
        "solutions": {
            "jsx": [
                "// Copyright \u00a9 2023 AlgoExpert LLC. All rights reserved.\n\nimport React, {useState, useEffect} from 'react';\n\nconst CRYPTO_PRICES_API_BASE_URL = 'https://api.frontendexpert.io/api/fe/cryptocurrencies';\n\nexport default function CryptoPrices() {\n  const [coins, setCoins] = useState([]);\n  const [page, setPage] = useState(0);\n  const [hasNext, setHasNext] = useState(true);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const url = new URL(CRYPTO_PRICES_API_BASE_URL);\n      url.searchParams.set('page', page);\n      const response = await fetch(url);\n      const {coins, hasNext} = await response.json();\n      setCoins(coins);\n      setHasNext(hasNext);\n    };\n\n    fetchData();\n  }, [page]);\n\n  return (\n    <>\n      <table>\n        <caption>Crypto Prices</caption>\n        <thead>\n          <tr>\n            <th scope=\"col\">Coin</th>\n            <th scope=\"col\">Price</th>\n            <th scope=\"col\">Market Cap</th>\n          </tr>\n        </thead>\n        <tbody>\n          {coins.map(coin => (\n            <tr key={coin.name}>\n              <th scope=\"row\">{coin.name}</th>\n              <td>{coin.price}</td>\n              <td>{coin.marketCap}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n\n      <button disabled={page <= 0} onClick={() => setPage(page - 1)}>\n        Back\n      </button>\n\n      <button disabled={!hasNext} onClick={() => setPage(page + 1)}>\n        Next\n      </button>\n    </>\n  );\n}"
            ]
        },
        "startingCode": {
            "jsx": "import React from 'react';\n\nconst CRYPTO_PRICES_API_BASE_URL =\n  'https://api.frontendexpert.io/api/fe/cryptocurrencies';\n  \nexport default function CryptoPrices() {\n  // Write your code here.\n\n  return (\n    <>\n      {/* Write your code here. */}\n    </>\n  );\n}"
        },
        "submissionStatistics": {
            "correctCount": 1165,
            "failureCount": 540
        },
        "testHarness": {
            "sandboxCode": "// This file is initialized with a few test cases.\n// Feel free to add, edit, or remove test cases in\n// this file as you see fit!\n\n/* ---------------------------------- *\n * ----- BROWSER TESTING SET-UP ----- *\n * ---------------------------------- */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport CryptoPrices from './program';\nimport {act} from 'react-dom/test-utils';\nconst {JSDOM} = require('jsdom');\nconst {getCryptocurrencies} = require('./data/api');\nconst chai = require('chai');\nconst {expect} = chai;\n\nlet rootContainer;\nlet table;\nlet caption;\nlet rows;\nlet buttons;\n\nconst resetDom = async () => {\n  const dom = new JSDOM({\n    url: 'http://localhost:3000',\n    resources: 'usable',\n    pretendToBeVisual: true,\n  });\n\n  global.document = dom.window.document;\n  global.window = dom.window;\n\n  for (const [key, value] of Object.entries(React)) {\n    global[key] = value;\n  }\n\n  const convertStringToUrlObj = url => {\n    const [base, params] = url.split('?');\n    const paramPairs = params?.split('&');\n    const urlObj = new URL(base);\n    paramPairs?.forEach(paramStr => {\n      const [key, value] = paramStr.split('=');\n      urlObj.searchParams.set(key, value);\n    });\n    return urlObj;\n  };\n\n  global.fetch = url => {\n    const urlObj = typeof url === 'object' ? url : convertStringToUrlObj(url);\n    if (\n      urlObj.origin + urlObj.pathname ===\n      'https://api.frontendexpert.io/api/fe/cryptocurrencies'\n    ) {\n      const result = getCryptocurrencies(urlObj.searchParams.get('page') ?? 0);\n      const response = {\n        status: 200,\n        ok: true,\n        statusText: 'OK',\n        type: 'cors',\n        url: urlObj.toString(),\n        redirected: false,\n        json: async () => result,\n        text: async () => JSON.stringify(result),\n      };\n      return Promise.resolve(response);\n    }\n\n    const response = {\n      status: 404,\n      ok: false,\n      statusText: 'Not Found',\n      type: 'cors',\n      url: urlObj.toString(),\n      redirected: false,\n    };\n    return Promise.resolve(response);\n  };\n\n  rootContainer = document.createElement('div');\n  rootContainer.id = 'root';\n  document.body.appendChild(rootContainer);\n\n  act(() => {\n    ReactDOM.render(<CryptoPrices />, rootContainer);\n  });\n\n  await waitForRender();\n\n  table = document.querySelector('table');\n  caption = document.querySelector('caption');\n  rows = document.querySelectorAll('tr');\n  buttons = document.querySelectorAll('button, input[type=\"button\"]');\n};\n\nfunction waitForRender() {\n  return new Promise(function (resolve) {\n    setImmediate(resolve);\n  });\n}\n\n/* ---------------------------------- *\n * ----- BROWSER TESTING SET-UP ----- *\n * ---------------------------------- */\n\ndescribe('Crypto Prices', () => {\n  beforeEach(async () => {\n    await resetDom();\n  });\n\n  afterEach(() => {\n    ReactDOM.unmountComponentAtNode(rootContainer);\n    rootContainer.remove();\n    rootContainer = null;\n  });\n\n  describe('caption', () => {\n    it('has correct text', () => {\n      expect(caption.textContent.trim()).to.equal('Crypto Prices');\n    });\n  });\n\n  describe('column headings', () => {\n    it('have correct text', () => {\n      const expectedHeadings = ['Coin', 'Price', 'Market Cap'];\n\n      Array.from(rows[0].children).forEach((child, i) => {\n        expect(child.textContent.trim()).to.equal(expectedHeadings[i]);\n      });\n    });\n  });\n\n  describe('body', () => {\n    it('has correct initial text', () => {\n      const expectedBody = [\n        ['Bitcoin', '$29,970.48', '$571,108,740,782'],\n        ['Ethereum', '$2,064.89', '$249,824,561,307'],\n        ['Tether', '$0.9986', '$78,663,362,207'],\n      ];\n\n      const actualBody = Array.from(rows)\n        .slice(1, 4)\n        .map(row => {\n          return Array.from(row.children).map(cell => {\n            return cell.textContent.trim();\n          });\n        });\n\n      expect(actualBody).to.deep.equal(expectedBody);\n    });\n  });\n\n  describe('buttons', () => {\n    it('have correct text', () => {\n      const [back, next] = buttons;\n      expect(back.nodeName === 'BUTTON' ? back.textContent : back.value).to.equal('Back');\n      expect(next.nodeName === 'BUTTON' ? next.textContent : next.value).to.equal('Next');\n    });\n  });\n});\n",
            "unitTests": "/* ---------------------------------- *\n * ----- BROWSER TESTING SET-UP ----- *\n * ---------------------------------- */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport CryptoPrices from './program';\nimport {act} from 'react-dom/test-utils';\nconst {JSDOM} = require('jsdom');\nconst {getCryptocurrencies} = require('./data/api');\nconst chai = require('chai');\nconst {expect} = chai;\n\nlet rootContainer;\nlet table;\nlet caption;\nlet rows;\nlet buttons;\n\nconst resetDom = async () => {\n  const dom = new JSDOM({\n    url: 'http://localhost:3000',\n    resources: 'usable',\n    pretendToBeVisual: true,\n  });\n\n  global.document = dom.window.document;\n  global.window = dom.window;\n\n  for (const [key, value] of Object.entries(React)) {\n    global[key] = value;\n  }\n\n  const convertStringToUrlObj = url => {\n    const [base, params] = url.split('?');\n    const paramPairs = params?.split('&');\n    const urlObj = new URL(base);\n    paramPairs?.forEach(paramStr => {\n      const [key, value] = paramStr.split('=');\n      urlObj.searchParams.set(key, value);\n    });\n    return urlObj;\n  };\n\n  global.fetch = url => {\n    const urlObj = typeof url === 'object' ? url : convertStringToUrlObj(url);\n    if (\n      urlObj.origin + urlObj.pathname ===\n      'https://api.frontendexpert.io/api/fe/cryptocurrencies'\n    ) {\n      const result = getCryptocurrencies(urlObj.searchParams.get('page') ?? 0);\n      const response = {\n        status: 200,\n        ok: true,\n        statusText: 'OK',\n        type: 'cors',\n        url: urlObj.toString(),\n        redirected: false,\n        json: async () => result,\n        text: async () => JSON.stringify(result),\n      };\n      return Promise.resolve(response);\n    }\n\n    const response = {\n      status: 404,\n      ok: false,\n      statusText: 'Not Found',\n      type: 'cors',\n      url: urlObj.toString(),\n      redirected: false,\n    };\n    return Promise.resolve(response);\n  };\n\n  rootContainer = document.createElement('div');\n  rootContainer.id = 'root';\n  document.body.appendChild(rootContainer);\n\n  act(() => {\n    ReactDOM.render(<CryptoPrices />, rootContainer);\n  });\n\n  await waitForRender();\n\n  table = document.querySelector('table');\n  caption = document.querySelector('caption');\n  rows = document.querySelectorAll('tr');\n  buttons = document.querySelectorAll('button, input[type=\"button\"]');\n};\n\nfunction waitForRender() {\n  return new Promise(function (resolve) {\n    setImmediate(resolve);\n  });\n}\n\n/* ---------------------------------- *\n * ----- BROWSER TESTING SET-UP ----- *\n * ---------------------------------- */\n\ndescribe('Crypto Prices', () => {\n  beforeEach(async () => {\n    await resetDom();\n  });\n\n  afterEach(() => {\n    ReactDOM.unmountComponentAtNode(rootContainer);\n    rootContainer.remove();\n    rootContainer = null;\n  });\n\n  describe('caption', () => {\n    it('has correct text', () => {\n      expect(caption.textContent.trim()).to.equal('Crypto Prices');\n    });\n\n    it('has correct parent', () => {\n      expect(caption.parentNode).to.equal(table);\n    });\n  });\n\n  describe('column headings', () => {\n    it('have correct text', () => {\n      const expectedHeadings = ['Coin', 'Price', 'Market Cap'];\n\n      Array.from(rows[0].children).forEach((child, i) => {\n        expect(child.textContent.trim()).to.equal(expectedHeadings[i]);\n      });\n    });\n\n    it('have correct tags', () => {\n      Array.from(rows[0].children).forEach((child, i) => {\n        expect(child.tagName).to.equal('TH');\n      });\n    });\n  });\n\n  describe('body', () => {\n    it('has correct initial text', () => {\n      const expectedBody = [\n        ['Bitcoin', '$29,970.48', '$571,108,740,782'],\n        ['Ethereum', '$2,064.89', '$249,824,561,307'],\n        ['Tether', '$0.9986', '$78,663,362,207'],\n      ];\n\n      const actualBody = Array.from(rows)\n        .slice(1, 4)\n        .map(row => {\n          return Array.from(row.children).map(cell => {\n            return cell.textContent.trim();\n          });\n        });\n\n      expect(actualBody).to.deep.equal(expectedBody);\n    });\n\n    it('correctly uses th and td tags for cells', () => {\n      const expectedRowTagOrder = ['TH', 'TD', 'TD'];\n\n      Array.from(rows)\n        .slice(1, 4)\n        .forEach(row => {\n          const actualRowTagOrder = Array.from(row.children).map(cell => {\n            return cell.tagName;\n          });\n          expect(actualRowTagOrder).to.deep.equal(expectedRowTagOrder);\n        });\n    });\n  });\n\n  describe('buttons', () => {\n    it('have correct text', () => {\n      const [back, next] = buttons;\n      expect(back.nodeName === 'BUTTON' ? back.textContent : back.value).to.equal('Back');\n      expect(next.nodeName === 'BUTTON' ? next.textContent : next.value).to.equal('Next');\n    });\n\n    it('are correctly initially enabled and disabled', () => {\n      const [back, next] = buttons;\n      expect(back.disabled).to.be.true;\n      expect(next.disabled).to.be.false;\n    });\n\n    it('clicking next loads the next page', async () => {\n      const [_back, next] = buttons;\n      act(() => next.click());\n      await waitForRender();\n      const expectedBody = [\n        ['USD Coin', '$1.00', '$50,503,234,574'],\n        ['BNB', '$295.25', '$48,341,424,542'],\n        ['XRP', '$0.4248', '$20,529,830,618'],\n      ];\n\n      rows = document.querySelectorAll('tr');\n      const actualBody = Array.from(rows)\n        .slice(1, 4)\n        .map(row => {\n          return Array.from(row.children).map(cell => {\n            return cell.textContent.trim();\n          });\n        });\n\n      expect(actualBody).to.deep.equal(expectedBody);\n    });\n\n    it('clicking next enables back button', async () => {\n      const [back, next] = buttons;\n      act(() => next.click());\n      await waitForRender();\n      expect(back.disabled).to.be.false;\n      expect(next.disabled).to.be.false;\n    });\n\n    it('clicking back returns to previous page', async () => {\n      const [back, next] = buttons;\n      act(() => next.click());\n      await waitForRender();\n      act(() => back.click());\n      await waitForRender();\n\n      let expectedBody = [\n        ['Bitcoin', '$29,970.48', '$571,108,740,782'],\n        ['Ethereum', '$2,064.89', '$249,824,561,307'],\n        ['Tether', '$0.9986', '$78,663,362,207'],\n      ];\n\n      let actualBody = Array.from(rows)\n        .slice(1, 4)\n        .map(row => {\n          return Array.from(row.children).map(cell => {\n            return cell.textContent.trim();\n          });\n        });\n\n      expect(actualBody).to.deep.equal(expectedBody);\n      act(() => next.click());\n      await waitForRender();\n      act(() => next.click());\n      await waitForRender();\n      act(() => back.click());\n      await waitForRender();\n\n      expectedBody = [\n        ['USD Coin', '$1.00', '$50,503,234,574'],\n        ['BNB', '$295.25', '$48,341,424,542'],\n        ['XRP', '$0.4248', '$20,529,830,618'],\n      ];\n\n      rows = document.querySelectorAll('tr');\n      actualBody = Array.from(rows)\n        .slice(1, 4)\n        .map(row => {\n          return Array.from(row.children).map(cell => {\n            return cell.textContent.trim();\n          });\n        });\n\n      expect(actualBody).to.deep.equal(expectedBody);\n    });\n\n    it('next button is disabled on the last page', async () => {\n      const [back, next] = buttons;\n      act(() => next.click());\n      await waitForRender();\n      act(() => next.click());\n      await waitForRender();\n      expect(back.disabled).to.be.false;\n      expect(next.disabled).to.be.true;\n    });\n  });\n});\n"
        },
        "testStrategy": "REACT_MOCHA",
        "uid": "crypto-prices",
        "video": {
            "annotations": [],
            "codeWalkthroughTime": null,
            "duration": 0,
            "instructor": "Conner Ardman",
            "overviewTime": null,
            "vimeoId": "711844767"
        }
    },
    "difficulty": null,
    "instructor": "Conner Ardman",
    "name": "Crypto Prices",
    "releaseDate": "2022-05-24T00:00:00Z",
    "type": "CODING_FRONTEND",
    "uid": "crypto-prices"
}