{
    "acl": {
        "isAvailable": true,
        "isFree": false,
        "isFreeForStudents": false,
        "productRequired": [
            "frontendexpert"
        ]
    },
    "category": "DOM Manipulation",
    "contents": {
        "acl": {
            "isAvailable": true,
            "isFree": false,
            "isFreeForStudents": false,
            "productRequired": [
                "frontendexpert"
            ]
        },
        "category": "DOM Manipulation",
        "hints": [
            "<p>\n  While most inputs use the <span>value</span> property to check the current\n  value, checkboxes use the <span>checked</span> property.\n</p>",
            "<p>\n  The easiest way to find the selected radio button is by doing a query selector\n  with the attribute selector and the <span>:checked</span> pseudo-class such as\n  <span>document.querySelector('input[name=\"type\"]:checked')</span>.\n</p>",
            "<p>\n  There are a variety of ways to clear the children of a container, but the\n  simplest is to set the <span>innerHTML</span> property to an empty string.\n</p>"
        ],
        "languageToWrite": "javascript",
        "name": "Toasts",
        "notes": "",
        "prompt": "<div class=\"html\">\n  <p>\n    You're given HTML and CSS files for a simple toast system, and you need to\n    make the toast system functional using JavaScript.\n  </p>\n  <p>\n    A toast is a simple pop-up that appears on a page, usually to communicate\n    status information to a user. The toast system that you have to build is\n    meant to let you create toasts of different genres.\n  </p>\n  <p>\n    First of all, clicking the provided <span>#add-button</span> button should\n    create a toast by prepending the appropriate HTML to the provided\n    <span>#toasts</span> div, and toasts should generally follow this HTML\n    format:\n  </p>\n</div>\n<div class=\"code-wrapper prism\" style=\"margin-top: -15px\">\n  <pre\n    class=\"line-numbers\"\n  ><code class=\"language-markup\">&lt;div class=\"toast success-toast\"&gt;\n  &lt;p class=\"message\"&gt;Message content&lt;/p&gt;\n  &lt;button class=\"cancel-button\"&gt;X&lt;/button&gt;\n&lt;/div&gt;</code></pre>\n</div>\n<div class=\"html\">\n  <p>\n    There shouldn't be a limit to how many toasts can be created at the same\n    time, but each toast should disappear after some period of time, specified\n    by one of the provided inputs on the page (see the bullet points below).\n    Also, clicking the <span>#clear-button</span> button should immediately\n    remove all toasts from the page.\n  </p>\n  <p>\n    The toasts should be customizable with the various provided inputs, as\n    follows:\n  </p>\n  <ul>\n    <li>\n      The <span>#success</span> and <span>#error</span> radio buttons should\n      control if the next toast is a success toast or an error toast. Success\n      toasts should have the <span>success-toast</span> class, while error\n      toasts should have the <span>error-toast</span> class.\n    </li>\n    <li>\n      The <span>#message-content</span> textarea should control the contents of\n      the next toast. If no message is present in the textarea, the toast\n      message should default to either \"Success!\" or \"Error.\", depending on if\n      the toast is a success toast or an error toast. The toast message should\n      always be a paragraph with the class <span>message</span>.\n    </li>\n    <li>\n      The <span>#duration</span> input should control how long the next toast is\n      visible in milliseconds. If the duration value is less than 500, an empty\n      string, or otherwise not a number, a default value of 500 milliseconds\n      should be used.\n    </li>\n    <li>\n      The <span>#cancelable</span> checkbox should control whether the next\n      toast has a cancel button:\n      <ul style=\"margin-top: 10px\">\n        <li>\n          If the checkbox isn't checked, the toast shouldn't have a cancel\n          button in its HTML.\n        </li>\n        <li>\n          A cancel button should always have the\n          <span>cancel-button</span> class and <span>X</span> as its text\n          content.\n        </li>\n        <li>\n          Clicking the cancel button should immediately remove the relevant\n          toast from the page.\n        </li>\n      </ul>\n    </li>\n  </ul>\n  <p>\n    Your JavaScript code has already been linked to the pre-written HTML code\n    via a deferred script tag.\n  </p>\n</div>",
        "promptCode": {
            "css": "body {\n  display: flex;\n  justify-content: space-between;\n}\n\nbutton, textarea, input {\n  font-size: 16px;\n}\n\ntextarea {\n  font-size: 16px;\n}\n\ninput {\n  font-size: 16px;\n}\n\n#inputs {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  flex-basis: 60%;\n  align-self: flex-start;\n  background-color: lightgrey;\n  border: 2px solid black;\n  padding: 12px;\n  gap: 8px;\n  font-size: 18px;\n}\n\n#message-content {\n  grid-row: span 5;\n  min-width: 10ch;\n}\n\n#toasts {\n  flex-basis: 25%;\n}\n\nlabel {\n  margin-right: 4px;\n}\n\ninput[type=\"radio\"] {\n  margin-left: 0;\n  margin-right: 12px;\n}\n\n.input {\n  display: flex;\n  align-items: center;\n}\n\n.toast {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin: 12px;\n  border: 1px solid black;\n  padding: 12px;\n  border-radius: 8px;\n  animation: fade-in 0.5s linear;\n  font-size: 18px;\n}\n\n.message {\n  flex-grow: 1;\n  color: white;\n  margin: 0;\n  overflow-wrap: break-word;\n}\n\n.cancel-button {\n  flex-shrink: 0;\n  background: none;\n  color: white;\n  border: 1px solid transparent;\n  border-radius: 100%;\n  height: 18px;\n  width: 18px;\n  font-size: 14px;\n  font-weight: bold;\n  padding: 0;\n  margin-left: 4px;\n  transition: 0.5s;\n  cursor: pointer;\n}\n\n.cancel-button:hover {\n  border-color: white;\n  transform: scale(1.2);\n}\n\n.error-toast {\n  background-color: red;\n}\n\n.success-toast {\n  background-color: green;\n}\n\n@keyframes fade-in {\n  from {\n    opacity: 0;\n  }\n\n  to {\n    opacity: 1;\n  }\n}\n",
            "html": "<div id=\"inputs\">\n  <textarea id=\"message-content\" placeholder=\"Message content...\"></textarea>\n\n  <div class=\"input\">\n    <label for=\"duration\">Duration</label>\n    <input id=\"duration\" type=\"number\" min=\"500\" value=\"3000\" />\n  </div>\n\n  <div class=\"input\">\n    <label for=\"cancelable\">Is Cancelable</label>\n    <input id=\"cancelable\" type=\"checkbox\" />\n  </div>\n\n  <div class=\"input\">\n    <label for=\"success\">Success</label>\n    <input id=\"success\" type=\"radio\" name=\"type\" value=\"success\" checked />\n\n    <label for=\"error\">Error</label>\n    <input id=\"error\" type=\"radio\" name=\"type\" value=\"error\" />\n  </div>\n\n  <button id=\"add-button\">Add Toast</button>\n  <button id=\"clear-button\">Clear Toasts</button>\n</div>\n\n<div id=\"toasts\"></div>"
        },
        "reactConfig": null,
        "solutions": {
            "javascript": [
                "// Copyright \u00a9 2023 AlgoExpert LLC. All rights reserved.\n\nconst MIN_DURATION = 500;\n\ndocument.getElementById('add-button').addEventListener('click', addToast);\ndocument.getElementById('clear-button').addEventListener('click', clearToasts);\n\nfunction addToast() {\n  const message = document.getElementById('message-content').value;\n  const isCancelable = document.getElementById('cancelable').checked;\n  const type = document.querySelector('input[name=\"type\"]:checked').value;\n\n  const toast = createToast(message, isCancelable, type);\n  document.getElementById('toasts').prepend(toast);\n\n  setTimeout(() => toast.remove(), getDuration());\n}\n\nfunction createToast(message, isCancelable, type) {\n  const toast = document.createElement('div');\n  toast.classList.add('toast');\n  toast.classList.add(`${type}-toast`);\n\n  const paragraph = document.createElement('p');\n  paragraph.classList.add('message');\n  paragraph.textContent = message.length > 0 ? message : getDefaultToastMessage(type);\n  toast.appendChild(paragraph);\n\n  if (isCancelable) {\n    const cancelButton = document.createElement('button');\n    cancelButton.classList.add('cancel-button');\n    cancelButton.textContent = 'X';\n    cancelButton.addEventListener('click', () => toast.remove());\n    toast.appendChild(cancelButton);\n  }\n\n  return toast;\n}\n\nfunction getDefaultToastMessage(type) {\n  return type === 'error' ? 'Error.' : 'Success!';\n}\n\nfunction getDuration() {\n  const duration = parseInt(document.getElementById('duration').value);\n  if (isNaN(duration) || duration < MIN_DURATION) {\n    return MIN_DURATION;\n  }\n  return duration;\n}\n\nfunction clearToasts() {\n  document.getElementById('toasts').innerHTML = '';\n}"
            ]
        },
        "startingCode": {
            "javascript": "// Write your code here.\n"
        },
        "submissionStatistics": {
            "correctCount": 903,
            "failureCount": 406
        },
        "testHarness": {
            "sandboxCode": "// This file is initialized with a few test cases.\n// Feel free to add, edit, or remove test cases in\n// this file as you see fit!\n\n/* ---------------------------------- *\n * ----- BROWSER TESTING SET-UP ----- *\n * ---------------------------------- */\nconst {JSDOM} = require('jsdom');\nconst {readFileSync} = require('fs');\nconst {expect} = require('chai');\nconst FakeTimers = require('@sinonjs/fake-timers');\n\nconst html = readFileSync('data/index.html');\nconst clock = FakeTimers.install();\n\nlet addButton;\nlet toasts;\n\nconst resetDom = () => {\n  const dom = new JSDOM(html, {\n    resources: 'usable',\n    pretendToBeVisual: true,\n  });\n\n  global.document = dom.window.document;\n  global.window = dom.window;\n\n  Object.defineProperty(window.HTMLElement.prototype, 'innerText', {\n    configurable: true,\n    get() {\n      return this.textContent;\n    },\n    set(val) {\n      this.textContent = val;\n    },\n  });\n\n  delete require.cache[require.resolve('./program.js')];\n  require('./program.js');\n\n  addButton = document.getElementById('add-button');\n  toasts = document.getElementById('toasts');\n};\n\n/* ---------------------------------- *\n * ----- BROWSER TESTING SET-UP ----- *\n * ---------------------------------- */\n\ndescribe('toasts', () => {\n  beforeEach(() => {\n    resetDom();\n    clock.reset();\n  });\n\n  it('toasts added after clicking add button', () => {\n    expect(toasts.children.length).to.equal(0);\n    addButton.click();\n    expect(toasts.children.length).to.equal(1);\n  });\n\n  it('toasts have correct default HTML markup', () => {\n    addButton.click();\n    const toast = toasts.children[0];\n    expect(toast.tagName).to.equal('DIV');\n    expect(toast.classList.contains('toast')).to.be.true;\n    expect(toast.classList.contains('success-toast')).to.be.true;\n    expect(toast.classList.contains('error-toast')).to.be.false;\n    expect(toast.children.length).to.equal(1);\n    const p = toast.children[0];\n    expect(p.textContent).to.equal('Success!');\n    expect(p.className).to.equal('message');\n  });\n\n  it('toasts are removed after duration', () => {\n    addButton.click();\n    expect(toasts.children.length).to.equal(1);\n    clock.tick(2999);\n    expect(toasts.children.length).to.equal(1);\n    clock.tick(1);\n    expect(toasts.children.length).to.equal(0);\n  });\n});\n",
            "unitTests": "/* ---------------------------------- *\n * ----- BROWSER TESTING SET-UP ----- *\n * ---------------------------------- */\nconst {JSDOM} = require('jsdom');\nconst {readFileSync} = require('fs');\nconst {expect} = require('chai');\nconst FakeTimers = require('@sinonjs/fake-timers');\n\nconst html = readFileSync('data/index.html');\nconst clock = FakeTimers.install();\n\nlet messageContent;\nlet durationInput;\nlet cancelableCheckbox;\nlet addButton;\nlet successButton;\nlet errorButton;\nlet clearButton;\nlet toasts;\n\nconst resetDom = () => {\n  const dom = new JSDOM(html, {\n    resources: 'usable',\n    pretendToBeVisual: true,\n  });\n\n  global.document = dom.window.document;\n  global.window = dom.window;\n\n  Object.defineProperty(window.HTMLElement.prototype, 'innerText', {\n    configurable: true,\n    get() {\n      return this.textContent;\n    },\n    set(val) {\n      this.textContent = val;\n    },\n  });\n\n  delete require.cache[require.resolve('./program.js')];\n  require('./program.js');\n\n  messageContent = document.getElementById('message-content');\n  durationInput = document.getElementById('duration');\n  cancelableCheckbox = document.getElementById('cancelable');\n  addButton = document.getElementById('add-button');\n  successButton = document.getElementById('success');\n  errorButton = document.getElementById('error');\n  clearButton = document.getElementById('clear-button');\n  toasts = document.getElementById('toasts');\n};\n\n/* ---------------------------------- *\n * ----- BROWSER TESTING SET-UP ----- *\n * ---------------------------------- */\n\ndescribe('toasts', () => {\n  beforeEach(() => {\n    resetDom();\n    clock.reset();\n  });\n\n  it('toasts added after clicking add button', () => {\n    expect(toasts.children.length).to.equal(0);\n    addButton.click();\n    expect(toasts.children.length).to.equal(1);\n  });\n\n  it('multiple toasts can be added', () => {\n    expect(toasts.children.length).to.equal(0);\n    addButton.click();\n    expect(toasts.children.length).to.equal(1);\n    addButton.click();\n    addButton.click();\n    expect(toasts.children.length).to.equal(3);\n  });\n\n  it('toasts have correct default HTML markup', () => {\n    addButton.click();\n    const toast = toasts.children[0];\n    expect(toast.tagName).to.equal('DIV');\n    expect(toast.classList.contains('toast')).to.be.true;\n    expect(toast.classList.contains('success-toast')).to.be.true;\n    expect(toast.classList.contains('error-toast')).to.be.false;\n    expect(toast.children.length).to.equal(1);\n    const p = toast.children[0];\n    expect(p.textContent).to.equal('Success!');\n    expect(p.className).to.equal('message');\n  });\n\n  it('cancelable toasts have correct HTML markup', () => {\n    cancelableCheckbox.click();\n    addButton.click();\n    const toast = toasts.children[0];\n    expect(toast.tagName).to.equal('DIV');\n    expect(toast.classList.contains('toast')).to.be.true;\n    expect(toast.classList.contains('success-toast')).to.be.true;\n    expect(toast.classList.contains('error-toast')).to.be.false;\n    expect(toast.children.length).to.equal(2);\n    const p = toast.children[0];\n    expect(p.textContent).to.equal('Success!');\n    expect(p.className).to.equal('message');\n    const button = toast.children[1];\n    expect(button.textContent).to.equal('X');\n    expect(button.className).to.equal('cancel-button');\n  });\n\n  it('success toasts have correct class', () => {\n    errorButton.click();\n    successButton.click();\n    addButton.click();\n    const toast = toasts.children[0];\n    expect(toast.classList.contains('success-toast')).to.be.true;\n    expect(toast.classList.contains('error-toast')).to.be.false;\n  });\n\n  it('error toasts have correct class', () => {\n    errorButton.click();\n    addButton.click();\n    const toast = toasts.children[0];\n    expect(toast.classList.contains('success-toast')).to.be.false;\n    expect(toast.classList.contains('error-toast')).to.be.true;\n  });\n\n  it('error toasts have correct default message', () => {\n    errorButton.click();\n    addButton.click();\n    const toast = toasts.children[0];\n    expect(toast.textContent).to.equal('Error.');\n  });\n\n  it('success toasts use message content correctly', () => {\n    messageContent.value = 'hello world';\n    addButton.click();\n    const toast = toasts.children[0];\n    expect(toast.textContent).to.equal('hello world');\n  });\n\n  it('error toasts use message content correctly', () => {\n    messageContent.value = 'hello world';\n    errorButton.click();\n    addButton.click();\n    const toast = toasts.children[0];\n    expect(toast.textContent).to.equal('hello world');\n  });\n\n  it('toasts are removed after duration', () => {\n    addButton.click();\n    expect(toasts.children.length).to.equal(1);\n    clock.tick(2999);\n    expect(toasts.children.length).to.equal(1);\n    clock.tick(1);\n    expect(toasts.children.length).to.equal(0);\n  });\n\n  it('toasts respect minimum duration', () => {\n    durationInput.value = '300';\n    addButton.click();\n    expect(toasts.children.length).to.equal(1);\n    clock.tick(499);\n    expect(toasts.children.length).to.equal(1);\n    clock.tick(1);\n    expect(toasts.children.length).to.equal(0);\n  });\n\n  it('handles empty durations', () => {\n    durationInput.value = '';\n    addButton.click();\n    expect(toasts.children.length).to.equal(1);\n    clock.tick(499);\n    expect(toasts.children.length).to.equal(1);\n    clock.tick(1);\n    expect(toasts.children.length).to.equal(0);\n  });\n\n  it('handles non-number durations', () => {\n    durationInput.value = 'e';\n    addButton.click();\n    expect(toasts.children.length).to.equal(1);\n    clock.tick(499);\n    expect(toasts.children.length).to.equal(1);\n    clock.tick(1);\n    expect(toasts.children.length).to.equal(0);\n  });\n\n  it('multiple toasts can have different durations', () => {\n    messageContent.value = 'first toast';\n    addButton.click();\n    durationInput.value = '1000';\n    messageContent.value = 'second toast';\n    addButton.click();\n    expect(toasts.children.length).to.equal(2);\n    clock.tick(999);\n    expect(toasts.children.length).to.equal(2);\n    clock.tick(1);\n    expect(toasts.children.length).to.equal(1);\n    expect(toasts.children[0].textContent).to.equal('first toast');\n    clock.tick(2000);\n    expect(toasts.children.length).to.equal(0);\n  });\n\n  it('toasts are in the correct order', () => {\n    messageContent.value = 'first toast';\n    addButton.click();\n    durationInput.value = '1000';\n    messageContent.value = 'second toast';\n    addButton.click();\n    durationInput.value = '5000';\n    messageContent.value = 'third toast';\n    addButton.click();\n    expect(toasts.children.length).to.equal(3);\n    expect(toasts.children[0].textContent).to.equal('third toast');\n    expect(toasts.children[1].textContent).to.equal('second toast');\n    expect(toasts.children[2].textContent).to.equal('first toast');\n    clock.tick(1000);\n    expect(toasts.children.length).to.equal(2);\n    expect(toasts.children[0].textContent).to.equal('third toast');\n    expect(toasts.children[1].textContent).to.equal('first toast');\n    clock.tick(2000);\n    expect(toasts.children.length).to.equal(1);\n    expect(toasts.children[0].textContent).to.equal('third toast');\n    clock.tick(2000);\n    expect(toasts.children.length).to.equal(0);\n  });\n\n  it('toasts can be cancelled', () => {\n    cancelableCheckbox.click();\n    addButton.click();\n    expect(toasts.children.length).to.equal(1);\n    toasts.children[0].children[1].click();\n    expect(toasts.children.length).to.equal(0);\n  });\n\n  it('Multiple toasts can be cancelled', () => {\n    cancelableCheckbox.click();\n    messageContent.value = 'first toast';\n    addButton.click();\n    durationInput.value = '1000';\n    messageContent.value = 'second toast';\n    addButton.click();\n    durationInput.value = '5000';\n    messageContent.value = 'third toast';\n    addButton.click();\n    expect(toasts.children.length).to.equal(3);\n    expect(toasts.children[0].children[0].textContent).to.equal('third toast');\n    expect(toasts.children[1].children[0].textContent).to.equal('second toast');\n    expect(toasts.children[2].children[0].textContent).to.equal('first toast');\n    toasts.children[1].children[1].click();\n    expect(toasts.children.length).to.equal(2);\n    expect(toasts.children[0].children[0].textContent).to.equal('third toast');\n    expect(toasts.children[1].children[0].textContent).to.equal('first toast');\n    toasts.children[1].children[1].click();\n    expect(toasts.children.length).to.equal(1);\n    expect(toasts.children[0].children[0].textContent).to.equal('third toast');\n    clock.tick(4999);\n    expect(toasts.children.length).to.equal(1);\n    clock.tick(1);\n    expect(toasts.children.length).to.equal(0);\n  });\n\n  it('clear toasts button clears all toasts', () => {\n    cancelableCheckbox.click();\n    messageContent.value = 'first toast';\n    addButton.click();\n    cancelableCheckbox.click();\n    durationInput.value = '1000';\n    messageContent.value = 'second toast';\n    addButton.click();\n    errorButton.click();\n    durationInput.value = '5000';\n    messageContent.value = 'third toast';\n    addButton.click();\n    expect(toasts.children.length).to.equal(3);\n    clearButton.click();\n    expect(toasts.children.length).to.equal(0);\n  });\n});\n"
        },
        "testStrategy": "MOCHA",
        "uid": "toasts",
        "video": {
            "annotations": [],
            "codeWalkthroughTime": null,
            "duration": 0,
            "instructor": "Conner Ardman",
            "overviewTime": null,
            "vimeoId": "664513264"
        }
    },
    "difficulty": null,
    "instructor": "Conner Ardman",
    "name": "Toasts",
    "releaseDate": "2022-01-10T00:00:00Z",
    "type": "CODING_FRONTEND",
    "uid": "toasts"
}