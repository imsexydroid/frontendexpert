{
    "acl": {
        "isAvailable": true,
        "isFree": false,
        "isFreeForStudents": false,
        "productRequired": [
            "frontendexpert"
        ]
    },
    "category": "DOM Manipulation",
    "contents": {
        "acl": {
            "isAvailable": true,
            "isFree": false,
            "isFreeForStudents": false,
            "productRequired": [
                "frontendexpert"
            ]
        },
        "category": "DOM Manipulation",
        "hints": [
            "<p>\n  The <span>checked</span> JavaScript property of inputs can be used to\n  determine if a checkbox is currently checked or not.\n</p>",
            "<p>\n  A string can be split into an array of characters using\n  <span>str.split('')</span>, and that array can be converted back into a string\n  using <span>arr.join('')</span>. This can be useful for preventing duplicate\n  candidate moves.\n</p>"
        ],
        "languageToWrite": "javascript",
        "name": "Sudoku",
        "notes": "",
        "prompt": "<div class=\"html\">\n  <p>\n    You're given HTML and CSS files for a Sudoku game based on\n    <a\n      class=\"Link Link--fe\"\n      href=\"https://www.nytimes.com/puzzles/sudoku\"\n      target=\"_blank\"\n      >The New York Times Number Puzzles</a\n    >, and you need to make the game functional using JavaScript.\n  </p>\n  <p>\n    Sudoku is a popular puzzle game, where the goal is to fill in every cell of\n    a 9x9 grid with the numbers one through nine such that no duplicates appear\n    in any row, column, or 3x3 subgrid.\n  </p>\n  <p>\n    The provided board contains two types of cells: given numbers and standard\n    cells:\n  </p>\n  <ul>\n    <li>\n      Given numbers have the <span>given-number</span> class, are grey with a\n      pre-filled number, and should have no functionality.\n    </li>\n    <li>\n      Standard cells have two child spans with classes of\n      <span>candidates</span> and <span>value</span>, respectively, and they're\n      white. When a standard cell is clicked on, it should become selected\n      (i.e., the cell should have the <span>selected</span> class). Only one\n      cell should be selectable at a time (i.e., selecting a cell should\n      unselect the previously selected cell).\n    </li>\n  </ul>\n  <p>\n    To the right of the Sudoku board is a provided set of controls. These\n    controls include buttons with the numbers one through nine as well as a\n    toggle button (which is an HTML checkbox input field). The controls should\n    have the following functionality:\n  </p>\n  <ul>\n    <li>\n      When the <span>#candidate-switch</span> checkbox is unchecked (i.e., set\n      to \"Normal Move\"), clicking on any of the number control buttons should\n      place that number in the <span>.value</span> span of the selected cell.\n    </li>\n    <li>\n      The <span>.candidates</span> spans of standard cells should act as lists\n      of candidate moves (potential moves) for each cell. When the\n      <span>#candidate-switch</span> checkbox is checked (i.e., set to\n      \"Candidate Move\"), clicking on any of the number control buttons should\n      toggle that number in the <span>.candidates</span> span of the selected\n      cell. In other words, if the <span>.candidates</span> span already\n      contained the number, it should be removed; otherwise it should be added.\n    </li>\n    <li>\n      The contents of the <span>.candidates</span> spans should always be sorted\n      in ascending order, and there shouldn't be duplicate numbers in an\n      individual candidates list. There should also be no spaces or other\n      delimiters between numbers in a candidates list.\n    </li>\n    <li>\n      If no cell is selected, clicking the number controls should have no\n      effect.\n    </li>\n  </ul>\n  <p>\n    Your JavaScript code has already been linked to the pre-written HTML code\n    via a deferred script tag.\n  </p>\n</div>",
        "promptCode": {
            "css": "#wrapper {\n  display: flex;\n  justify-content: center;\n  gap: 24px;\n}\n\ntable {\n  border-collapse: collapse;\n}\n\ncolgroup {\n  border: 3px solid black;\n}\n\ntr:nth-of-type(3n) {\n  border-bottom: 3px solid black;\n}\n\ntd {\n  position: relative;\n  border: 1px solid black;\n  padding: 0;\n  width: 2.5em;\n  height: 2.5em;\n  font-size: 18px;\n  text-align: center;\n  cursor: pointer;\n  background-color: white;\n  background-clip: padding-box; /* Ensure borders are shown in Firefox */\n}\n\n.selected {\n  background-color: #fcfa13;\n}\n\n.given-number {\n  cursor: default;\n  background-color: #cfcfcf;\n}\n\n.candidates {\n  position: absolute;\n  top: 0;\n  right: 0;\n  font-size: 10px;\n  color: #404040;\n}\n\n#controls {\n  height: fit-content;\n  padding: 12px;\n  border: 3px solid black;\n  background-color: white;\n}\n\n#number-controls {\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr;\n  align-content: center;\n  align-items: center;\n  grid-gap: 12px;\n}\n\n.number-control {\n  font-size: 24px;\n  height: 2em;\n  width: 2em;\n}\n\n#candidate-switch {\n  appearance: none;\n  width: 100%;\n  height: 36px;\n  position: relative;\n  border-radius: 24px;\n  margin-top: 12px;\n  overflow: hidden;\n  cursor: pointer;\n  background-color: #9f9f9f;\n  transition: 0.2s;\n  background-color: #3cde14;\n}\n\n#candidate-switch:before {\n  content: \"Candidate Move            Normal Move\";\n  display: flex;\n  align-items: center;\n  position: absolute;\n  width: 30px;\n  height: 30px;\n  top: calc(50% - 15px);\n  left: 4px;\n  border-radius: 50%;\n  font-weight: bold;\n  white-space: pre;\n  text-indent: -115px;\n  font-size: 14px;\n  background-color: white;\n  color: white;\n  transition: 0.2s;\n}\n\n#candidate-switch:checked {\n  background-color: #0eb9de;\n}\n\n#candidate-switch:checked:before {\n  left: calc(100% - 30px - 4px);\n}",
            "html": "<div id=\"wrapper\">\n  <table id=\"board\" role=\"grid\">\n    <colgroup span=\"3\"></colgroup>\n    <colgroup span=\"3\"></colgroup>\n    <colgroup span=\"3\"></colgroup>\n    <tbody>\n      <tr>\n        <td class=\"given-number\">5</td>\n        <td class=\"given-number\">7</td>\n        <td>\n          <span class=\"candidates\"></span>\n          <span class=\"value\"></span>\n        </td>\n        <td class=\"given-number\">1</td>\n        <td class=\"given-number\">8</td>\n        <td>\n          <span class=\"candidates\"></span>\n          <span class=\"value\"></span>\n        </td>\n        <td>\n          <span class=\"candidates\"></span>\n          <span class=\"value\"></span>\n        </td>\n        <td>\n          <span class=\"candidates\"></span>\n          <span class=\"value\"></span>\n        </td>\n        <td class=\"given-number\">3</td>\n      </tr>\n      <tr>\n        <td>\n          <span class=\"candidates\"></span>\n          <span class=\"value\"></span>\n        </td>\n        <td class=\"given-number\">8</td>\n        <td class=\"given-number\">6</td>\n        <td>\n          <span class=\"candidates\"></span>\n          <span class=\"value\"></span>\n        </td>\n        <td>\n          <span class=\"candidates\"></span>\n          <span class=\"value\"></span>\n        </td>\n        <td>\n          <span class=\"candidates\"></span>\n          <span class=\"value\"></span>\n        </td>\n        <td class=\"given-number\">4</td>\n        <td>\n          <span class=\"candidates\"></span>\n          <span class=\"value\"></span>\n        </td>\n        <td class=\"given-number\">2</td>\n      </tr>\n      <tr>\n        <td>\n          <span class=\"candidates\"></span>\n          <span class=\"value\"></span>\n        </td>\n        <td class=\"given-number\">9</td>\n        <td class=\"given-number\">2</td>\n        <td class=\"given-number\">6</td>\n        <td class=\"given-number\">7</td>\n        <td>\n          <span class=\"candidates\"></span>\n          <span class=\"value\"></span>\n        </td>\n        <td class=\"given-number\">8</td>\n        <td>\n          <span class=\"candidates\"></span>\n          <span class=\"value\"></span>\n        </td>\n        <td>\n          <span class=\"candidates\"></span>\n          <span class=\"value\"></span>\n        </td>\n      </tr>\n      <tr>\n        <td>\n          <span class=\"candidates\"></span>\n          <span class=\"value\"></span>\n        </td>\n        <td class=\"given-number\">1</td>\n        <td>\n          <span class=\"candidates\"></span>\n          <span class=\"value\"></span>\n        </td>\n        <td class=\"given-number\">8</td>\n        <td class=\"given-number\">6</td>\n        <td class=\"given-number\">3</td>\n        <td>\n          <span class=\"candidates\"></span>\n          <span class=\"value\"></span>\n        </td>\n        <td class=\"given-number\">4</td>\n        <td class=\"given-number\">7</td>\n      </tr>\n      <tr>\n        <td class=\"given-number\">4</td>\n        <td class=\"given-number\">2</td>\n        <td>\n          <span class=\"candidates\"></span>\n          <span class=\"value\"></span>\n        </td>\n        <td>\n          <span class=\"candidates\"></span>\n          <span class=\"value\"></span>\n        </td>\n        <td class=\"given-number\">1</td>\n        <td>\n          <span class=\"candidates\"></span>\n          <span class=\"value\"></span>\n        </td>\n        <td>\n          <span class=\"candidates\"></span>\n          <span class=\"value\"></span>\n        </td>\n        <td>\n          <span class=\"candidates\"></span>\n          <span class=\"value\"></span>\n        </td>\n        <td>\n          <span class=\"candidates\"></span>\n          <span class=\"value\"></span>\n        </td>\n      </tr>\n      <tr>\n        <td>\n          <span class=\"candidates\"></span>\n          <span class=\"value\"></span>\n        </td>\n        <td>\n          <span class=\"candidates\"></span>\n          <span class=\"value\"></span>\n        </td>\n        <td class=\"given-number\">7</td>\n        <td>\n          <span class=\"candidates\"></span>\n          <span class=\"value\"></span>\n        </td>\n        <td class=\"given-number\">2</td>\n        <td>\n          <span class=\"candidates\"></span>\n          <span class=\"value\"></span>\n        </td>\n        <td class=\"given-number\">1</td>\n        <td class=\"given-number\">9</td>\n        <td>\n          <span class=\"candidates\"></span>\n          <span class=\"value\"></span>\n        </td>\n      </tr>\n      <tr>\n        <td class=\"given-number\">7</td>\n        <td>\n          <span class=\"candidates\"></span>\n          <span class=\"value\"></span>\n        </td>\n        <td class=\"given-number\">3</td>\n        <td class=\"given-number\">2</td>\n        <td class=\"given-number\">9</td>\n        <td class=\"given-number\">8</td>\n        <td class=\"given-number\">5</td>\n        <td class=\"given-number\">1</td>\n        <td class=\"given-number\">6</td>\n      </tr>\n      <tr>\n        <td>\n          <span class=\"candidates\"></span>\n          <span class=\"value\"></span>\n        </td>\n        <td>\n          <span class=\"candidates\"></span>\n          <span class=\"value\"></span>\n        </td>\n        <td>\n          <span class=\"candidates\"></span>\n          <span class=\"value\"></span>\n        </td>\n        <td class=\"given-number\">5</td>\n        <td>\n          <span class=\"candidates\"></span>\n          <span class=\"value\"></span>\n        </td>\n        <td>\n          <span class=\"candidates\"></span>\n          <span class=\"value\"></span>\n        </td>\n        <td>\n          <span class=\"candidates\"></span>\n          <span class=\"value\"></span>\n        </td>\n        <td class=\"given-number\">8</td>\n        <td class=\"given-number\">4</td>\n      </tr>\n      <tr>\n        <td class=\"given-number\">8</td>\n        <td class=\"given-number\">5</td>\n        <td>\n          <span class=\"candidates\"></span>\n          <span class=\"value\"></span>\n        </td>\n        <td class=\"given-number\">7</td>\n        <td>\n          <span class=\"candidates\"></span>\n          <span class=\"value\"></span>\n        </td>\n        <td class=\"given-number\">6</td>\n        <td>\n          <span class=\"candidates\"></span>\n          <span class=\"value\"></span>\n        </td>\n        <td>\n          <span class=\"candidates\"></span>\n          <span class=\"value\"></span>\n        </td>\n        <td class=\"given-number\">9</td>\n      </tr>\n    </tbody>\n  </table>\n\n  <div id=\"controls\">\n    <div id=\"number-controls\">\n      <button class=\"number-control\">1</button>\n      <button class=\"number-control\">2</button>\n      <button class=\"number-control\">3</button>\n      <button class=\"number-control\">4</button>\n      <button class=\"number-control\">5</button>\n      <button class=\"number-control\">6</button>\n      <button class=\"number-control\">7</button>\n      <button class=\"number-control\">8</button>\n      <button class=\"number-control\">9</button>\n    </div>\n\n    <input\n      id=\"candidate-switch\"\n      type=\"checkbox\"\n      aria-label=\"Is candidate move\" />\n  </div>\n</div>"
        },
        "reactConfig": null,
        "solutions": {
            "javascript": [
                "// Copyright \u00a9 2023 AlgoExpert LLC. All rights reserved.\n\ndocument.querySelectorAll('td').forEach(cell => {\n  const isStandardCell = !cell.classList.contains('given-number');\n  if (isStandardCell) {\n    cell.addEventListener('click', onClickStandardCell);\n  }\n});\n\ndocument.querySelectorAll('.number-control').forEach(numberControl => {\n  numberControl.addEventListener('click', onClickNumberControl);\n});\n\nfunction onClickStandardCell() {\n  document.querySelector('.selected')?.classList?.remove('selected');\n  this.classList.add('selected');\n}\n\nfunction onClickNumberControl() {\n  const selectedCell = document.querySelector('.selected');\n  if (selectedCell == null) {\n    return;\n  }\n\n  const clickedNumber = this.textContent;\n  const isCandidateMove = document.getElementById('candidate-switch').checked;\n  if (isCandidateMove) {\n    const candidatesNode = selectedCell.querySelector('.candidates');\n    const candidates = candidatesNode.textContent.split('');\n    const numberIndex = candidates.indexOf(clickedNumber);\n\n    if (numberIndex === -1) {\n      candidates.push(clickedNumber);\n    } else {\n      candidates.splice(numberIndex, 1);\n    }\n\n    candidatesNode.textContent = candidates.sort().join('');\n  } else {\n    selectedCell.querySelector('.value').textContent = clickedNumber;\n  }\n}"
            ]
        },
        "startingCode": {
            "javascript": "// Write your code here.\n"
        },
        "submissionStatistics": {
            "correctCount": 628,
            "failureCount": 127
        },
        "testHarness": {
            "sandboxCode": "// This file is initialized with a few test cases.\n// Feel free to add, edit, or remove test cases in\n// this file as you see fit!\n\n/* ---------------------------------- *\n * ----- BROWSER TESTING SET-UP ----- *\n * ---------------------------------- */\nconst {JSDOM} = require('jsdom');\nconst {readFileSync} = require('fs');\nconst {expect} = require('chai');\n\nconst html = readFileSync('data/index.html');\n\nlet cells;\nlet numberControls;\nlet candidateSwitch;\n\nconst resetDom = () => {\n  const dom = new JSDOM(html, {\n    resources: 'usable',\n    pretendToBeVisual: true,\n  });\n\n  global.document = dom.window.document;\n  global.window = dom.window;\n\n  Object.defineProperty(window.HTMLElement.prototype, 'innerText', {\n    configurable: true,\n    get() {\n      return this.textContent;\n    },\n    set(val) {\n      this.textContent = val;\n    },\n  });\n\n  delete require.cache[require.resolve('./program.js')];\n  require('./program.js');\n\n  cells = document.querySelectorAll('td');\n  numberControls = document.querySelectorAll('.number-control');\n  candidateSwitch = document.getElementById('candidate-switch');\n};\n/* ---------------------------------- *\n * ----- BROWSER TESTING SET-UP ----- *\n * ---------------------------------- */\n\ndescribe('sudoku', () => {\n  beforeEach(() => {\n    resetDom();\n  });\n\n  describe('cells', () => {\n    it('are selected when clicked on', () => {\n      cells[2].click();\n      expect(cells[2].classList.contains('selected')).to.be.true;\n    });\n  });\n\n  describe('normal moves', () => {\n    it('clicking number controls adds value to selected cell', () => {\n      cells[2].click();\n      numberControls[1].click();\n      expect(cells[2].querySelector('.value').textContent).to.equal('2');\n    });\n  });\n\n  describe('candidate moves', () => {\n    it('clicking number controls adds candidate move to selected cell', () => {\n      candidateSwitch.click();\n      cells[2].click();\n      numberControls[1].click();\n      expect(cells[2].querySelector('.value').textContent).to.equal('');\n      expect(cells[2].querySelector('.candidates').textContent).to.equal('2');\n    });\n  });\n});\n",
            "unitTests": "/* ---------------------------------- *\n * ----- BROWSER TESTING SET-UP ----- *\n * ---------------------------------- */\nconst {JSDOM} = require('jsdom');\nconst {readFileSync} = require('fs');\nconst {expect} = require('chai');\n\nconst html = readFileSync('data/index.html');\n\nlet cells;\nlet numberControls;\nlet candidateSwitch;\n\nconst resetDom = () => {\n  const dom = new JSDOM(html, {\n    resources: 'usable',\n    pretendToBeVisual: true,\n  });\n\n  global.document = dom.window.document;\n  global.window = dom.window;\n\n  Object.defineProperty(window.HTMLElement.prototype, 'innerText', {\n    configurable: true,\n    get() {\n      return this.textContent;\n    },\n    set(val) {\n      this.textContent = val;\n    },\n  });\n\n  delete require.cache[require.resolve('./program.js')];\n  require('./program.js');\n\n  cells = document.querySelectorAll('td');\n  numberControls = document.querySelectorAll('.number-control');\n  candidateSwitch = document.getElementById('candidate-switch');\n};\n/* ---------------------------------- *\n * ----- BROWSER TESTING SET-UP ----- *\n * ---------------------------------- */\n\ndescribe('sudoku', () => {\n  beforeEach(() => {\n    resetDom();\n  });\n\n  describe('cells', () => {\n    it('are selected when clicked on', () => {\n      cells[2].click();\n      expect(cells[2].classList.contains('selected')).to.be.true;\n    });\n\n    it('only one can be selected', () => {\n      cells[2].click();\n      cells[5].click();\n      expect(cells[2].classList.contains('selected')).to.be.false;\n      expect(cells[5].classList.contains('selected')).to.be.true;\n      expect(document.querySelectorAll('.selected').length).to.equal(1);\n    });\n\n    it('given numbers cannot be selected', () => {\n      cells[0].click();\n      expect(cells[0].classList.contains('selected')).to.be.false;\n    });\n  });\n\n  describe('normal moves', () => {\n    it('clicking number controls with nothing selected does nothing', () => {\n      numberControls[0].click();\n      numberControls[1].click();\n      cells.forEach(cell => {\n        expect(cell.querySelector('.value')?.textContent ?? '').to.equal('');\n        expect(cell.querySelector('.candidates')?.textContent ?? '').to.equal('');\n      });\n    });\n\n    it('clicking number controls adds value to selected cell', () => {\n      cells[2].click();\n      numberControls[1].click();\n      expect(cells[2].querySelector('.value').textContent).to.equal('2');\n    });\n\n    it('clicking number controls changes value of selected cell', () => {\n      cells[2].click();\n      numberControls[1].click();\n      expect(cells[2].querySelector('.value').textContent).to.equal('2');\n      numberControls[5].click();\n      expect(cells[2].querySelector('.value').textContent).to.equal('6');\n    });\n\n    it('multiple cells can have values', () => {\n      cells[2].click();\n      numberControls[1].click();\n      cells[5].click();\n      numberControls[5].click();\n      expect(cells[2].querySelector('.value').textContent).to.equal('2');\n      expect(cells[5].querySelector('.value').textContent).to.equal('6');\n      cells[2].click();\n      numberControls[8].click();\n      expect(cells[2].querySelector('.value').textContent).to.equal('9');\n    });\n  });\n\n  describe('candidate moves', () => {\n    it('clicking number controls with nothing selected does nothing', () => {\n      candidateSwitch.click();\n      numberControls[0].click();\n      numberControls[1].click();\n      cells.forEach(cell => {\n        expect(cell.querySelector('.value')?.textContent ?? '').to.equal('');\n        expect(cell.querySelector('.candidates')?.textContent ?? '').to.equal('');\n      });\n    });\n\n    it('clicking number controls adds candidate move to selected cell', () => {\n      candidateSwitch.click();\n      cells[2].click();\n      numberControls[1].click();\n      expect(cells[2].querySelector('.value').textContent).to.equal('');\n      expect(cells[2].querySelector('.candidates').textContent).to.equal('2');\n    });\n\n    it('clicking number controls again removes candidate move from selected cell', () => {\n      candidateSwitch.click();\n      cells[2].click();\n      numberControls[1].click();\n      expect(cells[2].querySelector('.value').textContent).to.equal('');\n      expect(cells[2].querySelector('.candidates').textContent).to.equal('2');\n      numberControls[1].click();\n      expect(cells[2].querySelector('.value').textContent).to.equal('');\n      expect(cells[2].querySelector('.candidates').textContent).to.equal('');\n    });\n\n    it('cells can have multiple candidate moves', () => {\n      candidateSwitch.click();\n      cells[2].click();\n      numberControls[1].click();\n      numberControls[4].click();\n      numberControls[7].click();\n      expect(cells[2].querySelector('.value').textContent).to.equal('');\n      expect(cells[2].querySelector('.candidates').textContent).to.equal('258');\n    });\n\n    it('candidate moves are always sorted', () => {\n      candidateSwitch.click();\n      cells[2].click();\n      numberControls[4].click();\n      numberControls[2].click();\n      numberControls[5].click();\n      numberControls[1].click();\n      expect(cells[2].querySelector('.value').textContent).to.equal('');\n      expect(cells[2].querySelector('.candidates').textContent).to.equal('2356');\n\n      numberControls[2].click();\n      expect(cells[2].querySelector('.value').textContent).to.equal('');\n      expect(cells[2].querySelector('.candidates').textContent).to.equal('256');\n\n      numberControls[2].click();\n      expect(cells[2].querySelector('.value').textContent).to.equal('');\n      expect(cells[2].querySelector('.candidates').textContent).to.equal('2356');\n    });\n\n    it('multiple cells can have candidate moves', () => {\n      candidateSwitch.click();\n      cells[2].click();\n      numberControls[1].click();\n      cells[5].click();\n      numberControls[5].click();\n      expect(cells[2].querySelector('.value').textContent).to.equal('');\n      expect(cells[5].querySelector('.value').textContent).to.equal('');\n      expect(cells[2].querySelector('.candidates').textContent).to.equal('2');\n      expect(cells[5].querySelector('.candidates').textContent).to.equal('6');\n      cells[2].click();\n      numberControls[8].click();\n      expect(cells[2].querySelector('.value').textContent).to.equal('');\n      expect(cells[2].querySelector('.candidates').textContent).to.equal('29');\n    });\n\n    it('cells can have candidate moves and values', () => {\n      candidateSwitch.click();\n      cells[2].click();\n      numberControls[2].click();\n      numberControls[4].click();\n      candidateSwitch.click();\n      numberControls[2].click();\n      expect(cells[2].querySelector('.value').textContent).to.equal('3');\n      expect(cells[2].querySelector('.candidates').textContent).to.equal('35');\n    });\n  });\n});\n"
        },
        "testStrategy": "MOCHA",
        "uid": "sudoku",
        "video": {
            "annotations": [],
            "codeWalkthroughTime": null,
            "duration": 0,
            "instructor": "Conner Ardman",
            "overviewTime": null,
            "vimeoId": "664982610"
        }
    },
    "difficulty": null,
    "instructor": "Conner Ardman",
    "name": "Sudoku",
    "releaseDate": "2022-01-12T00:00:00Z",
    "type": "CODING_FRONTEND",
    "uid": "sudoku"
}