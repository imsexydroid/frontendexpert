{
    "acl": {
        "isAvailable": true,
        "isFree": false,
        "isFreeForStudents": false,
        "productRequired": [
            "frontendexpert"
        ]
    },
    "category": "DOM Manipulation",
    "contents": {
        "acl": {
            "isAvailable": true,
            "isFree": false,
            "isFreeForStudents": false,
            "productRequired": [
                "frontendexpert"
            ]
        },
        "category": "DOM Manipulation",
        "hints": [
            "<p>\n  Text inputs have a <span>value</span> property that holds the current content\n  of the input. Moreover, an input can be cleared by setting the value back to\n  <span>''</span>.\n</p>",
            "<p>\n  To delete todos, you'll need to add an event listener for the click event of\n  each delete button. However, you don't want to just delete the button; you\n  need to also delete its parent container.\n</p>",
            "<p>\n  To delete an element's parent, you can use\n  <span>element.parentNode.remove()</span>, calling the remove method on the\n  parent node of the element.\n</p>",
            "<p>\n  In an event listener callback, such as the one needed for the delete button\n  click event, you can reference the element using the <span>this</span> keyword\n  (assuming you don't use an arrow function).\n</p>"
        ],
        "languageToWrite": "javascript",
        "name": "Todo List",
        "notes": "",
        "prompt": "<div class=\"html\">\n  <p>\n    You're given HTML and CSS files for a simple todo list, and you need to make\n    the todo list functional using JavaScript.\n  </p>\n  <p>\n    The todo list has an input field and an add button, which are meant to be\n    used to create named todo items. It also has an empty\n    <span>#todo-list</span> <span>ul</span>, to which todo items will be\n    appended.\n  </p>\n  <p>The todo list should have the following functionality:</p>\n  <ul>\n    <li>\n      When nothing is typed into the input, the add button should be disabled.\n      Otherwise, it should be enabled.\n    </li>\n    <li>\n      <p>\n        When the add button is enabled and clicked on, a new todo item should be\n        created and appended to the <span>#todo-list</span>, and the input\n        should be cleared.\n      </p>\n      <p style=\"margin: 0 0 10px 0\">\n        Each todo item should be an HTML list item with two children: a level-two\n        heading and a button element. The heading should have the text content\n        of whatever was typed into the input at the time of creation, and the\n        button should have <span>X</span> as its text content and\n        <span>delete-button</span> as its class (this class is defined in the\n        provided CSS file).\n      </p>\n    </li>\n    <li>\n      When the <span>X</span> button of a todo item is clicked on, the todo item\n      should be removed from the list.\n    </li>\n  </ul>\n  <p>Below is an example of a todo item in HTML:</p>\n</div>\n<div class=\"code-wrapper prism\" style=\"margin-top: -15px\">\n  <pre class=\"line-numbers\"><code class=\"language-markup\">&lt;li&gt;\n  &lt;h2&gt;Practice for frontend interviews&lt;/h2&gt;\n  &lt;button class=\"delete-button\"&gt;X&lt;/button&gt;\n&lt;/li&gt;</code></pre>\n</div>\n<div class=\"html\">\n  <p>\n    Your JavaScript code has already been linked to the pre-written HTML code\n    via a deferred script tag.\n  </p>\n</div>",
        "promptCode": {
            "css": "div {\n  width: 70vw;\n  background-color: grey;\n  color: white;\n  padding: 12px;\n  border-radius: 12px;\n  margin: auto;\n  text-align: center;\n}\n\nul {\n  list-style-type: none;\n  padding: 0;\n  margin: 24px auto;\n}\n\nli {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 0 12px;\n  border: 2px solid black;\n  background-color: #00557f;\n  border-radius: 5px;\n  margin: 5px;\n}\n\nh1 {\n  font-size: 36px;\n}\n\nh2 {\n  margin-right: 24px;\n}\n\ninput {\n  font-size: 24px;\n  padding: 8px 8px;\n  outline: none;\n  width: 50%;\n}\n\n#add-button {\n  font-size: 24px;\n  padding: 8px 12px;\n  border-radius: 8px;\n  background-color: lightblue;\n  transition: 0.5s;\n  cursor: pointer;\n}\n\n#add-button:disabled {\n  background-color: revert;\n  cursor: default;\n}\n\n.wrapper {\n  width: 70vw;\n  margin: auto;\n  text-align: center;\n  background: grey;\n  color: white;\n}\n\n.delete-button {\n  background: none;\n  color: white;\n  border: 1px solid transparent;\n  border-radius: 100%;\n  height: 24px;\n  width: 24px;\n  font-size: 14px;\n  font-weight: bold;\n  padding: 0;\n  transition: 0.5s;\n  cursor: pointer;\n}\n\n.delete-button:hover {\n  border-color: white;\n  transform: scale(1.2);\n}\n",
            "html": "<div id=\"wrapper\">\n  <h1>Todo List</h1>\n  <input id=\"todo-input\" type=\"text\" placeholder=\"Add a todo...\" />\n  <button id=\"add-button\" disabled>Add</button>\n  <ul id=\"todo-list\"></ul>\n</div>\n"
        },
        "reactConfig": null,
        "solutions": {
            "javascript": [
                "// Copyright \u00a9 2023 AlgoExpert LLC. All rights reserved.\n\nconst todoList = document.getElementById('todo-list');\nconst input = document.getElementById('todo-input');\nconst addButton = document.getElementById('add-button');\n\naddButton.addEventListener('click', onClickAdd);\ninput.addEventListener('input', onTypeTodo);\n\nfunction onClickAdd() {\n  const li = createListItem(input.value);\n  todoList.appendChild(li);\n  input.value = '';\n  addButton.disabled = true;\n}\n\nfunction onTypeTodo() {\n  addButton.disabled = input.value.length === 0;\n}\n\nfunction createListItem(name) {\n  const listItem = document.createElement('li');\n\n  const heading = document.createElement('h2');\n  heading.textContent = name;\n\n  const deleteButton = document.createElement('button');\n  deleteButton.textContent = 'X';\n  deleteButton.classList.add('delete-button');\n  deleteButton.addEventListener('click', onClickDelete);\n\n  listItem.appendChild(heading);\n  listItem.appendChild(deleteButton);\n\n  return listItem;\n}\n\nfunction onClickDelete() {\n  this.parentNode.remove();\n}"
            ]
        },
        "startingCode": {
            "javascript": "// Write your code here.\n"
        },
        "submissionStatistics": {
            "correctCount": 1523,
            "failureCount": 521
        },
        "testHarness": {
            "sandboxCode": "// This file is initialized with a few test cases.\n// Feel free to add, edit, or remove test cases in\n// this file as you see fit!\n\n/* ---------------------------------- *\n * ----- BROWSER TESTING SET-UP ----- *\n * ---------------------------------- */\nconst {JSDOM} = require('jsdom');\nconst {readFileSync} = require('fs');\nconst {expect} = require('chai');\n\nconst html = readFileSync('data/index.html');\n\nlet input;\nlet addButton;\nlet unorderedList;\n\nconst resetDom = () => {\n  const dom = new JSDOM(html, {\n    resources: 'usable',\n    pretendToBeVisual: true,\n  });\n\n  global.document = dom.window.document;\n  global.window = dom.window;\n\n  Object.defineProperty(window.HTMLElement.prototype, 'innerText', {\n    configurable: true,\n    get() {\n      return this.textContent;\n    },\n    set(val) {\n      this.textContent = val;\n    },\n  });\n\n  delete require.cache[require.resolve('./program.js')];\n  require('./program.js');\n\n  input = document.getElementById('todo-input');\n  addButton = document.getElementById('add-button');\n  unorderedList = document.querySelector('ul');\n};\n\n/* ---------------------------------- *\n * ----- BROWSER TESTING SET-UP ----- *\n * ---------------------------------- */\n\nconst addText = text => {\n  for (let i = 0; i < text.length; i++) {\n    const subStr = text.substr(0, i + 1);\n    const newChar = text.charAt(i);\n    input.value = subStr;\n\n    input.dispatchEvent(\n      new window.InputEvent('input', {\n        inputType: 'insertText',\n        data: newChar,\n      }),\n    );\n\n    const options = {\n      key: newChar,\n      charCode: 0, // Only set on keypress\n\n      // keycode and which are set to uppercase for keydown/keyup events\n      keyCode: newChar.toUpperCase().charCodeAt(0),\n      which: newChar.toUpperCase().charCodeAt(0),\n      code: `Key${newChar.toUpperCase()}`,\n    };\n\n    input.dispatchEvent(new window.KeyboardEvent('keydown', options));\n    input.dispatchEvent(\n      new window.KeyboardEvent('keypress', {\n        ...options,\n        charCode: newChar.charCodeAt(0),\n        keyCode: newChar.charCodeAt(0),\n        which: newChar.charCodeAt(0),\n      }),\n    );\n    input.dispatchEvent(new window.KeyboardEvent('keyup', options));\n  }\n\n  input.dispatchEvent(new window.Event('change'));\n};\n\ndescribe('todo list', () => {\n  beforeEach(() => {\n    resetDom();\n  });\n\n  describe('adding todos', () => {\n    it('from empty state', () => {\n      expect(unorderedList.children.length).to.equal(0);\n      addText('test');\n      expect(unorderedList.children.length).to.equal(0);\n      addButton.click();\n      expect(unorderedList.children.length).to.equal(1);\n      expect(input.value).to.equal('');\n    });\n  });\n\n  describe('todo items', () => {\n    it('use correct elements', () => {\n      addText('test');\n      addButton.click();\n      const item = unorderedList.children[0];\n      expect(item.tagName).to.equal('LI');\n      expect(item.children.length).to.equal(2);\n      const [heading, deleteButton] = item.children;\n      expect(heading.tagName).to.equal('H2');\n      expect(deleteButton.tagName).to.equal('BUTTON');\n      expect(deleteButton.className).to.equal('delete-button');\n      expect(deleteButton.textContent).to.equal('X');\n    });\n  });\n});\n",
            "unitTests": "/* ---------------------------------- *\n * ----- BROWSER TESTING SET-UP ----- *\n * ---------------------------------- */\nconst {JSDOM} = require('jsdom');\nconst {readFileSync} = require('fs');\nconst {expect} = require('chai');\n\nconst html = readFileSync('data/index.html');\n\nlet input;\nlet addButton;\nlet unorderedList;\n\nconst resetDom = () => {\n  const dom = new JSDOM(html, {\n    resources: 'usable',\n    pretendToBeVisual: true,\n  });\n\n  global.document = dom.window.document;\n  global.window = dom.window;\n\n  Object.defineProperty(window.HTMLElement.prototype, 'innerText', {\n    configurable: true,\n    get() {\n      return this.textContent;\n    },\n    set(val) {\n      this.textContent = val;\n    },\n  });\n\n  delete require.cache[require.resolve('./program.js')];\n  require('./program.js');\n\n  input = document.getElementById('todo-input');\n  addButton = document.getElementById('add-button');\n  unorderedList = document.querySelector('ul');\n};\n\n/* ---------------------------------- *\n * ----- BROWSER TESTING SET-UP ----- *\n * ---------------------------------- */\n\nconst addText = text => {\n  for (let i = 0; i < text.length; i++) {\n    const subStr = text.substr(0, i + 1);\n    const newChar = text.charAt(i);\n    input.value = subStr;\n\n    input.dispatchEvent(\n      new window.InputEvent('input', {\n        inputType: 'insertText',\n        data: newChar,\n      }),\n    );\n\n    const options = {\n      key: newChar,\n      charCode: 0, // Only set on keypress\n\n      // keycode and which are set to uppercase for keydown/keyup events\n      keyCode: newChar.toUpperCase().charCodeAt(0),\n      which: newChar.toUpperCase().charCodeAt(0),\n      code: `Key${newChar.toUpperCase()}`,\n    };\n\n    input.dispatchEvent(new window.KeyboardEvent('keydown', options));\n    input.dispatchEvent(\n      new window.KeyboardEvent('keypress', {\n        ...options,\n        charCode: newChar.charCodeAt(0),\n        keyCode: newChar.charCodeAt(0),\n        which: newChar.charCodeAt(0),\n      }),\n    );\n    input.dispatchEvent(new window.KeyboardEvent('keyup', options));\n  }\n\n  input.dispatchEvent(new window.Event('change'));\n};\n\nconst clearText = () => {\n  input.value = '';\n\n  const options = {\n    key: 'Backspace',\n    charCode: 0,\n    keyCode: 8,\n    which: 8,\n    code: 'Backspace',\n  };\n\n  input.dispatchEvent(new window.KeyboardEvent('keydown', options));\n  input.dispatchEvent(new window.KeyboardEvent('keyup', options));\n  input.dispatchEvent(\n    new window.InputEvent('input', {\n      inputType: 'deleteContentBackward',\n      data: null,\n    }),\n  );\n  input.dispatchEvent(new window.Event('change'));\n};\n\ndescribe('todo list', () => {\n  beforeEach(() => {\n    resetDom();\n  });\n\n  describe('adding todos', () => {\n    it('from empty state', () => {\n      expect(unorderedList.children.length).to.equal(0);\n      addText('test');\n      expect(unorderedList.children.length).to.equal(0);\n      addButton.click();\n      expect(unorderedList.children.length).to.equal(1);\n      expect(input.value).to.equal('');\n    });\n\n    it('with multiple todos', () => {\n      expect(unorderedList.children.length).to.equal(0);\n      addText('test');\n      expect(unorderedList.children.length).to.equal(0);\n      addButton.click();\n      expect(unorderedList.children.length).to.equal(1);\n      expect(input.value).to.equal('');\n      addText('test2');\n      addButton.click();\n      expect(unorderedList.children.length).to.equal(2);\n    });\n\n    it('with nothing typed is disabled', () => {\n      expect(addButton.disabled).to.be.true;\n      addText('test');\n      expect(addButton.disabled).to.be.false;\n      clearText();\n      expect(addButton.disabled).to.be.true;\n    });\n  });\n\n  describe('todo items', () => {\n    it('use correct elements', () => {\n      addText('test');\n      addButton.click();\n      const item = unorderedList.children[0];\n      expect(item.tagName).to.equal('LI');\n      expect(item.children.length).to.equal(2);\n      const [heading, deleteButton] = item.children;\n      expect(heading.tagName).to.equal('H2');\n      expect(deleteButton.tagName).to.equal('BUTTON');\n      expect(deleteButton.className).to.equal('delete-button');\n      expect(deleteButton.textContent).to.equal('X');\n    });\n\n    it('have correct text', () => {\n      addText('test');\n      addButton.click();\n      addText('test2');\n      addButton.click();\n      const [testItem, test2Item] = unorderedList.children;\n\n      expect(testItem.children[0].textContent).to.equal('test');\n      expect(test2Item.children[0].textContent).to.equal('test2');\n    });\n\n    it('can be deleted', () => {\n      addText('test');\n      addButton.click();\n      addText('test2');\n      addButton.click();\n      addText('test3');\n      addButton.click();\n\n      unorderedList.children[1].children[1].click();\n      expect(unorderedList.children.length).to.equal(2);\n      expect(unorderedList.children[0].children[0].textContent).to.equal('test');\n      expect(unorderedList.children[1].children[0].textContent).to.equal('test3');\n\n      unorderedList.children[1].children[1].click();\n      expect(unorderedList.children.length).to.equal(1);\n      expect(unorderedList.children[0].children[0].textContent).to.equal('test');\n\n      unorderedList.children[0].children[1].click();\n      expect(unorderedList.children.length).to.equal(0);\n    });\n  });\n});\n"
        },
        "testStrategy": "MOCHA",
        "uid": "todo-list",
        "video": {
            "annotations": [],
            "codeWalkthroughTime": null,
            "duration": 0,
            "instructor": "Conner Ardman",
            "overviewTime": null,
            "vimeoId": "652266199"
        }
    },
    "difficulty": null,
    "instructor": "Conner Ardman",
    "name": "Todo List",
    "releaseDate": "2021-12-01T00:00:00Z",
    "type": "CODING_FRONTEND",
    "uid": "todo-list"
}