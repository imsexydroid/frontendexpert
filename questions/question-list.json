{
    "acl": {
        "isAvailable": true,
        "isFree": false,
        "isFreeForStudents": false,
        "productRequired": [
            "frontendexpert"
        ]
    },
    "category": "React Components",
    "contents": {
        "acl": {
            "isAvailable": true,
            "isFree": false,
            "isFreeForStudents": false,
            "productRequired": [
                "frontendexpert"
            ]
        },
        "category": "React Components",
        "hints": [
            "<p>\n  Try taking this problem on piece at a time. Could you break this component\n  into smaller components to work on independently?\n</p>",
            "<p>\n  The <span>useEffect</span> hook could be useful to ensure fetch is only called\n  on mount.\n</p>",
            "<p>\n  Passing an empty dependency array to <span>useEffect</span> will ensure the\n  callback function only runs one time.\n</p>",
            "<p>\n  You can use <span>Promise.all</span> to await the result of multiple fetch\n  calls all at once.\n</p>"
        ],
        "languageToWrite": "jsx",
        "name": "Question List",
        "notes": "",
        "prompt": "<div class=\"html\">\n  <p>\n    You're given a CSS file for the FrontendExpert question list, and you need\n    to implement the component using React.\n  </p>\n\n  <p>\n    When the component initially mounts, it should make two API requests:\n  </p>\n\n  <ul style=\"margin-top: -15px\">\n    <li>\n      <span>https://api.frontendexpert.io/api/fe/questions</span> returns a list of\n      all of the questions as JSON in this format:\n    </li>\n  </ul>\n  </div>\n  <div class=\"code-wrapper prism\">\n    <pre class=\"line-numbers\"><code class=\"language-json\">[\n  {\n    \"category\": \"HTML\",\n    \"id\": \"sign-up-form\",\n    \"name\": \"Sign-Up Form\"\n  },\n  ...\n]</code></pre>\n</div>\n\n<div class=\"html\">\n  <ul>\n    <li>\n      <span>https://api.frontendexpert.io/api/fe/submissions</span> returns a list of\n      the user's most recent submissions as JSON in this format:\n    </li>\n  </ul>\n  </div>\n  <div class=\"code-wrapper prism\">\n    <pre class=\"line-numbers\"><code class=\"language-json\">[\n  {\n    \"questionId\": \"blog-post\",\u200b\u200b\n    \"status\": \"CORRECT\"\n  },\n  ...\n]</code></pre>\n</div>\n\n<div class=\"html\">\n  <p>\n    The component should render a fragment containing all of the\n    categories. Each category is a div with a heading and one or more\n    question divs. Each category div should have a <span>category</span> CSS\n    class, and each question should have a <span>question</span> CSS class.\n  </p>\n\n  <p>\n    The category heading is an <span>h2</span> with the text of the name of the\n    category and how many correct submissions there are for questions in that\n    category (correct questions have the \"CORRECT\" status). For example, if\n    1 out of 5 CSS questions have a \"CORRECT\" status, the category heading\n    would read <span>CSS 1 / 5</span>.\n  </p>\n\n  <p>\n    The question divs should first contain another div for the status.\n    This status div should have the CSS class of <span>status</span> and a\n    CSS class based on the current status. If the question exists in the\n    submissions API output, that status should be converted to lowercase, any\n    <span>_</span>'s should be replaced with a <span>-</span>, and the resulting\n    string should be used as a CSS class. For example, if a submission status\n    is <span>PARTIALLY_CORRECT</span>, the complete CSS class of the status div\n    would be <span>status partially-correct</span>. If there is no status in\n    the submissions response, the status class should be\n    <span>status unattempted</span>.\n  </p>\n\n  <p>\n    After the status div, each question should also contain an <span>h3</span>\n    with the title of the question.\n  </p>\n\n  <p>\n    The complete output of a category might look something like this:\n  </p>\n</div>\n<div class=\"code-wrapper prism\" style=\"margin-top: -15px\">\n  <pre\n    class=\"line-numbers\"\n  ><code class=\"language-markup\">&lt;div class=\"category\"&gt;\n  &lt;h2&gt;CSS 1 / 5&lt;/h2&gt;\n  &lt;div class=\"question\"&gt;\n    &lt;div class=\"status incorrect\"&gt;&lt;/div&gt;\n    &lt;h3&gt;Rainbow Circles&lt;/h3&gt;\n  &lt;/div&gt;\n  &lt;div class=\"question\"&gt;\n    &lt;div class=\"status partially-correct\"&gt;&lt;/div&gt;\n    &lt;h3&gt;Navbar&lt;/h3&gt;\n  &lt;/div&gt;\n&lt;/div&gt;</code></pre>\n</div>\n<div class=\"html\">\n\n\n  <p>\n    Your component has already been rendered to the DOM inside of a\n    <span>#root</span> div directly in the body with the CSS imported.\n  </p>\n</div>",
        "promptCode": {
            "css": "body {\n  background-color: #f6f9fc;\n}\n\nh1 {\n  text-align: center;\n  margin: 0;\n}\n\n#root {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n}\n\nh2 {\n  margin: 0;\n}\n\n.category {\n  flex-grow: 1;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n}\n\n.question {\n  display: flex;\n  align-items: center;\n  gap: 4px;\n  background-color: white;\n  padding: 10px;\n  border-right: 25px solid #11967e;\n  border-radius: 4px;\n  box-shadow: rgba(0, 0, 0, 20%) 0px 1px 2px;\n}\n\nh3 {\n  margin: 0;\n  color: #11967e;\n  cursor: pointer;\n  transition: 0.5s color;\n}\n\nh3:hover {\n  color: black;\n}\n\n.status {\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n}\n\n.correct {\n  background: linear-gradient(#04ff00, #369536);\n}\n\n.partially-correct {\n  background: linear-gradient(#fbf82b, #ffc63b);\n}\n\n.incorrect {\n  background: linear-gradient(#ff0000, #760000);\n}\n\n.unattempted {\n  background-color: transparent;\n  border: 1px solid #6772e54d;\n}\n"
        },
        "reactConfig": {
            "componentName": "QuestionList"
        },
        "solutions": {
            "jsx": [
                "// Copyright \u00a9 2023 AlgoExpert LLC. All rights reserved.\n\nimport React from 'react';\n\nconst QUESTIONS_API_BASE_URL = 'https://api.frontendexpert.io/api/fe/questions';\nconst SUBMISSIONS_API_BASE_URL = 'https://api.frontendexpert.io/api/fe/submissions';\n\nexport default function QuestionList() {\n  const [questions, submissions] = useQuestionsAndSubmissions();\n  const questionsByCategory = getQuestionsByCategory(questions);\n  const submissionsByQuestion = getSubmissionsByQuestion(submissions);\n  const categories = Object.keys(questionsByCategory);\n\n  return (\n    <>\n      {categories.map(category => (\n        <Category\n          key={category}\n          category={category}\n          questions={questionsByCategory[category]}\n          submissionsByQuestion={submissionsByQuestion}\n        />\n      ))}\n    </>\n  );\n}\n\nfunction Category({category, questions, submissionsByQuestion}) {\n  const totalQuestions = questions.length;\n  const numQuestionsCorrect = questions.reduce((sum, question) => {\n    return submissionsByQuestion[question.id] === 'CORRECT' ? sum + 1 : sum;\n  }, 0);\n\n  return (\n    <div className=\"category\">\n      <h2>\n        {category} - {numQuestionsCorrect} / {totalQuestions}\n      </h2>\n      {questions.map(question => (\n        <Question\n          key={question.id}\n          question={question}\n          submissionsByQuestion={submissionsByQuestion}\n        />\n      ))}\n    </div>\n  );\n}\n\nfunction Question({question, submissionsByQuestion}) {\n  const submissionStatus = submissionsByQuestion[question.id];\n  const statusClass =\n    submissionStatus == null ? 'unattempted' : submissionStatus.toLowerCase().replace('_', '-');\n\n  return (\n    <div className=\"question\">\n      <div className={`status ${statusClass}`} />\n      <h3>{question.name}</h3>\n    </div>\n  );\n}\n\nfunction useQuestionsAndSubmissions() {\n  const [questions, setQuestions] = useState([]);\n  const [submissions, setSubmissions] = useState([]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const [questionsResponse, submissionsResponse] = await Promise.all([\n        fetch(QUESTIONS_API_BASE_URL),\n        fetch(SUBMISSIONS_API_BASE_URL),\n      ]);\n      const [questions, submissions] = await Promise.all([\n        questionsResponse.json(),\n        submissionsResponse.json(),\n      ]);\n\n      setQuestions(questions);\n      setSubmissions(submissions);\n    };\n\n    fetchData();\n  }, []);\n\n  return [questions, submissions];\n}\n\nfunction getQuestionsByCategory(questions) {\n  const questionsByCategory = {};\n  questions.forEach(({category, ...question}) => {\n    if (!questionsByCategory.hasOwnProperty(category)) {\n      questionsByCategory[category] = [];\n    }\n    questionsByCategory[category].push(question);\n  });\n\n  return questionsByCategory;\n}\n\nfunction getSubmissionsByQuestion(submissions) {\n  const submissionsByQuestion = {};\n  submissions.forEach(({questionId, status}) => {\n    submissionsByQuestion[questionId] = status;\n  });\n\n  return submissionsByQuestion;\n}"
            ]
        },
        "startingCode": {
            "jsx": "import React from 'react';\n\nconst QUESTIONS_API_BASE_URL = 'https://api.frontendexpert.io/api/fe/questions';\nconst SUBMISSIONS_API_BASE_URL = 'https://api.frontendexpert.io/api/fe/submissions';\n\nexport default function QuestionList() {\n  // Write your code here.\n\n  return (\n    <>\n      {/* Write your code here. */}\n    </>\n  );\n}"
        },
        "submissionStatistics": {
            "correctCount": 1366,
            "failureCount": 1077
        },
        "testHarness": {
            "sandboxCode": "// This file is initialized with a few test cases.\n// Feel free to add, edit, or remove test cases in\n// this file as you see fit!\n\n/* ---------------------------------- *\n * ----- BROWSER TESTING SET-UP ----- *\n * ---------------------------------- */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport QuestionList from './program';\nimport {act, Simulate} from 'react-dom/test-utils';\nconst {JSDOM} = require('jsdom');\nconst {getQuestions, getSubmissions} = require('./data/api');\nconst chai = require('chai');\nconst {expect} = chai;\n\nlet rootContainer;\nlet categoryContainers;\nlet questions;\n\nconst resetDom = () => {\n  const dom = new JSDOM({\n    url: 'http://localhost:3000',\n    resources: 'usable',\n    pretendToBeVisual: true,\n  });\n\n  global.document = dom.window.document;\n  global.window = dom.window;\n\n  for (const [key, value] of Object.entries(React)) {\n    global[key] = value;\n  }\n\n  const convertStringToUrlObj = url => {\n    const [base, params] = url.split('?');\n    const paramPairs = params?.split('&');\n    const urlObj = new URL(base);\n    paramPairs?.forEach(paramStr => {\n      const [key, value] = paramStr.split('=');\n      urlObj.searchParams.set(key, value);\n    });\n    return urlObj;\n  };\n\n  global.fetch = url => {\n    const urlObj = typeof url === 'object' ? url : convertStringToUrlObj(url);\n    if (urlObj.origin + urlObj.pathname === 'https://api.frontendexpert.io/api/fe/submissions') {\n      const submissions = getSubmissions();\n      const response = {\n        status: 200,\n        ok: true,\n        statusText: 'OK',\n        type: 'cors',\n        url: urlObj.toString(),\n        redirected: false,\n        json: async () => submissions,\n        text: async () => JSON.stringify(submissions),\n      };\n      return Promise.resolve(response);\n    } else if (\n      urlObj.origin + urlObj.pathname ===\n      'https://api.frontendexpert.io/api/fe/questions'\n    ) {\n      const questions = getQuestions();\n      const response = {\n        status: 200,\n        ok: true,\n        statusText: 'OK',\n        type: 'cors',\n        url: urlObj.toString(),\n        redirected: false,\n        json: async () => questions,\n        text: async () => JSON.stringify(questions),\n      };\n      return Promise.resolve(response);\n    }\n\n    const response = {\n      status: 404,\n      ok: false,\n      statusText: 'Not Found',\n      type: 'cors',\n      url: urlObj.toString(),\n      redirected: false,\n    };\n    return Promise.resolve(response);\n  };\n\n  rootContainer = document.createElement('div');\n  rootContainer.id = 'root';\n  document.body.appendChild(rootContainer);\n\n  act(() => {\n    ReactDOM.render(<QuestionList />, rootContainer);\n  });\n\n  categoryContainers = document.querySelectorAll('.category');\n  questions = document.querySelectorAll('.question');\n};\n\nfunction waitForRender() {\n  return new Promise(function (resolve) {\n    setImmediate(resolve);\n  });\n}\n\n/* ---------------------------------- *\n * ----- BROWSER TESTING SET-UP ----- *\n * ---------------------------------- */\n\ndescribe('Question List', () => {\n  beforeEach(async () => {\n    resetDom();\n    await waitForRender();\n  });\n\n  afterEach(() => {\n    ReactDOM.unmountComponentAtNode(rootContainer);\n    rootContainer.remove();\n    rootContainer = null;\n  });\n\n  it('loads all 4 categories', () => {\n    expect(document.querySelectorAll('.category').length).to.equal(4);\n  });\n\n  it('loads all 26 questions', () => {\n    expect(document.querySelectorAll('.question').length).to.equal(26);\n  });\n\n  it('has correct category headings titles', () => {\n    const EXPECTED_HEADINGS = ['HTML', 'CSS', 'JavaScript', 'DOM Manipulation'];\n\n    const headings = Array.from(document.querySelectorAll('.category h2')).map(\n      heading => heading.textContent,\n    );\n\n    headings.forEach((heading, i) => {\n      expect(heading.startsWith(EXPECTED_HEADINGS[i])).to.be.true;\n    });\n  });\n});\n",
            "unitTests": "/* ---------------------------------- *\n * ----- BROWSER TESTING SET-UP ----- *\n * ---------------------------------- */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport QuestionList from './program';\nimport {act, Simulate} from 'react-dom/test-utils';\nconst {JSDOM} = require('jsdom');\nconst {getQuestions, getSubmissions} = require('./data/api');\nconst chai = require('chai');\nconst spies = require('chai-spies');\nchai.use(spies);\nconst {expect, spy} = chai;\n\nlet rootContainer;\nlet categoryContainers;\nlet questions;\n\nconst resetSpies = () => {\n  spy.restore();\n  spy.on(global, 'fetch');\n};\n\nconst resetDom = () => {\n  const dom = new JSDOM({\n    url: 'http://localhost:3000',\n    resources: 'usable',\n    pretendToBeVisual: true,\n  });\n\n  global.document = dom.window.document;\n  global.window = dom.window;\n\n  for (const [key, value] of Object.entries(React)) {\n    global[key] = value;\n  }\n\n  const convertStringToUrlObj = url => {\n    const [base, params] = url.split('?');\n    const paramPairs = params?.split('&');\n    const urlObj = new URL(base);\n    paramPairs?.forEach(paramStr => {\n      const [key, value] = paramStr.split('=');\n      urlObj.searchParams.set(key, value);\n    });\n    return urlObj;\n  };\n\n  global.fetch = url => {\n    const urlObj = typeof url === 'object' ? url : convertStringToUrlObj(url);\n    if (urlObj.origin + urlObj.pathname === 'https://api.frontendexpert.io/api/fe/submissions') {\n      const submissions = getSubmissions();\n      const response = {\n        status: 200,\n        ok: true,\n        statusText: 'OK',\n        type: 'cors',\n        url: urlObj.toString(),\n        redirected: false,\n        json: async () => submissions,\n        text: async () => JSON.stringify(submissions),\n      };\n      return Promise.resolve(response);\n    } else if (\n      urlObj.origin + urlObj.pathname ===\n      'https://api.frontendexpert.io/api/fe/questions'\n    ) {\n      const questions = getQuestions();\n      const response = {\n        status: 200,\n        ok: true,\n        statusText: 'OK',\n        type: 'cors',\n        url: urlObj.toString(),\n        redirected: false,\n        json: async () => questions,\n        text: async () => JSON.stringify(questions),\n      };\n      return Promise.resolve(response);\n    }\n\n    const response = {\n      status: 404,\n      ok: false,\n      statusText: 'Not Found',\n      type: 'cors',\n      url: urlObj.toString(),\n      redirected: false,\n    };\n    return Promise.resolve(response);\n  };\n\n  // Reset spies before importing the JS.\n  resetSpies();\n\n  delete require.cache[require.resolve('./program.js')];\n  require('./program.js');\n\n  rootContainer = document.createElement('div');\n  rootContainer.id = 'root';\n  document.body.appendChild(rootContainer);\n\n  act(() => {\n    ReactDOM.render(<QuestionList />, rootContainer);\n  });\n\n  categoryContainers = document.querySelectorAll('.category');\n  questions = document.querySelectorAll('.question');\n};\n\nfunction waitForRender() {\n  return new Promise(function (resolve) {\n    setImmediate(resolve);\n  });\n}\n\n/* ---------------------------------- *\n * ----- BROWSER TESTING SET-UP ----- *\n * ---------------------------------- */\n\ndescribe('Question List', () => {\n  beforeEach(async () => {\n    resetDom();\n    await waitForRender();\n  });\n\n  afterEach(() => {\n    ReactDOM.unmountComponentAtNode(rootContainer);\n    rootContainer.remove();\n    rootContainer = null;\n  });\n\n  it('loads all 4 categories', () => {\n    expect(document.querySelectorAll('.category').length).to.equal(4);\n  });\n\n  it('loads all 26 questions', () => {\n    expect(document.querySelectorAll('.question').length).to.equal(26);\n  });\n\n  it('has correct category headings titles', () => {\n    const EXPECTED_HEADINGS = ['HTML', 'CSS', 'JavaScript', 'DOM Manipulation'];\n\n    const headings = Array.from(document.querySelectorAll('.category h2')).map(\n      heading => heading.textContent,\n    );\n\n    headings.forEach((heading, i) => {\n      expect(heading.startsWith(EXPECTED_HEADINGS[i])).to.be.true;\n    });\n  });\n\n  it('has correct category headings with counts', () => {\n    const EXPECTED_HEADINGS = [\n      'HTML - 2 / 4',\n      'CSS - 1 / 5',\n      'JavaScript - 3 / 8',\n      'DOM Manipulation - 5 / 9',\n    ];\n\n    const headings = Array.from(document.querySelectorAll('.category h2')).map(\n      heading => heading.textContent,\n    );\n\n    expect(headings).to.deep.equal(EXPECTED_HEADINGS);\n  });\n\n  it('categories have correct DOM format', () => {\n    const category = document.querySelector('.category');\n    expect(category.tagName).to.equal('DIV');\n\n    const heading = category.children[0];\n    expect(heading.tagName).to.equal('H2');\n\n    Array.from(category.children)\n      .slice(1)\n      .forEach(child => {\n        expect(child.classList.contains('question')).to.be.true;\n      });\n  });\n\n  it('questions have correct DOM format', () => {\n    const question = document.querySelector('.question');\n    expect(question.tagName).to.equal('DIV');\n    expect(question.children.length).to.equal(2);\n\n    const children = Array.from(question.children);\n    const statusDiv = children[0];\n    expect(statusDiv.tagName).to.equal('DIV');\n    expect(statusDiv.classList.contains('status')).to.be.true;\n\n    const heading = children[1];\n    expect(heading.tagName).to.equal('H3');\n  });\n\n  it('has correct questions in each category', () => {\n    const EXPECTED_QUESTIONS = [\n      ['Sign-Up Form', 'Item Cart', 'Spaghetti Recipe', 'Blog Post'],\n      ['Rainbow Circles', 'Navbar', 'Pig Emoji', 'Purchase Form', 'AlgoExpert Products'],\n      [\n        'Testing Framework',\n        'Array Methods',\n        'Event Target',\n        'Debounce',\n        'This Binding',\n        'Promisify',\n        'Throttle',\n        'Curry',\n      ],\n      [\n        'Infinite Scroll',\n        'Stopwatch',\n        'Tic Tac Toe',\n        'Todo List',\n        'Typeahead',\n        'Tier List',\n        'Toasts',\n        'Sudoku',\n        'Questions List',\n      ],\n    ];\n\n    const categories = document.querySelectorAll('.category');\n    categories.forEach((category, i) => {\n      const questions = Array.from(category.querySelectorAll('h3')).map(\n        heading => heading.textContent,\n      );\n\n      expect(questions).to.deep.equal(EXPECTED_QUESTIONS[i]);\n    });\n  });\n\n  it('questions have correct statuses', () => {\n    const EXPECTED_STATUSES = [\n      ['unattempted', 'correct', 'partially-correct', 'correct'],\n      ['incorrect', 'partially-correct', 'correct', 'unattempted', 'partially-correct'],\n      [\n        'correct',\n        'incorrect',\n        'correct',\n        'partially-correct',\n        'unattempted',\n        'unattempted',\n        'incorrect',\n        'correct',\n      ],\n      [\n        'correct',\n        'partially-correct',\n        'correct',\n        'correct',\n        'correct',\n        'partially-correct',\n        'incorrect',\n        'correct',\n        'unattempted',\n      ],\n    ];\n\n    const categories = document.querySelectorAll('.category');\n    categories.forEach((category, i) => {\n      const questions = Array.from(category.querySelectorAll('.status')).forEach((statusDiv, j) => {\n        expect(statusDiv.classList.contains(EXPECTED_STATUSES[i][j])).to.be.true;\n      });\n    });\n  });\n\n  it('only calls fetch once for each API', () => {\n    expect(global.fetch).to.have.been.called.exactly(2);\n  });\n});\n"
        },
        "testStrategy": "REACT_MOCHA",
        "uid": "question-list",
        "video": {
            "annotations": [],
            "codeWalkthroughTime": null,
            "duration": 0,
            "instructor": "Conner Ardman",
            "overviewTime": null,
            "vimeoId": "711484308"
        }
    },
    "difficulty": null,
    "instructor": "Conner Ardman",
    "name": "Question List",
    "releaseDate": "2022-05-24T00:00:00Z",
    "type": "CODING_FRONTEND",
    "uid": "question-list"
}