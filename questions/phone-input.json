{
    "acl": {
        "isAvailable": true,
        "isFree": false,
        "isFreeForStudents": false,
        "productRequired": [
            "frontendexpert"
        ]
    },
    "category": "React Components",
    "contents": {
        "acl": {
            "isAvailable": true,
            "isFree": false,
            "isFreeForStudents": false,
            "productRequired": [
                "frontendexpert"
            ]
        },
        "category": "React Components",
        "hints": [
            "<p>\n  All non-digits can be removed from a string by using\n  <span>str.replace(/\\D/g,'')</span>.\n</p>",
            "<p>\n  Placeholder text can be added to an input with the <span>placeholder</span>\n  attribute.\n</p>"
        ],
        "languageToWrite": "jsx",
        "name": "Phone Input",
        "notes": "",
        "prompt": "<div class=\"html\">\n  <p>\n    You're given a CSS file for a phone input, and you need to implement\n    the component using React.\n  </p>\n\n  <p>\n    The component should return two elements, the input and a submit button.\n  </p>\n\n  <p>\n    The input has the following functionality:\n  </p>\n  <ul>\n    <li>\n      Typing any character except a number has no effect.\n    </li>\n    <li>\n      After typing the first number, a \"(\" is added before that first\n      number. For example, \"(1\".\n    </li>\n    <li>\n      After typing the fourth number, a \") \" is added before that new\n      number. For example, \"(123) 4\". Note there is a space after the closing\n      parenthesis.\n    </li>\n    <li>\n      After typing the seventh number, a \"-\" is added before that new\n      number. For example, \"(123) 456-7\".\n    </li>\n    <li>\n      No more than 10 numbers can be typed, meaning a completed phone number\n      looks like \"(123) 456-7890\".\n    </li>\n    <li>\n      If multiple numbers are typed at once, the same formatting rules\n      apply as if they were typed one at a time.\n    </li>\n    <li>\n      Pressing backspace removes one number at a time, including any\n      corresponding formatting characters.\n    </li>\n    <li>\n      If the input is empty, it has a placeholder of \"(555) 555-5555\".\n    </li>\n  </ul>\n\n  <p>\n    To the left of the input is a button with the text of \"Submit\" and the following\n    characteristics:\n  </p>\n  <ul>\n    <li>\n      If the input does not have a complete phone number, the button is disabled.\n    </li>\n    <li>\n      Clicking the button when it is enabled clears the input, including any\n      formatting characters.\n    </li>\n  </ul>\n\n  <p>\n    Your component has already been rendered to the DOM inside of a\n    <span>#root</span> div directly in the body with the CSS imported.\n  </p>\n</div>",
        "promptCode": {
            "css": "input:not([type=\"button\"], [type=\"submit\"]) {\n  width: 300px;\n  padding: 10px;\n  border-radius: 8px;\n  border: 2px solid #828080;\n  font-size: 18px;\n  outline: none;\n}\n\nbutton, input[type=\"button\"], input[type=\"submit\"] {\n  margin-left: 10px;\n  cursor: pointer;\n  padding: 12px;\n  font-size: 16px;\n  border-radius: 8px;\n  background-color: #02203c;\n  color: white;\n  transition: 0.5s;\n}\n\nbutton:disabled, input[type=\"button\"]:disabled, input[type=\"submit\"]:disabled {\n  background-color: grey;\n  color: black;\n}"
        },
        "reactConfig": {
            "componentName": "PhoneInput"
        },
        "solutions": {
            "jsx": [
                "// Copyright \u00a9 2023 AlgoExpert LLC. All rights reserved.\n\nimport React, { useState } from 'react';\n\nconst COMPLETE_NUMBER_LENGTH = 14;\n\nexport default function PhoneInput() {\n  const [value, setValue] = useState('');\n\n  const onChange = event => {\n    setValue(format(event.target.value));\n  };\n\n  return (\n    <>\n      <input\n        type=\"tel\"\n        value={value}\n        onChange={onChange}\n        placeholder=\"(555) 555-5555\"\n      />\n      <button\n        disabled={value.length < COMPLETE_NUMBER_LENGTH}\n        onClick={() => setValue('')}\n      >\n        Submit\n      </button>\n    </>\n  );\n}\n\nfunction format(str) {\n  const rawString = str.replace(/\\D/g, '');\n  let output = '';\n\n  if (rawString.length > 0) {\n    output += '(';\n    output += rawString.substring(0, 3);\n  }\n\n  if (rawString.length > 3) {\n    output += ') ';\n    output += rawString.substring(3, 6);\n  }\n\n  if (rawString.length > 6) {\n    output += '-';\n    output += rawString.substring(6, 10);\n  }\n  return output;\n}"
            ]
        },
        "startingCode": {
            "jsx": "import React from 'react';\n\nexport default function PhoneInput() {\n  // Write your code here.\n\n  return (\n    <>\n      {/* Write your code here. */}\n    </>\n  );\n}"
        },
        "submissionStatistics": {
            "correctCount": 941,
            "failureCount": 316
        },
        "testHarness": {
            "sandboxCode": "// This file is initialized with a few test cases.\n// Feel free to add, edit, or remove test cases in\n// this file as you see fit!\n\n/* ---------------------------------- *\n * ----- BROWSER TESTING SET-UP ----- *\n * ---------------------------------- */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport TipCalculator from './program';\nimport {act, Simulate} from 'react-dom/test-utils';\nconst {JSDOM} = require('jsdom');\nconst chai = require('chai');\nconst {expect} = chai;\n\nlet rootContainer;\nlet input;\nlet button;\n\nconst resetDom = () => {\n  const dom = new JSDOM({\n    url: 'http://localhost:3000',\n    resources: 'usable',\n    pretendToBeVisual: true,\n  });\n\n  global.document = dom.window.document;\n  global.window = dom.window;\n\n  for (const [key, value] of Object.entries(React)) {\n    global[key] = value;\n  }\n\n  rootContainer = document.createElement('div');\n  rootContainer.id = 'root';\n  document.body.appendChild(rootContainer);\n\n  act(() => {\n    ReactDOM.render(<TipCalculator />, rootContainer);\n  });\n\n  input = document.querySelector('input');\n  button = document.querySelector('button, input[type=\"submit\"], input[type=\"button\"]');\n};\n\n/* ---------------------------------- *\n * ----- BROWSER TESTING SET-UP ----- *\n * ---------------------------------- */\n\nconst typeInInput = (text) => {\n  const startingText = input.value;\n  for (let i = 0; i < text.length; i++) {\n    const subStr = startingText + text.substr(0, i + 1);\n    const newChar = text.charAt(i);\n    input.value = subStr;\n\n    Simulate.input(input, {\n      inputType: 'insertText',\n      data: newChar,\n    });\n\n    const options = {\n      key: newChar,\n      charCode: 0, // Only set on keypress\n\n      // keycode and which are set to uppercase for keydown/keyup events\n      keyCode: newChar.toUpperCase().charCodeAt(0),\n      which: newChar.toUpperCase().charCodeAt(0),\n      code: `Key${newChar.toUpperCase()}`,\n    };\n\n    Simulate.keyDown(input, options);\n    Simulate.keyPress(input, {\n      ...options,\n      charCode: newChar.charCodeAt(0),\n      keyCode: newChar.charCodeAt(0),\n      which: newChar.charCodeAt(0),\n    });\n    Simulate.keyUp(input, options);\n  }\n  Simulate.change(input, {target: {value: startingText + text}});\n};\n\nconst pasteInInput = (text) => {\n  const newText = input.value + text;\n  input.value = newText;\n\n  Simulate.input(input, {\n    inputType: 'insertFromPaste',\n    data: text,\n  });\n  Simulate.change(input, {target: {value: newText}});\n};\n\nconst backspace = () => {\n  const newText = input.value.slice(0, -1);\n  input.value = newText;\n\n  Simulate.input(input, {\n    inputType: 'deleteContentBackward',\n    data: '',\n  });\n  Simulate.change(input, {target: {value: newText}});\n};\n\ndescribe('Phone Input', () => {\n  beforeEach(() => {\n    resetDom();\n  });\n\n  afterEach(() => {\n    ReactDOM.unmountComponentAtNode(rootContainer);\n    rootContainer.remove();\n    rootContainer = null;\n  });\n\n  describe('input', () => {\n    it('typing a number adds the \"(\" and the number', () => {\n      typeInInput('1');\n      expect(input.value).to.equal('(1');\n    });\n\n    it('pasting a complete number has correct formatting', () => {\n      pasteInInput('0123456987');\n      expect(input.value).to.equal('(012) 345-6987');\n    });\n\n    it('backspaces remove formatting and the numbers', () => {\n      typeInInput('0');\n      backspace();\n      expect(input.value).to.equal('');\n      typeInInput('0123456789');\n      backspace();\n      expect(input.value).to.equal('(012) 345-678');\n      backspace();\n      expect(input.value).to.equal('(012) 345-67');\n      backspace();\n      expect(input.value).to.equal('(012) 345-6');\n      backspace();\n      expect(input.value).to.equal('(012) 345');\n      backspace();\n      expect(input.value).to.equal('(012) 34');\n      backspace();\n      expect(input.value).to.equal('(012) 3');\n      backspace();\n      expect(input.value).to.equal('(012');\n      backspace();\n      expect(input.value).to.equal('(01');\n      backspace();\n      expect(input.value).to.equal('(0');\n      backspace();\n      expect(input.value).to.equal('');\n    });\n  });\n\n  describe('submit button', () => {\n    it('has correct text', () => {\n      switch(button.tagName) {\n        case 'BUTTON':\n          expect(button.textContent.trim()).to.equal('Submit');\n          break;\n        case 'INPUT':\n          if (button.type === 'button') {\n            expect(button.value).to.equal('Submit');\n          }\n          break;\n      }\n    });\n\n    it('clicking the button clears the input and disables the button', () => {\n      typeInInput('0123456789');\n      button.click();\n      expect(input.value).to.equal('');\n      expect(button.disabled).to.be.true;\n    });\n  });\n});\n",
            "unitTests": "/* ---------------------------------- *\n * ----- BROWSER TESTING SET-UP ----- *\n * ---------------------------------- */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport TipCalculator from './program';\nimport {act, Simulate} from 'react-dom/test-utils';\nconst {JSDOM} = require('jsdom');\nconst chai = require('chai');\nconst {expect} = chai;\n\nlet rootContainer;\nlet input;\nlet button;\n\nconst resetDom = () => {\n  const dom = new JSDOM({\n    url: 'http://localhost:3000',\n    resources: 'usable',\n    pretendToBeVisual: true,\n  });\n\n  global.document = dom.window.document;\n  global.window = dom.window;\n\n  for (const [key, value] of Object.entries(React)) {\n    global[key] = value;\n  }\n\n  rootContainer = document.createElement('div');\n  rootContainer.id = 'root';\n  document.body.appendChild(rootContainer);\n\n  act(() => {\n    ReactDOM.render(<TipCalculator />, rootContainer);\n  });\n\n  input = document.querySelector('input');\n  button = document.querySelector('button, input[type=\"submit\"], input[type=\"button\"]');\n};\n\n/* ---------------------------------- *\n * ----- BROWSER TESTING SET-UP ----- *\n * ---------------------------------- */\n\nconst typeInInput = (text) => {\n  const startingText = input.value;\n  for (let i = 0; i < text.length; i++) {\n    const subStr = startingText + text.substr(0, i + 1);\n    const newChar = text.charAt(i);\n    input.value = subStr;\n\n    Simulate.input(input, {\n      inputType: 'insertText',\n      data: newChar,\n    });\n\n    const options = {\n      key: newChar,\n      charCode: 0, // Only set on keypress\n\n      // keycode and which are set to uppercase for keydown/keyup events\n      keyCode: newChar.toUpperCase().charCodeAt(0),\n      which: newChar.toUpperCase().charCodeAt(0),\n      code: `Key${newChar.toUpperCase()}`,\n    };\n\n    Simulate.keyDown(input, options);\n    Simulate.keyPress(input, {\n      ...options,\n      charCode: newChar.charCodeAt(0),\n      keyCode: newChar.charCodeAt(0),\n      which: newChar.charCodeAt(0),\n    });\n    Simulate.keyUp(input, options);\n  }\n  Simulate.change(input, {target: {value: startingText + text}});\n};\n\nconst pasteInInput = (text) => {\n  const newText = input.value + text;\n  input.value = newText;\n\n  Simulate.input(input, {\n    inputType: 'insertFromPaste',\n    data: text,\n  });\n  Simulate.change(input, {target: {value: newText}});\n};\n\nconst backspace = () => {\n  const newText = input.value.slice(0, -1);\n  input.value = newText;\n\n  Simulate.input(input, {\n    inputType: 'deleteContentBackward',\n    data: '',\n  });\n  Simulate.change(input, {target: {value: newText}});\n};\n\ndescribe('Phone Input', () => {\n  beforeEach(() => {\n    resetDom();\n  });\n\n  afterEach(() => {\n    ReactDOM.unmountComponentAtNode(rootContainer);\n    rootContainer.remove();\n    rootContainer = null;\n  });\n\n  describe('input', () => {\n    it('is initially empty', () => {\n      expect(input.value).to.equal('');\n    });\n\n    it('has correct placeholder text', () => {\n      expect(input.placeholder).to.equal('(555) 555-5555');\n    });\n\n    it('typing a number adds the \"(\" and the number', () => {\n      typeInInput('1');\n      expect(input.value).to.equal('(1');\n    });\n\n    it('typing one number is in the format \"(x\"', () => {\n      typeInInput('1');\n      expect(input.value).to.equal('(1');\n    });\n\n    it('typing four numbers is in the format \"(xxx) x\"', () => {\n      typeInInput('1');\n      expect(input.value).to.equal('(1');\n      typeInInput('2');\n      expect(input.value).to.equal('(12');\n      typeInInput('3');\n      expect(input.value).to.equal('(123');\n      typeInInput('4');\n      expect(input.value).to.equal('(123) 4');\n    });\n\n    it('typing seven numbers is in the format \"(xxx) xxx-x\"', () => {\n      typeInInput('123456');\n      expect(input.value).to.equal('(123) 456');\n      typeInInput('7');\n      expect(input.value).to.equal('(123) 456-7');\n    });\n\n    it('typing ten numbers is in the format \"(xxx) xxx-xxxx\"', () => {\n      typeInInput('1234567');\n      expect(input.value).to.equal('(123) 456-7');\n      typeInInput('8');\n      expect(input.value).to.equal('(123) 456-78');\n      typeInInput('9');\n      expect(input.value).to.equal('(123) 456-789');\n      typeInInput('0');\n      expect(input.value).to.equal('(123) 456-7890');\n    });\n\n    it('typing non-numbers has no effect', () => {\n      typeInInput('a');\n      expect(input.value).to.equal('');\n      typeInInput('e');\n      expect(input.value).to.equal('');\n      typeInInput(' ');\n      expect(input.value).to.equal('');\n      typeInInput('(');\n      expect(input.value).to.equal('');\n      typeInInput('-');\n      expect(input.value).to.equal('');\n      typeInInput('\"');\n      expect(input.value).to.equal('');\n      typeInInput('123)');\n      expect(input.value).to.equal('(123');\n      typeInInput('456-');\n      expect(input.value).to.equal('(123) 456');\n      typeInInput('abcde -()');\n      expect(input.value).to.equal('(123) 456');\n    });\n\n    it('typing more than ten numbers has no effect', () => {\n      typeInInput('1234567890');\n      typeInInput('5');\n      typeInInput('1');\n      typeInInput('9');\n      expect(input.value).to.equal('(123) 456-7890');\n    });\n\n    it('pasted in numbers have correct formatting', () => {\n      pasteInInput('123');\n      expect(input.value).to.equal('(123');\n      pasteInInput('123');\n      expect(input.value).to.equal('(123) 123');\n      pasteInInput('0000');\n      expect(input.value).to.equal('(123) 123-0000');\n    });\n\n    it('pasting a complete number has correct formatting', () => {\n      pasteInInput('0123456987');\n      expect(input.value).to.equal('(012) 345-6987');\n    });\n\n    it('backspaces remove formatting and the numbers', () => {\n      typeInInput('0');\n      backspace();\n      expect(input.value).to.equal('');\n      typeInInput('0123456789');\n      backspace();\n      expect(input.value).to.equal('(012) 345-678');\n      backspace();\n      expect(input.value).to.equal('(012) 345-67');\n      backspace();\n      expect(input.value).to.equal('(012) 345-6');\n      backspace();\n      expect(input.value).to.equal('(012) 345');\n      backspace();\n      expect(input.value).to.equal('(012) 34');\n      backspace();\n      expect(input.value).to.equal('(012) 3');\n      backspace();\n      expect(input.value).to.equal('(012');\n      backspace();\n      expect(input.value).to.equal('(01');\n      backspace();\n      expect(input.value).to.equal('(0');\n      backspace();\n      expect(input.value).to.equal('');\n    });\n  });\n\n  describe('submit button', () => {\n    it('has correct text', () => {\n      switch(button.tagName) {\n        case 'BUTTON':\n          expect(button.textContent.trim()).to.equal('Submit');\n          break;\n        case 'INPUT':\n          if (button.type === 'button') {\n            expect(button.value).to.equal('Submit');\n          }\n          break;\n      }\n    });\n\n    it('is initially disabled', () => {\n      expect(button.disabled).to.be.true;\n    });\n\n    it('is enabled with a complete number', () => {\n      typeInInput('0123456789');\n      expect(button.disabled).to.be.false;\n    });\n\n    it('backspace on a complete number disables the button', () => {\n      typeInInput('0123456789');\n      expect(button.disabled).to.be.false;\n      backspace();\n      expect(button.disabled).to.be.true;\n      typeInInput('1');\n      expect(button.disabled).to.be.false;\n      backspace();\n      backspace();\n      expect(button.disabled).to.be.true;\n      typeInInput('1');\n      expect(button.disabled).to.be.true;\n      typeInInput('1');\n      expect(button.disabled).to.be.false;\n    });\n\n    it('clicking the button clears the input and disables the button', () => {\n      typeInInput('0123456789');\n      button.click();\n      expect(input.value).to.equal('');\n      expect(button.disabled).to.be.true;\n    });\n\n    it('after clicking submit, a new number can be input', () => {\n      typeInInput('0123456789');\n      button.click();\n      typeInInput('9876543210');\n      expect(input.value).to.equal('(987) 654-3210');\n      expect(button.disabled).to.be.false;\n    });\n  });\n});\n"
        },
        "testStrategy": "REACT_MOCHA",
        "uid": "phone-input",
        "video": {
            "annotations": [],
            "codeWalkthroughTime": null,
            "duration": 0,
            "instructor": "Conner Ardman",
            "overviewTime": null,
            "vimeoId": "741297731"
        }
    },
    "difficulty": null,
    "instructor": "Conner Ardman",
    "name": "Phone Input",
    "releaseDate": "2022-09-10T00:00:00Z",
    "type": "CODING_FRONTEND",
    "uid": "phone-input"
}