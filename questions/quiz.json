{
    "acl": {
        "isAvailable": true,
        "isFree": false,
        "isFreeForStudents": false,
        "productRequired": [
            "frontendexpert"
        ]
    },
    "category": "React Components",
    "contents": {
        "acl": {
            "isAvailable": true,
            "isFree": false,
            "isFreeForStudents": false,
            "productRequired": [
                "frontendexpert"
            ]
        },
        "category": "React Components",
        "hints": [
            "<p>\n  Try making the fetch request in a <span>useEffect</span> with an empty\n  dependency array to make sure it only runs on mount.\n</p>",
            "<p>\n  Buttons can have a <span>disabled</span> attribute, which prevents them from\n  being clicked on if set to true.\n</p>"
        ],
        "languageToWrite": "jsx",
        "name": "Quiz",
        "notes": "",
        "prompt": "<div class=\"html\">\n  <p>\n    You're given a CSS file for a multiple choice quiz, and you need\n    to implement the component using React.\n  </p>\n\n  <p>\n    When the component initially mounts, it should make an API request to the\n    quiz API at:\n  </p>\n  <pre><span class=\"CodeEditor-promptString CodeEditor-selectable\">https://api.frontendexpert.io/api/fe/quiz</span></pre>\n\n  <p>\n    This API expects GET requests with no query paramters. The API returns a\n    JSON formatted array of quiz questions. Each question is an object with\n    the question, an array of answers, and the correct answer. For example,\n    the correct answer to this question is \"useState\", because it is at\n    index 0:\n  </p>\n</div>\n<div class=\"code-wrapper prism\" style=\"margin-top: -15px\">\n  <pre class=\"line-numbers\"><code class=\"language-json\">{\n  \"question\": \"Which of the following is a built-in React hook?\",\n  \"answers\": [\n    \"useState\",\n    \"useFetch\",\n    \"useLocalStorage\",\n    \"useTimeout\"\n  ],\n  \"correctAnswer\": 0\n}</code></pre>\n</div>\n\n<div class=\"html\">\n  <p>\n    Once the request to the API returns, the first quiz question should be\n    displayed. The question should be in an <span>h1</span> at the top of the\n    component.\n  </p>\n\n  <p>\n    Below the question should be the answers, which should each be an\n    <span>h2</span> with the text content of the answer. Each answer should\n    also have an <span>answer</span> class. If an answer is clicked on, it\n    should also be given the <span>correct</span> or <span>incorrect</span>\n    class based on if the answer is the correct answer.\n  </p>\n\n  <p>\n    Only one answer should be selectable at a time, and clicking other answers\n    should have no effect until moving on to the next question.\n  </p>\n\n  <p>\n    Below the answers should be two buttons with the text of <span>Back</span>\n    and <span>Next</span> in that order. Both buttons should be initially\n    disabled. The next button should only be enabled when an answer has been\n    selected for the current question. When the next button is enabled and\n    clicked on, it should change the question to the next question. On the last\n    question, the next button should always be disabled.\n  </p>\n\n  <p>\n    The back button should be enabled whenever not currently on the first\n    question, even if an answer has not yet been selected. Clicking the back\n    button should return to the previous question, but with the previously\n    selected answer already selected.\n  </p>\n\n  <p>\n    The complete HTML output of the Quiz component might look something like\n    this after \"useFetch\" has been incorrectly selected on the first question:\n  </p>\n</div>\n<div class=\"code-wrapper prism\" style=\"margin-top: -15px\">\n  <pre\n    class=\"line-numbers\"\n  ><code class=\"language-markup\">&lt;h1&gt;Which of the following is a built-in React hook?&lt;/h1&gt;\n\n&lt;h2 class=\"answer\"&gt;useState&lt;/h2&gt;\n&lt;h2 class=\"answer incorrect\"&gt;useFetch&lt;/h2&gt;\n&lt;h2 class=\"answer\"&gt;useLocalStorage&lt;/h2&gt;\n&lt;h2 class=\"answer\"&gt;useTimeout&lt;/h2&gt;\n\n&lt;button disabled=\"true\"&gt;Back&lt;/button&gt;\n&lt;button&gt;Next&lt;/button&gt;</code></pre>\n</div>\n<div class=\"html\">\n  <p>\n    Your component has already been rendered to the DOM inside of a\n    <span>#root</span> div directly in the body with the CSS imported.\n  </p>\n</div>",
        "promptCode": {
            "css": "body {\n  background-color: #f6f9fc;\n}\n\nh1 {\n  text-align: center;\n}\n\nbutton, input[type=\"button\"] {\n  cursor: pointer;\n  padding: 12px;\n  font-size: 16px;\n  border-radius: 8px;\n  background-color: #02203c;\n  color: white;\n  transition: 0.5s;\n  position: absolute;\n}\n\nbutton:first-of-type, input[type=\"button\"]:first-of-type {\n  left: 16px;\n}\n\nbutton:last-of-type, input[type=\"button\"]:last-of-type {\n  right: 16px;\n}\n\nbutton:disabled, input[type=\"button\"]:disabled {\n  background-color: grey;\n}\n\n.answer {\n  cursor: pointer;\n  padding: 5px;\n  margin: 0;\n  border: 2px solid transparent; /* To prevent borders from moving content */\n}\n\n.answer::before {\n  content: '';\n  display: inline-block;\n  width: 0.5em;\n  height: 0.5em;\n  padding: 1px;\n  border: 1px solid black;\n  border-radius: 50%;\n  margin-right: 5px;\n  padding: 2px;\n}\n\n.answer.correct::before, .answer.incorrect::before {\n  background: black content-box;\n}\n\n.correct {\n  border: 2px solid green;\n}\n\n.incorrect {\n  border: 2px solid red;\n}"
        },
        "reactConfig": {
            "componentName": "Quiz"
        },
        "solutions": {
            "jsx": [
                "// Copyright \u00a9 2023 AlgoExpert LLC. All rights reserved.\n\nimport React from 'react';\n\nconst QUIZ_API_BASE_URL = 'https://api.frontendexpert.io/api/fe/quiz';\n\nexport default function Quiz() {\n  const [questions, setQuestions] = useState(null);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [chosenAnswers, setChosenAnswers] = useState([]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const response = await fetch(QUIZ_API_BASE_URL);\n      const jsonResponse = await response.json();\n      setQuestions(jsonResponse);\n    };\n\n    fetchData();\n  }, []);\n\n  if (questions == null) return null;\n\n  const updateChosenAnswers = (questionIndex, answerIndex) => {\n    const newChosenAnswers = [...chosenAnswers];\n    newChosenAnswers[questionIndex] = answerIndex;\n    setChosenAnswers(newChosenAnswers);\n  };\n\n  const currentQuestion = questions[currentQuestionIndex];\n  const isFirstQuestion = currentQuestionIndex === 0;\n  const isLastQuestion = currentQuestionIndex === questions.length - 1;\n\n  return (\n    <>\n      <h1>{currentQuestion.question}</h1>\n      {currentQuestion.answers.map((answer, answerIndex) => {\n        const chosenAnswer = chosenAnswers[currentQuestionIndex];\n        let className = 'answer';\n\n        if (chosenAnswer === answerIndex) {\n          className += currentQuestion.correctAnswer === chosenAnswer ? ' correct' : ' incorrect';\n        }\n\n        return (\n          <h2\n            key={answer}\n            className={className}\n            onClick={() => {\n              if (chosenAnswer != null) return;\n              updateChosenAnswers(currentQuestionIndex, answerIndex);\n            }}>\n            {answer}\n          </h2>\n        );\n      })}\n      <button\n        disabled={isFirstQuestion}\n        onClick={() => {\n          setCurrentQuestionIndex(currentQuestionIndex - 1);\n        }}>\n        Back\n      </button>\n      <button\n        disabled={isLastQuestion || chosenAnswers[currentQuestionIndex] == null}\n        onClick={() => {\n          setCurrentQuestionIndex(currentQuestionIndex + 1);\n        }}>\n        Next\n      </button>\n    </>\n  );\n}"
            ]
        },
        "startingCode": {
            "jsx": "import React from 'react';\n\nconst QUIZ_API_BASE_URL = 'https://api.frontendexpert.io/api/fe/quiz';\n\nexport default function Quiz() {\n  // Write your code here.\n\n  return (\n    <>\n      {/* Write your code here. */}\n    </>\n  );\n}"
        },
        "submissionStatistics": {
            "correctCount": 1151,
            "failureCount": 886
        },
        "testHarness": {
            "sandboxCode": "// This file is initialized with a few test cases.\n// Feel free to add, edit, or remove test cases in\n// this file as you see fit!\n\n/* ---------------------------------- *\n * ----- BROWSER TESTING SET-UP ----- *\n * ---------------------------------- */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport QuestionList from './program';\nimport {act} from 'react-dom/test-utils';\nconst {JSDOM} = require('jsdom');\nconst {getQuestions} = require('./data/api');\nconst chai = require('chai');\nconst {expect} = chai;\n\nlet rootContainer;\n\nconst resetDom = () => {\n  const dom = new JSDOM({\n    url: 'http://localhost:3000',\n    resources: 'usable',\n    pretendToBeVisual: true,\n  });\n\n  global.document = dom.window.document;\n  global.window = dom.window;\n\n  for (const [key, value] of Object.entries(React)) {\n    global[key] = value;\n  }\n\n  const convertStringToUrlObj = url => {\n    const [base, params] = url.split('?');\n    const paramPairs = params?.split('&');\n    const urlObj = new URL(base);\n    paramPairs?.forEach(paramStr => {\n      const [key, value] = paramStr.split('=');\n      urlObj.searchParams.set(key, value);\n    });\n    return urlObj;\n  };\n\n  global.fetch = url => {\n    const urlObj = typeof url === 'object' ? url : convertStringToUrlObj(url);\n    if (urlObj.origin + urlObj.pathname === 'https://api.frontendexpert.io/api/fe/quiz') {\n      const questions = getQuestions();\n      const response = {\n        status: 200,\n        ok: true,\n        statusText: 'OK',\n        type: 'cors',\n        url: urlObj.toString(),\n        redirected: false,\n        json: async () => questions,\n        text: async () => JSON.stringify(questions),\n      };\n      return Promise.resolve(response);\n    }\n\n    const response = {\n      status: 404,\n      ok: false,\n      statusText: 'Not Found',\n      type: 'cors',\n      url: urlObj.toString(),\n      redirected: false,\n    };\n    return Promise.resolve(response);\n  };\n\n  rootContainer = document.createElement('div');\n  rootContainer.id = 'root';\n  document.body.appendChild(rootContainer);\n\n  act(() => {\n    ReactDOM.render(<QuestionList />, rootContainer);\n  });\n};\n\nfunction waitForRender() {\n  return new Promise(function (resolve) {\n    setImmediate(resolve);\n  });\n}\n\n/* ---------------------------------- *\n * ----- BROWSER TESTING SET-UP ----- *\n * ---------------------------------- */\n\ndescribe('Quiz', () => {\n  beforeEach(async () => {\n    resetDom();\n    await waitForRender();\n  });\n\n  afterEach(() => {\n    ReactDOM.unmountComponentAtNode(rootContainer);\n    rootContainer.remove();\n    rootContainer = null;\n  });\n\n  it('initial question has correct heading', () => {\n    expect(document.querySelector('h1').textContent).to.equal(\n      'Which of the following is a built-in React hook?',\n    );\n  });\n\n  it('initial question has correct answers', () => {\n    const EXPECTED_ANSWERS = ['useState', 'useFetch', 'useLocalStorage', 'useTimeout'];\n    const answers = Array.from(document.querySelectorAll('.answer')).map(\n      answer => answer.textContent,\n    );\n\n    expect(answers).to.deep.equal(EXPECTED_ANSWERS);\n  });\n\n  it('answers have correct format', () => {\n    Array.from(document.querySelectorAll('.answer')).forEach(answer => {\n      expect(answer.nodeName).to.equal('H2');\n      expect(answer.className).to.equal('answer');\n    });\n  });\n\n  it('clicking a correct answser gives it the correct class', () => {\n    const answer = document.querySelector('.answer');\n    answer.click();\n    expect(answer.classList.contains('answer')).to.be.true;\n    expect(answer.classList.contains('correct')).to.be.true;\n    expect(answer.classList.contains('incorrect')).to.be.false;\n  });\n});\n",
            "unitTests": "/* ---------------------------------- *\n * ----- BROWSER TESTING SET-UP ----- *\n * ---------------------------------- */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport QuestionList from './program';\nimport {act} from 'react-dom/test-utils';\nconst {JSDOM} = require('jsdom');\nconst {getQuestions} = require('./data/api');\nconst chai = require('chai');\nconst spies = require('chai-spies');\nchai.use(spies);\nconst {expect, spy} = chai;\n\nlet rootContainer;\n\nconst resetSpies = () => {\n  spy.restore();\n  spy.on(global, 'fetch');\n};\n\nconst resetDom = () => {\n  const dom = new JSDOM({\n    url: 'http://localhost:3000',\n    resources: 'usable',\n    pretendToBeVisual: true,\n  });\n\n  global.document = dom.window.document;\n  global.window = dom.window;\n\n  for (const [key, value] of Object.entries(React)) {\n    global[key] = value;\n  }\n\n  const convertStringToUrlObj = url => {\n    const [base, params] = url.split('?');\n    const paramPairs = params?.split('&');\n    const urlObj = new URL(base);\n    paramPairs?.forEach(paramStr => {\n      const [key, value] = paramStr.split('=');\n      urlObj.searchParams.set(key, value);\n    });\n    return urlObj;\n  };\n\n  global.fetch = url => {\n    const urlObj = typeof url === 'object' ? url : convertStringToUrlObj(url);\n    if (urlObj.origin + urlObj.pathname === 'https://api.frontendexpert.io/api/fe/quiz') {\n      const questions = getQuestions();\n      const response = {\n        status: 200,\n        ok: true,\n        statusText: 'OK',\n        type: 'cors',\n        url: urlObj.toString(),\n        redirected: false,\n        json: async () => questions,\n        text: async () => JSON.stringify(questions),\n      };\n      return Promise.resolve(response);\n    }\n\n    const response = {\n      status: 404,\n      ok: false,\n      statusText: 'Not Found',\n      type: 'cors',\n      url: urlObj.toString(),\n      redirected: false,\n    };\n    return Promise.resolve(response);\n  };\n\n  // Reset spies before importing the JS.\n  resetSpies();\n\n  delete require.cache[require.resolve('./program.js')];\n  require('./program.js');\n\n  rootContainer = document.createElement('div');\n  rootContainer.id = 'root';\n  document.body.appendChild(rootContainer);\n\n  act(() => {\n    ReactDOM.render(<QuestionList />, rootContainer);\n  });\n};\n\nfunction waitForRender() {\n  return new Promise(function (resolve) {\n    setImmediate(resolve);\n  });\n}\n\n/* ---------------------------------- *\n * ----- BROWSER TESTING SET-UP ----- *\n * ---------------------------------- */\n\ndescribe('Quiz', () => {\n  beforeEach(async () => {\n    resetDom();\n    await waitForRender();\n  });\n\n  afterEach(() => {\n    ReactDOM.unmountComponentAtNode(rootContainer);\n    rootContainer.remove();\n    rootContainer = null;\n  });\n\n  it('initial question has correct heading', () => {\n    expect(document.querySelector('h1').textContent).to.equal(\n      'Which of the following is a built-in React hook?',\n    );\n  });\n\n  it('initial question has correct answers', () => {\n    const EXPECTED_ANSWERS = ['useState', 'useFetch', 'useLocalStorage', 'useTimeout'];\n    const answers = Array.from(document.querySelectorAll('.answer')).map(\n      answer => answer.textContent,\n    );\n\n    expect(answers).to.deep.equal(EXPECTED_ANSWERS);\n  });\n\n  it('answers have correct format', () => {\n    Array.from(document.querySelectorAll('.answer')).forEach(answer => {\n      expect(answer.nodeName).to.equal('H2');\n      expect(answer.className).to.equal('answer');\n    });\n  });\n\n  it('clicking a correct answser gives it the correct class', () => {\n    const answer = document.querySelector('.answer');\n    act(() => answer.click());\n    expect(answer.classList.contains('answer')).to.be.true;\n    expect(answer.classList.contains('correct')).to.be.true;\n    expect(answer.classList.contains('incorrect')).to.be.false;\n  });\n\n  it('clicking an incorrect answser gives it the correct class', () => {\n    const answer = document.querySelectorAll('.answer')[1];\n    act(() => answer.click());\n    expect(answer.classList.contains('answer')).to.be.true;\n    expect(answer.classList.contains('correct')).to.be.false;\n    expect(answer.classList.contains('incorrect')).to.be.true;\n  });\n\n  it('back button is initially disabled', () => {\n    const backBtn = document.querySelector('button, input[type=\"button\"]');\n    expect(backBtn.disabled).to.be.true;\n  });\n\n  it('next button is initially disabled', () => {\n    const nextBtn = document.querySelectorAll('button, input[type=\"button\"]')[1];\n    expect(nextBtn.disabled).to.be.true;\n  });\n\n  it('back button has correct text', () => {\n    const backBtn = document.querySelector('button, input[type=\"button\"]');\n    expect(backBtn.nodeName === 'BUTTON' ? backBtn.textContent : backBtn.value).to.equal('Back');\n  });\n\n  it('next button has correct text', () => {\n    const nextBtn = document.querySelectorAll('button, input[type=\"button\"]')[1];\n    expect(nextBtn.nodeName === 'BUTTON' ? nextBtn.textContent : nextBtn.value).to.equal('Next');\n  });\n\n  it('next button is enabled after selecting a correct answer', () => {\n    const [backBtn, nextBtn] = document.querySelectorAll('button, input[type=\"button\"]');\n    expect(backBtn.disabled).to.be.true;\n    expect(nextBtn.disabled).to.be.true;\n    const answer = document.querySelector('.answer');\n    act(() => answer.click());\n    expect(backBtn.disabled).to.be.true;\n    expect(nextBtn.disabled).to.be.false;\n  });\n\n  it('next button is enabled after selecting an incorrect answer', () => {\n    const [backBtn, nextBtn] = document.querySelectorAll('button, input[type=\"button\"]');\n    expect(backBtn.disabled).to.be.true;\n    expect(nextBtn.disabled).to.be.true;\n    const answer = document.querySelector('.answer');\n    act(() => answer.click());\n    expect(backBtn.disabled).to.be.true;\n    expect(nextBtn.disabled).to.be.false;\n  });\n\n  it('clicking next button loads the next question', () => {\n    const nextBtn = document.querySelectorAll('button, input[type=\"button\"]')[1];\n    const answer = document.querySelector('.answer');\n    act(() => answer.click());\n    act(() => nextBtn.click());\n    expect(document.querySelector('h1').textContent).to.equal(\n      'What is the correct order of these lifecycle phases?',\n    );\n\n    const EXPECTED_ANSWERS = [\n      'unmount, update, mount',\n      'mount, update, unmount',\n      'update, mount, unmount',\n      'mount, unmount, update',\n    ];\n    const answers = Array.from(document.querySelectorAll('.answer')).map(\n      answer => answer.textContent,\n    );\n\n    expect(answers).to.deep.equal(EXPECTED_ANSWERS);\n  });\n\n  it('clicking next button resets state', () => {\n    const nextBtn = document.querySelectorAll('button, input[type=\"button\"]')[1];\n    const answer = document.querySelector('.answer');\n    act(() => answer.click());\n    act(() => nextBtn.click());\n    expect(nextBtn.disabled).to.be.true;\n    expect(document.querySelector('.correct, .incorrect')).to.be.null;\n  });\n\n  it('back button enables after clicking next', () => {\n    const [backBtn, nextBtn] = document.querySelectorAll('button, input[type=\"button\"]');\n    const answer = document.querySelector('.answer');\n    act(() => answer.click());\n    act(() => nextBtn.click());\n    expect(backBtn.disabled).to.be.false;\n  });\n\n  it('an answer can be selected on the second question', () => {\n    const nextBtn = document.querySelectorAll('button, input[type=\"button\"]')[1];\n    let answer = document.querySelector('.answer');\n    act(() => answer.click());\n    act(() => nextBtn.click());\n    answer = document.querySelector('.answer');\n    act(() => answer.click());\n    expect(answer.classList.contains('answer')).to.be.true;\n    expect(answer.classList.contains('incorrect')).to.be.true;\n    expect(answer.classList.contains('correct')).to.be.false;\n    expect(nextBtn.disabled).to.be.false;\n  });\n\n  it('only one answer can be selected', () => {\n    const nextBtn = document.querySelectorAll('button, input[type=\"button\"]')[1];\n    const answers = document.querySelectorAll('.answer');\n    act(() => answers[1].click());\n    act(() => answers[0].click());\n    expect(answers[1].classList.contains('answer')).to.be.true;\n    expect(answers[1].classList.contains('incorrect')).to.be.true;\n    expect(answers[0].className).to.equal('answer');\n  });\n\n  it('next button disables on last answer', () => {\n    const [backBtn, nextBtn] = document.querySelectorAll('button, input[type=\"button\"]');\n    for (let i = 0; i < 2; i++) {\n      const answer = document.querySelector('.answer');\n      act(() => answer.click());\n      act(() => nextBtn.click());\n    }\n    expect(nextBtn.disabled).to.be.true;\n    act(() => backBtn.click());\n    expect(nextBtn.disabled).to.be.false;\n    act(() => nextBtn.click());\n    expect(nextBtn.disabled).to.be.true;\n  });\n\n  it('remembers previous answers when going back', () => {\n    const [backBtn, nextBtn] = document.querySelectorAll('button, input[type=\"button\"]');\n    for (let i = 0; i < 3; i++) {\n      const answer = document.querySelectorAll('.answer')[i];\n      act(() => answer.click());\n      if (i < 2) {\n        act(() => nextBtn.click());\n      }\n    }\n\n    let answers = document.querySelectorAll('.answer');\n    expect(answers[2].classList.contains('correct')).to.be.false;\n    expect(answers[2].classList.contains('incorrect')).to.be.true;\n    expect(document.querySelectorAll('.correct, .incorrect').length).to.equal(1);\n\n    act(() => backBtn.click());\n    answers = document.querySelectorAll('.answer');\n    expect(answers[1].classList.contains('correct')).to.be.true;\n    expect(answers[1].classList.contains('incorrect')).to.be.false;\n    expect(document.querySelectorAll('.correct, .incorrect').length).to.equal(1);\n\n    act(() => nextBtn.click());\n    answers = document.querySelectorAll('.answer');\n    expect(answers[2].classList.contains('correct')).to.be.false;\n    expect(answers[2].classList.contains('incorrect')).to.be.true;\n    expect(document.querySelectorAll('.correct, .incorrect').length).to.equal(1);\n\n    act(() => backBtn.click());\n    act(() => backBtn.click());\n    answers = document.querySelectorAll('.answer');\n    expect(answers[0].classList.contains('correct')).to.be.true;\n    expect(answers[0].classList.contains('incorrect')).to.be.false;\n    expect(document.querySelectorAll('.correct, .incorrect').length).to.equal(1);\n\n    expect(backBtn.disabled).to.be.true;\n    expect(nextBtn.disabled).to.be.false;\n  });\n\n  it('fetch is only called on mount', () => {\n    expect(global.fetch).to.have.been.called.exactly(1);\n\n    const [backBtn, nextBtn] = document.querySelectorAll('button, input[type=\"button\"]');\n\n    for (let i = 0; i < 3; i++) {\n      const answer = document.querySelector('.answer');\n      act(() => answer.click());\n      act(() => nextBtn.click());\n    }\n\n    for (let i = 0; i < 3; i++) {\n      act(() => backBtn.click());\n    }\n\n    for (let i = 0; i < 3; i++) {\n      const answer = document.querySelector('.answer');\n      act(() => answer.click());\n      act(() => answer.click());\n    }\n\n    expect(global.fetch).to.have.been.called.exactly(1);\n  });\n});\n"
        },
        "testStrategy": "REACT_MOCHA",
        "uid": "quiz",
        "video": {
            "annotations": [],
            "codeWalkthroughTime": null,
            "duration": 0,
            "instructor": "Conner Ardman",
            "overviewTime": null,
            "vimeoId": "710965916"
        }
    },
    "difficulty": null,
    "instructor": "Conner Ardman",
    "name": "Quiz",
    "releaseDate": "2022-05-24T00:00:00Z",
    "type": "CODING_FRONTEND",
    "uid": "quiz"
}