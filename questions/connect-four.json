{
    "acl": {
        "isAvailable": true,
        "isFree": false,
        "isFreeForStudents": false,
        "productRequired": [
            "frontendexpert"
        ]
    },
    "category": "React Components",
    "contents": {
        "acl": {
            "isAvailable": true,
            "isFree": false,
            "isFreeForStudents": false,
            "productRequired": [
                "frontendexpert"
            ]
        },
        "category": "React Components",
        "hints": [
            "<p>\n  Although we typically think of 2-dimensional arrays in the format\n  <span>>[row][col]</span>, it can be helpful to hold the board state in an\n  array formatted as <span>[col][row]</span>, since columns map directly to the\n  expected HTML markup.\n</p>",
            "<p>\n  Rather than checking the entire board for any win, try checking if just the\n  most recently placed tile created a win.\n</p>",
            "<p>\n  The <span>useReducer</span> hook can be helpful in this problem to seperate\n  the user interface from the game logic.\n</p>"
        ],
        "languageToWrite": "jsx",
        "name": "Connect Four",
        "notes": "",
        "prompt": "<div class=\"html\">\n  <p>\n    You're given a CSS file for a Connect Four game, and you need to implement\n    the component using React.\n  </p>\n\n  <p>\n    Connect Four is a simple 2 player game using a board with 7 columns and 6\n    rows. Each player takes turns, placing one tile at a time. When a tile is\n    placed in a column, it must fall down to the lowest possible row visually.\n    The first player to achieve four of their tiles in a row (horizontally,\n    vertically or diagonally) wins.\n  </p>\n\n  <p>\n    When the component first mounts, the board is empty. The board is a div\n    with the class of \"board\". Inside of this div, there are 7 other divs,\n    each with the class of \"column\" to represent one column. Each column then\n    contains 6 divs, each with the class of \"tile\", one for each row. The\n    first tile should correspond to the top row, while the last tile\n    corresponds to the bottom row. This initial output should look like this:\n  </p>\n</div>\n<div class=\"code-wrapper prism\" style=\"margin-top: -15px\">\n  <pre class=\"line-numbers\"><code class=\"language-markup\">&lt;div class=\"board\"&gt;\n  &lt;div class=\"column\"&gt;\n    &lt;div class=\"tile\"&gt;&lt;/div&gt; <!-- Top left tile -->\n    ... &lt;!-- 6 total tiles --&gt;\n    &lt;div class=\"tile\"&gt;&lt;/div&gt;\n  &lt;/div&gt;\n  ... &lt;!-- 7 total columns --&gt;\n  &lt;div class=\"column\"&gt;\n    &lt;div class=\"tile\"&gt;&lt;/div&gt;\n    ... &lt;!-- 6 total tiles --&gt;\n    &lt;div class=\"tile\"&gt;&lt;/div&gt; <!-- Bottom right tile -->\n  &lt;/div&gt;\n&lt;/div&gt;</code></pre>\n</div>\n\n<div class=\"html\">\n  <p>\n    Note that while there are various correct ways to create a board markup for\n    this style of game, your solution must follow this format in order for our\n    CSS and tests to work properly.\n  </p>\n\n  <p>\n    When the board is clicked on, a move is played for the current player,\n    starting with player 1. A tile is placed in the column that was clicked on,\n    at the lowest possible row. For example, clicking on the last column of a\n    new board would make a move for player one, taking the bottom right tile.\n  </p>\n\n  <p>\n    When a player claims a tile, that tile has a div nested inside of\n    it with the class of \"player\" as well as either \"player-1\" or \"player-2\",\n    depending on who claimed the tile. For example, after clicking on the last\n    column of a new board, the last tile would look like this:\n  </p>\n</div>\n<div class=\"code-wrapper prism\" style=\"margin-top: -15px\">\n  <pre class=\"line-numbers\"><code class=\"language-markup\">&lt;div class=\"tile\"&gt;\n  &lt;div class=\"player player-1\"&gt;&lt;/div&gt;\n&lt;/div&gt;</code></pre>\n</div>\n\n<div class=\"html\">\n  <p>\n    When a player wins, an h1 is added above the board with the text of\n    \"Player 1 Wins\" or \"Player 2 Wins\", depending on who won. At this point, the\n    game ends and thus clicking on the board should no longer make new moves. If\n    there are no more tiles remaining, then clicking on the board should no\n    longer have an effect, but no h1 is displayed.\n  </p>\n\n  <p>\n    When the game is over (either by a player winning or the board filling up),\n    a button with the text of \"Restart\" is added below the board. When this button\n    is clicked, the game completely resets, allowing for it to be played again.\n  </p>\n\n  <p>\n    Your component has already been rendered to the DOM inside of a\n    <span>#root</span> div directly in the body with the CSS imported.\n  </p>\n</div>",
        "promptCode": {
            "css": "body {\n  background-color: white;\n}\n\nh1 {\n  margin-bottom: 0;\n}\n\n.board {\n  display: flex;\n}\n\n.column {\n  display: flex;\n  flex-direction: column;\n}\n\n.tile {\n  width: 40px;\n  height: 40px;\n  border: 1px solid black;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.player {\n  width: 80%;\n  height: 80%;\n  border-radius: 50%;\n}\n\n.player-1 {\n  background-color: red;\n}\n\n.player-2 {\n  background-color: blue;\n}\n\nbutton, input[type=\"button\"] {\n  padding: 10px;\n  margin-top: 5px;\n  border-radius: 10px;\n  font-size: 16px;\n  background-color: #02203c;\n  color: white;\n}\n"
        },
        "reactConfig": {
            "componentName": "ConnectFour"
        },
        "solutions": {
            "jsx": [
                "// Copyright \u00a9 2023 AlgoExpert LLC. All rights reserved.\n\nimport React, { useReducer } from 'react';\n\nconst NUM_COL = 7;\nconst NUM_ROW = 6;\nconst NUM_TO_WIN = 4;\n\nexport default function ConnectFour() {\n  /* The board is a 2D Array with the following format:\n    [\n       [topLeft, ..., bottomLeft]\n       ...\n       [topRight, ..., bottomRight]\n    ]\n  */\n  const [{ board, winner, isGameOver }, dispatchBoard] = useReducer(reducer, genEmptyState());\n\n  return (\n    <>\n      {winner != null && <h1>Player {winner} Wins</h1>}\n\n      <div className=\"board\">\n        {board.map((colEntries, colIndex) => {\n          const onClickCol = () => {\n            dispatchBoard({ type: 'move', colIndex });\n          };\n\n          return <Column key={colIndex} entries={colEntries} onClick={onClickCol} />;\n        })}\n      </div>\n\n      {isGameOver && (\n        <button onClick={() => {\n          dispatchBoard({ type: 'restart' });\n        }}>\n          Restart\n        </button>\n      )}\n    </>\n  );\n}\n\nfunction Column({ entries, onClick }) {\n  return (\n    <div className=\"column\" onClick={onClick}>\n      {entries.map((entry, rowIndex) => {\n        return (\n          <div key={rowIndex} className=\"tile\">\n            {entry != null && <div className={`player player-${entry}`} />}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'restart':\n      return genEmptyState();\n    case 'move':\n      const relevantCol = state.board[action.colIndex];\n      const colIsFull = relevantCol[0] != null;\n      if (state.isGameOver || colIsFull) return state;\n\n      const { board, currentPlayer } = state;\n      const boardClone = [...board];\n      const colClone = [...relevantCol];\n\n      const rowIndex = colClone.lastIndexOf(null);\n      colClone[rowIndex] = currentPlayer;\n      boardClone[action.colIndex] = colClone;\n\n      const didWinVertical = didWin(rowIndex, action.colIndex, 1, 0, boardClone, currentPlayer);\n      const didWinHorizontal = didWin(rowIndex, action.colIndex, 0, 1, boardClone, currentPlayer);\n      const didWinDiagonal =\n        didWin(rowIndex, action.colIndex, 1, 1, boardClone, currentPlayer) ||\n        didWin(rowIndex, action.colIndex, -1, 1, boardClone, currentPlayer);\n\n      const winner = didWinVertical || didWinHorizontal || didWinDiagonal ? currentPlayer : null;\n      const isBoardFull = boardClone.every(column => column.every(value => value != null));\n      return {\n        board: boardClone,\n        currentPlayer: state.currentPlayer === 1 ? 2 : 1,\n        winner,\n        isGameOver: winner != null || isBoardFull,\n      };\n    default:\n      throw new Error('Unexpected action type');\n  }\n}\n\nfunction genEmptyState() {\n  return {\n    board: new Array(NUM_COL).fill(null).map(_ => new Array(NUM_ROW).fill(null)),\n    currentPlayer: 1,\n    winner: null,\n    isGameOver: false,\n  };\n}\n\nfunction didWin(startingRow, startingCol, rowIncrement, colIncrement, board, currentPlayer) {\n  let numInARow = 0;\n  let currRow = startingRow;\n  let currCol = startingCol;\n  while (currCol < NUM_COL && currRow < NUM_ROW && board[currCol][currRow] === currentPlayer) {\n    numInARow++;\n    currRow += rowIncrement;\n    currCol += colIncrement;\n  }\n\n  currRow = startingRow - rowIncrement;\n  currCol = startingCol - colIncrement;\n  while (currCol >= 0 && currRow >= 0 && board[currCol][currRow] === currentPlayer) {\n    numInARow++;\n    currRow -= rowIncrement;\n    currCol -= colIncrement;\n  }\n\n  return numInARow >= NUM_TO_WIN;\n}"
            ]
        },
        "startingCode": {
            "jsx": "import React from 'react';\n\nexport default function ConnectFour() {\n  // Write your code here.\n\n  return (\n    <>\n      {/* Write your code here. */}\n    </>\n  );\n}"
        },
        "submissionStatistics": {
            "correctCount": 321,
            "failureCount": 223
        },
        "testHarness": {
            "sandboxCode": "// This file is initialized with a few test cases.\n// Feel free to add, edit, or remove test cases in\n// this file as you see fit!\n\n/* ---------------------------------- *\n * ----- BROWSER TESTING SET-UP ----- *\n * ---------------------------------- */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport ConnectFour from './program';\nimport {act} from 'react-dom/test-utils';\nconst {JSDOM} = require('jsdom');\nconst chai = require('chai');\nconst {expect} = chai;\n\nlet rootContainer;\nlet board;\n\nconst resetDom = () => {\n  const dom = new JSDOM({\n    url: 'http://localhost:3000',\n    resources: 'usable',\n    pretendToBeVisual: true,\n  });\n\n  global.document = dom.window.document;\n  global.window = dom.window;\n\n  for (const [key, value] of Object.entries(React)) {\n    global[key] = value;\n  }\n\n  rootContainer = document.createElement('div');\n  rootContainer.id = 'root';\n  document.body.appendChild(rootContainer);\n\n  act(() => {\n    ReactDOM.render(<ConnectFour />, rootContainer);\n  });\n\n  board = document.querySelector('.board');\n};\n\nfunction waitForRender() {\n  return new Promise(function (resolve) {\n    setImmediate(resolve);\n  });\n}\n\n/* ---------------------------------- *\n * ----- BROWSER TESTING SET-UP ----- *\n * ---------------------------------- */\n\ndescribe('Connect Four', () => {\n  beforeEach(() => {\n    resetDom();\n  });\n\n  afterEach(() => {\n    ReactDOM.unmountComponentAtNode(rootContainer);\n    rootContainer.remove();\n    rootContainer = null;\n  });\n\n  describe('game mechanics', () => {\n    it('no h1 is initially rendered', () => {\n      expect(document.querySelector('h1')).to.be.null;\n    });\n\n    it('initial board has the correct markup', () => {\n      expect(board.tagName).to.equal('DIV');\n      expect(board.children.length).to.equal(7);\n      Array.from(board.children).forEach(column => {\n        expect(column.tagName).to.equal('DIV');\n        expect(column.className).to.equal('column');\n        expect(column.children.length).to.equal(6);\n\n        Array.from(column.children).forEach(tile => {\n          expect(tile.tagName).to.equal('DIV');\n          expect(tile.className).to.equal('tile');\n          expect(tile.children.length).to.equal(0);\n        });\n      });\n    });\n\n    it('clicking the first column claims the correct tile', async () => {\n      board.children[0].children[0].click();\n      await waitForRender();\n      const tileLocation = board.children[0].children[5];\n      expect(tileLocation.children.length).to.equal(1);\n      expect(document.querySelectorAll('.player').length).to.equal(1);\n    });\n\n    it('claimed tiles have correct markup', async () => {\n      board.children[0].children[0].click();\n      await waitForRender();\n      const tile = board.children[0].children[5].children[0];\n      expect(tile.tagName).to.equal('DIV');\n      expect(tile.classList.contains('player')).to.be.true;\n      expect(tile.classList.contains('player-1')).to.be.true;\n      expect(tile.classList.length).to.equal(2);\n    });\n  });\n\n  describe('win conditions', () => {\n    it('can win horizontally from the bottom left', async () => {\n      const locations = [0, 6, 1, 6, 2, 6, 3];\n      for (let i = 0; i < 7; i++) {\n        board.children[locations[i]].children[0].click();\n        await waitForRender();\n      }\n\n      const h1 = document.querySelector('h1');\n      expect(h1.textContent).to.equal('Player 1 Wins');\n\n      board.children[0].children[0].click();\n      const tile = board.children[0].children[5].children[0];\n      expect(tile.classList.contains('player-1')).to.be.true;\n      expect(tile.classList.length).to.equal(2);\n      expect(board.children[0].children[4].children.length).to.equal(0);\n    });\n  });\n});\n",
            "unitTests": "/* ---------------------------------- *\n * ----- BROWSER TESTING SET-UP ----- *\n * ---------------------------------- */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport ConnectFour from './program';\nimport {act} from 'react-dom/test-utils';\nconst {JSDOM} = require('jsdom');\nconst chai = require('chai');\nconst {expect} = chai;\n\nlet rootContainer;\nlet board;\n\nconst resetDom = () => {\n  const dom = new JSDOM({\n    url: 'http://localhost:3000',\n    resources: 'usable',\n    pretendToBeVisual: true,\n  });\n\n  global.document = dom.window.document;\n  global.window = dom.window;\n\n  for (const [key, value] of Object.entries(React)) {\n    global[key] = value;\n  }\n\n  rootContainer = document.createElement('div');\n  rootContainer.id = 'root';\n  document.body.appendChild(rootContainer);\n\n  act(() => {\n    ReactDOM.render(<ConnectFour />, rootContainer);\n  });\n\n  board = document.querySelector('.board');\n};\n\nfunction waitForRender() {\n  return new Promise(function (resolve) {\n    setImmediate(resolve);\n  });\n}\n\n/* ---------------------------------- *\n * ----- BROWSER TESTING SET-UP ----- *\n * ---------------------------------- */\n\ndescribe('Connect Four', () => {\n  beforeEach(() => {\n    resetDom();\n  });\n\n  afterEach(() => {\n    ReactDOM.unmountComponentAtNode(rootContainer);\n    rootContainer.remove();\n    rootContainer = null;\n  });\n\n  describe('game mechanics', () => {\n    it('no h1 is initially rendered', () => {\n      expect(document.querySelector('h1')).to.be.null;\n    });\n\n    it('no restart button is initially rendered', () => {\n      expect(document.querySelector('button, input[type=\"button\"]')).to.be.null;\n    });\n\n    it('initial board has the correct markup', () => {\n      expect(board.tagName).to.equal('DIV');\n      expect(board.children.length).to.equal(7);\n      Array.from(board.children).forEach(column => {\n        expect(column.tagName).to.equal('DIV');\n        expect(column.className).to.equal('column');\n        expect(column.children.length).to.equal(6);\n\n        Array.from(column.children).forEach(tile => {\n          expect(tile.tagName).to.equal('DIV');\n          expect(tile.className).to.equal('tile');\n          expect(tile.children.length).to.equal(0);\n        });\n      });\n    });\n\n    it('clicking the first column claims the correct tile', async () => {\n      board.children[0].children[0].click();\n      await waitForRender();\n      const tileLocation = board.children[0].children[5];\n      expect(tileLocation.children.length).to.equal(1);\n      expect(document.querySelectorAll('.player').length).to.equal(1);\n    });\n\n    it('claimed tiles have correct markup', async () => {\n      board.children[0].children[0].click();\n      await waitForRender();\n      const tile = board.children[0].children[5].children[0];\n      expect(tile.tagName).to.equal('DIV');\n      expect(tile.classList.contains('player')).to.be.true;\n      expect(tile.classList.contains('player-1')).to.be.true;\n      expect(tile.classList.length).to.equal(2);\n    });\n\n    it('clicking a second column claims a tile for player 2', async () => {\n      board.children[0].children[0].click();\n      await waitForRender();\n      board.children[1].children[0].click();\n      await waitForRender();\n\n      const tile1 = board.children[0].children[5].children[0];\n      expect(tile1.classList.contains('player')).to.be.true;\n      expect(tile1.classList.contains('player-1')).to.be.true;\n      expect(tile1.classList.length).to.equal(2);\n\n      const tile2 = board.children[1].children[5].children[0];\n      expect(tile2.classList.contains('player')).to.be.true;\n      expect(tile2.classList.contains('player-2')).to.be.true;\n      expect(tile2.classList.length).to.equal(2);\n\n      expect(document.querySelectorAll('.player').length).to.equal(2);\n    });\n\n    it('clicking the same column multiple times begins stacking claimed tiles', async () => {\n      board.children[0].children[0].click();\n      await waitForRender();\n      board.children[0].children[0].click();\n      await waitForRender();\n      board.children[0].children[0].click();\n      await waitForRender();\n\n      const tile1 = board.children[0].children[5].children[0];\n      expect(tile1.classList.contains('player')).to.be.true;\n      expect(tile1.classList.contains('player-1')).to.be.true;\n      expect(tile1.classList.length).to.equal(2);\n\n      const tile2 = board.children[0].children[4].children[0];\n      expect(tile2.classList.contains('player')).to.be.true;\n      expect(tile2.classList.contains('player-2')).to.be.true;\n      expect(tile2.classList.length).to.equal(2);\n\n      const tile3 = board.children[0].children[5].children[0];\n      expect(tile3.classList.contains('player')).to.be.true;\n      expect(tile3.classList.contains('player-1')).to.be.true;\n      expect(tile3.classList.length).to.equal(2);\n\n      board.children[2].children[0].click();\n      await waitForRender();\n      board.children[2].children[0].click();\n      await waitForRender();\n      const tile4 = board.children[2].children[5].children[0];\n      expect(tile4.classList.contains('player')).to.be.true;\n      expect(tile4.classList.contains('player-2')).to.be.true;\n      expect(tile4.classList.length).to.equal(2);\n\n      const tile5 = board.children[2].children[4].children[0];\n      expect(tile5.classList.contains('player')).to.be.true;\n      expect(tile5.classList.contains('player-1')).to.be.true;\n      expect(tile5.classList.length).to.equal(2);\n\n      expect(document.querySelectorAll('.player').length).to.equal(5);\n    });\n\n    it('every column can be clicked on', async () => {\n      for (let i = 0; i < board.children.length; i++) {\n        const column = board.children[i];\n        const player = i % 2 === 0 ? '1' : '2';\n        column.children[0].click();\n        await waitForRender();\n        const tile = column.children[5].children[0];\n        expect(tile.classList.contains('player')).to.be.true;\n        expect(tile.classList.contains(`player-${player}`)).to.be.true;\n        expect(tile.classList.length).to.equal(2);\n      }\n    });\n\n    it('entire board can be filled without a winner, causing the game to end', async () => {\n      const columnOrder = [0, 2, 4, 6, 1, 3, 5];\n      for (let row = board.children[0].children.length - 1; row >= 0; row--) {\n        for (let i = 0; i < board.children.length; i++) {\n          const columnLocation = columnOrder[i];\n          const column = board.children[columnLocation];\n          const player = row % 2 !== i % 2  ? '1' : '2';\n          column.children[0].click();\n          await waitForRender();\n          const tile = column.children[row].children[0];\n          expect(tile.classList.contains('player')).to.be.true;\n          expect(tile.classList.contains(`player-${player}`)).to.be.true;\n          expect(tile.classList.length).to.equal(2);\n        }\n      }\n\n      for (let i = 0; i < 4; i++) {\n        board.children[0].children[0].click();\n        await waitForRender();\n      }\n\n      const correctPlayerOrder = ['2', '1', '2', '1', '2', '1'];\n      Array.from(board.children[0]).forEach((cell, i) => {\n        const player = correctPlayerOrder[i];\n        const tile = cell.children[0];\n        expect(tile.classList.contains('player')).to.be.true;\n        expect(tile.classList.contains(`player-${player}`)).to.be.true;\n        expect(tile.classList.length).to.equal(2);\n      });\n      expect(document.querySelector('h1')).to.be.null;\n      expect(document.querySelector('button, input[type=\"button\"]')).to.not.be.null;\n    });\n  });\n\n  describe('win conditions', () => {\n    it('can win horizontally from the bottom left', async () => {\n      const locations = [0, 6, 1, 6, 2, 6, 3];\n      for (let i = 0; i < 7; i++) {\n        board.children[locations[i]].children[0].click();\n        await waitForRender();\n      }\n\n      const h1 = document.querySelector('h1');\n      expect(h1.textContent).to.equal('Player 1 Wins');\n\n      const restartButton = document.querySelector('button, input[type=\"button\"]');\n      expect(restartButton.textContent).to.equal('Restart');\n\n      board.children[0].children[0].click();\n      const tile = board.children[0].children[5].children[0];\n      expect(tile.classList.contains('player-1')).to.be.true;\n      expect(tile.classList.length).to.equal(2);\n      expect(board.children[0].children[4].children.length).to.equal(0);\n    });\n\n    it('can win horizontally from the bottom right', async () => {\n      const locations = [0, 6, 0, 5, 0, 4, 1, 3];\n      for (let i = 0; i < 8; i++) {\n        board.children[locations[i]].children[0].click();\n        await waitForRender();\n      }\n\n      const h1 = document.querySelector('h1');\n      expect(h1.textContent).to.equal('Player 2 Wins');\n\n      const restartButton = document.querySelector('button, input[type=\"button\"]');\n      expect(restartButton.textContent).to.equal('Restart');\n\n      board.children[6].children[0].click();\n      const tile = board.children[6].children[5].children[0];\n      expect(tile.classList.contains('player-2')).to.be.true;\n      expect(tile.classList.length).to.equal(2);\n      expect(board.children[6].children[4].children.length).to.equal(0);\n    });\n\n    it('can win horizontally in the middle with 5 in a row', async () => {\n      const locations = [2, 6, 1, 6, 4, 6, 5, 0, 3];\n      for (let i = 0; i < 9; i++) {\n        board.children[locations[i]].children[0].click();\n        await waitForRender();\n      }\n\n      const h1 = document.querySelector('h1');\n      expect(h1.textContent).to.equal('Player 1 Wins');\n\n      const restartButton = document.querySelector('button, input[type=\"button\"]');\n      expect(restartButton.textContent).to.equal('Restart');\n\n      board.children[0].children[0].click();\n      const tile = board.children[0].children[5].children[0];\n      expect(tile.classList.contains('player-2')).to.be.true;\n      expect(tile.classList.length).to.equal(2);\n      expect(board.children[0].children[4].children.length).to.equal(0);\n    });\n\n    it('can win horizontally multiple rows up', async () => {\n      const locations = [0, 1, 2, 3, 0, 1, 2, 3, 0, 4, 1, 4, 2, 5, 3];\n      for (let i = 0; i < 15; i++) {\n        board.children[locations[i]].children[0].click();\n        await waitForRender();\n      }\n\n      const h1 = document.querySelector('h1');\n      expect(h1.textContent).to.equal('Player 1 Wins');\n\n      board.children[0].children[0].click();\n      expect(board.children[0].querySelectorAll('.player-1').length).to.equal(3);\n      expect(board.children[0].querySelectorAll('.player-2').length).to.equal(0);\n    });\n\n    it('can win vertically', async () => {\n      const locations = [0, 1, 0, 1, 0, 1, 0];\n      for (let i = 0; i < 7; i++) {\n        board.children[locations[i]].children[0].click();\n        await waitForRender();\n      }\n\n      const h1 = document.querySelector('h1');\n      expect(h1.textContent).to.equal('Player 1 Wins');\n\n      const restartButton = document.querySelector('button, input[type=\"button\"]');\n      expect(restartButton.textContent).to.equal('Restart');\n\n      board.children[0].children[0].click();\n      expect(board.children[0].querySelectorAll('.player-1').length).to.equal(4);\n      expect(board.children[0].querySelectorAll('.player-2').length).to.equal(0);\n    });\n\n    it('can win vertically at the top', async () => {\n      const locations = [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 2, 1];\n      for (let i = 0; i < 13; i++) {\n        board.children[locations[i]].children[0].click();\n        await waitForRender();\n      }\n\n      const h1 = document.querySelector('h1');\n      expect(h1.textContent).to.equal('Player 1 Wins');\n\n      const restartButton = document.querySelector('button, input[type=\"button\"]');\n      expect(restartButton.textContent).to.equal('Restart');\n\n      board.children[2].children[0].click();\n      expect(board.children[2].querySelectorAll('.player-1').length).to.equal(0);\n      expect(board.children[2].querySelectorAll('.player-2').length).to.equal(1);\n    });\n\n    it('can win diagonally top left to bottom right', async () => {\n      const locations = [4, 3, 3, 2, 2, 1, 2, 1, 1, 5, 1];\n      for (let i = 0; i < 11; i++) {\n        board.children[locations[i]].children[0].click();\n        await waitForRender();\n      }\n\n      const h1 = document.querySelector('h1');\n      expect(h1.textContent).to.equal('Player 1 Wins');\n\n      const restartButton = document.querySelector('button, input[type=\"button\"]');\n      expect(restartButton.textContent).to.equal('Restart');\n\n      board.children[0].children[0].click();\n      expect(board.children[0].querySelectorAll('.player-1').length).to.equal(0);\n      expect(board.children[0].querySelectorAll('.player-2').length).to.equal(0);\n    });\n\n    it('can win diagonally top left to bottom right with more than 4 in a row', async () => {\n      const locations = [4, 3, 3, 2, 2, 1, 2, 1, 1, 5, 0, 0, 0, 0, 0, 5, 1];\n      for (let i = 0; i < 17; i++) {\n        board.children[locations[i]].children[0].click();\n        await waitForRender();\n      }\n\n      const h1 = document.querySelector('h1');\n      expect(h1.textContent).to.equal('Player 1 Wins');\n\n      board.children[0].children[0].click();\n      expect(board.children[0].querySelectorAll('.player-1').length).to.equal(3);\n      expect(board.children[0].querySelectorAll('.player-2').length).to.equal(2);\n    });\n\n    it('can win diagonally top right to bottom left', async () => {\n      const locations = [0, 1, 2, 3, 0, 1, 1, 2, 2, 3, 3, 6, 2, 6, 3, 6, 3];\n      for (let i = 0; i < 17; i++) {\n        board.children[locations[i]].children[0].click();\n        await waitForRender();\n      }\n\n      const h1 = document.querySelector('h1');\n      expect(h1.textContent).to.equal('Player 1 Wins');\n\n      const restartButton = document.querySelector('button, input[type=\"button\"]');\n      expect(restartButton.textContent).to.equal('Restart');\n\n      board.children[0].children[0].click();\n      expect(board.children[0].querySelectorAll('.player-1').length).to.equal(2);\n      expect(board.children[0].querySelectorAll('.player-2').length).to.equal(0);\n    });\n\n    it('can win diagonally top right to bottom left with more than 4 in a row', async () => {\n      const locations = [6, 0, 1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 6, 3, 6, 2];\n      for (let i = 0; i < 18; i++) {\n        board.children[locations[i]].children[0].click();\n        await waitForRender();\n      }\n\n      const h1 = document.querySelector('h1');\n      expect(h1.textContent).to.equal('Player 2 Wins');\n\n      const restartButton = document.querySelector('button, input[type=\"button\"]');\n      expect(restartButton.textContent).to.equal('Restart');\n\n      board.children[0].children[0].click();\n      expect(board.children[0].querySelectorAll('.player-1').length).to.equal(0);\n      expect(board.children[0].querySelectorAll('.player-2').length).to.equal(1);\n    });\n\n    it('after winning, restart button resets the game', async () => {\n      const locations = [0, 6, 1, 6, 2, 6, 3];\n      for (let i = 0; i < 7; i++) {\n        board.children[locations[i]].children[0].click();\n        await waitForRender();\n      }\n\n      const restartButton = document.querySelector('button, input[type=\"button\"]');\n      restartButton.click();\n      await waitForRender();\n\n      expect(document.querySelector('h1')).to.be.null;\n      expect(document.querySelector('button, input[type=\"button\"]')).to.be.null;\n      expect(document.querySelector('.player')).to.be.null;\n    });\n\n    it('can be won multiple times after restart', async () => {\n      let locations = [0, 6, 1, 6, 2, 6, 3];\n      for (let i = 0; i < 7; i++) {\n        board.children[locations[i]].children[0].click();\n        await waitForRender();\n      }\n\n      let h1 = document.querySelector('h1');\n      expect(h1.textContent).to.equal('Player 1 Wins');\n\n      const restartButton = document.querySelector('button, input[type=\"button\"]');\n      restartButton.click();\n      await waitForRender();\n\n      locations = [0, 6, 0, 5, 0, 4, 1, 3];\n      for (let i = 0; i < 8; i++) {\n        board.children[locations[i]].children[0].click();\n        await waitForRender();\n      }\n\n      h1 = document.querySelector('h1');\n      expect(h1.textContent).to.equal('Player 2 Wins');\n    });\n  });\n});\n"
        },
        "testStrategy": "REACT_MOCHA",
        "uid": "connect-four",
        "video": {
            "annotations": [],
            "codeWalkthroughTime": null,
            "duration": 0,
            "instructor": "Conner Ardman",
            "overviewTime": null,
            "vimeoId": "742885120"
        }
    },
    "difficulty": null,
    "instructor": "Conner Ardman",
    "name": "Connect Four",
    "releaseDate": "2022-09-10T00:00:00Z",
    "type": "CODING_FRONTEND",
    "uid": "connect-four"
}