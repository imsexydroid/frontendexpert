{
    "acl": {
        "isAvailable": true,
        "isFree": false,
        "isFreeForStudents": false,
        "productRequired": [
            "frontendexpert"
        ]
    },
    "category": "React Hooks",
    "contents": {
        "acl": {
            "isAvailable": true,
            "isFree": false,
            "isFreeForStudents": false,
            "productRequired": [
                "frontendexpert"
            ]
        },
        "assessmentSummary": null,
        "category": "React Hooks",
        "changelog": [],
        "customInputVars": [],
        "difficulty": 0,
        "hints": [
            "<p>\n  The history needs to be kept between renders, but it updates to it should\n  not cause rerenders. Is there a React hook that can achieve this?\n</p>\n",
            "\n<p>\n  The <span>useRef</span> hook will be useful for keeping track of the history,\n  since updates to refs do not cause rerenders.\n</p>"
        ],
        "isLongOutput": false,
        "isSlowExecution": false,
        "jsonTests": [],
        "languagesSupported": [
            "jsx"
        ],
        "name": "useStateWithHistory",
        "notes": "",
        "prompt": "<div class=\"html\">\n  <p>\n    Write a <span>useStateWithHistory</span> custom hook that takes in an\n    <span>initialState</span> value.\n  </p>\n\n  <p>\n    Calling <span>useStateWithHistory</span> should work the same as\n    <span>useState</span>, but with an added history with the ability\n    to scroll through previous state values.\n  </p>\n\n  <p>\n    The <span>useStateWithHistory</span> hook should return an array with\n    five entries in this order:\n  </p>\n\n  <ol>\n    <li>\n      The current value.\n    </li>\n    <li>\n      A setter function to update the value. This function should take in\n      the new value as a parameter, just like the setter function returned\n      by <span>useState</span>.\n    </li>\n    <li>\n      A function to \"go back\" to the previous state value. Calling this function\n      should update the state to the previous value, and it should cause a\n      re-render just as setting the state to a new value would. If there is no\n      previous state value, this function should have no effect.\n    </li>\n    <li>\n      A function to \"go forward\" to the next state value. Calling this function\n      should update the state to the next value in the history, and it should\n      cause a re-render just as setting the state to a new value would. If\n      there is no next value in the history, this function should have no effect.\n    </li>\n    <li>\n      The history of values as an array, initially containing only the\n      initial value. Every time the setter function is called, the new value\n      should be appended to the end of the history array.\n    </li>\n  </ol>\n\n  <p>\n    If the setter function is called after having gone backwards to a previous\n    value, the value should be updated to the new value. The new value should be\n    appended to the end of the history array as if \"go forwards\" had been\n    called until reaching the end of the history array before setting a new\n    value (see sample usage below).\n  </p>\n\n  <p>\n    For simplicity, you can assume the <span>initialState</span> value and the\n    value passed to the setter function will always be primitives.\n  </p>\n\n  <h3>Sample Usage</h3>\n</div>\n<div class=\"code-wrapper prism\" style=\"margin-top: -10px\">\n  <pre\n    class=\"line-numbers\"\n  ><code class=\"language-javascript\">const [\n  value, // 10\n  setValue, // function\n  goBack, // function\n  goForward, // function\n  history // [10]\n] = useStateWithHistory(10);\n\nsetValue(15); // value=15, history=[10, 15]\nsetValue(20); // value=20, history=[10, 15, 20]\ngoBack(); // value=15 history=[10, 15, 20]\ngoBack(); // value=10, history=[10, 15, 20]\ngoBack(); // value=10, history=[10, 15, 20]\ngoForward(); // value=15, history=[10, 15, 20]\nsetValue(25); // value=25, history=[10, 15, 20, 25]\nsetValue(30); // value=30, history=[10, 15, 20, 25, 30]\ngoBack(); // value=25, history=[10, 15, 20, 25, 30]\ngoForward(); // value=30, history=[10, 15, 20, 25, 30]\ngoForward(); // value=30, history=[10, 15, 20, 25, 30]\n</code></pre>\n</div>",
        "releaseDate": "2022-05-24T00:00:00Z",
        "resources": {
            "jsx": {
                "language": "jsx",
                "sandboxCode": "// This file is initialized with a few test cases.\n// Feel free to add, edit, or remove test cases in\n// this file as you see fit!\n\n/* ---------------------------------- *\n * ----- BROWSER TESTING SET-UP ----- *\n * ---------------------------------- */\nimport React, {useState, StrictMode} from 'react';\nimport ReactDOM from 'react-dom';\nimport {act} from 'react-dom/test-utils';\nconst {JSDOM} = require('jsdom');\nimport {useStateWithHistory} from './program';\nconst chai = require('chai');\nconst {expect} = chai;\n\nlet rootContainer;\nlet nextValue;\n\nconst resetDom = () => {\n  const dom = new JSDOM({\n    url: 'http://localhost:3000',\n    resources: 'usable',\n    pretendToBeVisual: true,\n  });\n\n  global.document = dom.window.document;\n  global.window = dom.window;\n\n  for (const [key, value] of Object.entries(React)) {\n    global[key] = value;\n  }\n\n  delete require.cache[require.resolve('./program.js')];\n  require('./program.js');\n\n  rootContainer = document.createElement('div');\n  document.body.appendChild(rootContainer);\n  nextValue = undefined;\n};\n\n/* ---------------------------------- *\n * ----- BROWSER TESTING SET-UP ----- *\n * ---------------------------------- */\n\nfunction TestComponent({initialState}) {\n  const [value, setValue, goBack, goForward, history] = useStateWithHistory(initialState);\n\n  return (\n    <>\n      <button id=\"set-value\" onClick={() => setValue(nextValue)}>\n        Set Value\n      </button>\n      <button id=\"go-back\" onClick={goBack}>\n        Go Back\n      </button>\n      <button id=\"go-forward\" onClick={goForward}>\n        Go Forward\n      </button>\n      <p id=\"value\">{value}</p>\n      <p id=\"value-type\">{typeof value}</p>\n      <p id=\"history\">{JSON.stringify(history)}</p>\n    </>\n  );\n}\n\ndescribe('useStateWithHistory', () => {\n  beforeEach(() => {\n    resetDom();\n  });\n\n  describe('state values', () => {\n    it('have correct initial value', () => {\n      act(() => {\n        ReactDOM.render(<TestComponent initialState=\"test\" />, rootContainer);\n      });\n\n      expect(document.getElementById('value').textContent).to.equal('test');\n    });\n\n    it('can be updated', () => {\n      act(() => {\n        ReactDOM.render(<TestComponent initialState=\"test\" />, rootContainer);\n      });\n\n      nextValue = 'hello world';\n      act(() => {\n        document.getElementById('set-value').click();\n      });\n      expect(document.getElementById('value').textContent).to.equal('hello world');\n    });\n  });\n\n  describe('history functions', () => {\n    it('goBack goes to the previous state value', () => {\n      act(() => {\n        ReactDOM.render(<TestComponent initialState=\"test\" />, rootContainer);\n      });\n\n      nextValue = 'hello world';\n      act(() => {\n        document.getElementById('set-value').click();\n      });\n      expect(document.getElementById('value').textContent).to.equal('hello world');\n      act(() => {\n        document.getElementById('go-back').click();\n      });\n      expect(document.getElementById('value').textContent).to.equal('test');\n    });\n  });\n\n  describe('history array', () => {\n    it('contains initial value on mount', () => {\n      act(() => {\n        ReactDOM.render(<TestComponent initialState=\"test\" />, rootContainer);\n      });\n      expect(document.getElementById('history').textContent).to.equal('[\"test\"]');\n    });\n  });\n});\n",
                "solutions": [
                    "// Copyright \u00a9 2023 AlgoExpert LLC. All rights reserved.\n\nimport {useState, useRef} from 'react';\n\nfunction useStateWithHistory(initialState) {\n  const [state, setStateInternal] = useState(initialState);\n  const history = useRef([state]);\n  const historyIndex = useRef(0);\n\n  const setState = newState => {\n    history.current.push(newState);\n    historyIndex.current = history.current.length - 1;\n    setStateInternal(newState);\n  };\n\n  const goBack = () => {\n    if (historyIndex.current === 0) return;\n\n    historyIndex.current--;\n    setStateInternal(history.current[historyIndex.current]);\n  };\n\n  const goForward = () => {\n    if (historyIndex.current >= history.current.length - 1) return;\n\n    historyIndex.current++;\n    setStateInternal(history.current[historyIndex.current]);\n  };\n\n  return [state, setState, goBack, goForward, history.current];\n}\n\n// Do not edit the line below.\nexports.useStateWithHistory = useStateWithHistory;\n"
                ],
                "solutionsDisabled": false,
                "startingCode": "import React from 'react';\n\nfunction useStateWithHistory(initialState) {\n  // Write your code here.\n}\n\n// Do not edit the line below.\nexports.useStateWithHistory = useStateWithHistory;\n",
                "unitTests": "/* ---------------------------------- *\n * ----- BROWSER TESTING SET-UP ----- *\n * ---------------------------------- */\nimport React, {useState, StrictMode} from 'react';\nimport ReactDOM from 'react-dom';\nimport {act} from 'react-dom/test-utils';\nconst {JSDOM} = require('jsdom');\nimport {useStateWithHistory} from './program';\nconst chai = require('chai');\nconst {expect} = chai;\n\nlet rootContainer;\nlet nextValue;\n\nconst resetDom = () => {\n  const dom = new JSDOM({\n    url: 'http://localhost:3000',\n    resources: 'usable',\n    pretendToBeVisual: true,\n  });\n\n  global.document = dom.window.document;\n  global.window = dom.window;\n\n  for (const [key, value] of Object.entries(React)) {\n    global[key] = value;\n  }\n\n  delete require.cache[require.resolve('./program.js')];\n  require('./program.js');\n\n  rootContainer = document.createElement('div');\n  document.body.appendChild(rootContainer);\n  nextValue = undefined;\n};\n\n/* ---------------------------------- *\n * ----- BROWSER TESTING SET-UP ----- *\n * ---------------------------------- */\n\nfunction TestComponent({initialState}) {\n  const [value, setValue, goBack, goForward, history] = useStateWithHistory(initialState);\n\n  return (\n    <>\n      <button id=\"set-value\" onClick={() => setValue(nextValue)}>\n        Set Value\n      </button>\n      <button id=\"go-back\" onClick={goBack}>\n        Go Back\n      </button>\n      <button id=\"go-forward\" onClick={goForward}>\n        Go Forward\n      </button>\n      <p id=\"value\">{value}</p>\n      <p id=\"value-type\">{typeof value}</p>\n      <p id=\"history\">{JSON.stringify(history)}</p>\n    </>\n  );\n}\n\ndescribe('useStateWithHistory', () => {\n  beforeEach(() => {\n    resetDom();\n  });\n\n  describe('state values', () => {\n    it('have correct initial value', () => {\n      act(() => {\n        ReactDOM.render(<TestComponent initialState=\"test\" />, rootContainer);\n      });\n\n      expect(document.getElementById('value').textContent).to.equal('test');\n    });\n\n    it('can be updated', () => {\n      act(() => {\n        ReactDOM.render(<TestComponent initialState=\"test\" />, rootContainer);\n      });\n\n      nextValue = 'hello world';\n      act(() => {\n        document.getElementById('set-value').click();\n      });\n      expect(document.getElementById('value').textContent).to.equal('hello world');\n    });\n\n    it('can be updated multiple times with different types', () => {\n      act(() => {\n        ReactDOM.render(<TestComponent initialState=\"test\" />, rootContainer);\n      });\n\n      nextValue = 'hello world';\n      act(() => {\n        document.getElementById('set-value').click();\n      });\n      expect(document.getElementById('value').textContent).to.equal('hello world');\n      expect(document.getElementById('value-type').textContent).to.equal('string');\n\n      nextValue = 123;\n      act(() => {\n        document.getElementById('set-value').click();\n      });\n      expect(document.getElementById('value').textContent).to.equal('123');\n      expect(document.getElementById('value-type').textContent).to.equal('number');\n    });\n  });\n\n  describe('history functions', () => {\n    it('goBack goes to the previous state value', () => {\n      act(() => {\n        ReactDOM.render(<TestComponent initialState=\"test\" />, rootContainer);\n      });\n\n      nextValue = 'hello world';\n      act(() => {\n        document.getElementById('set-value').click();\n      });\n      expect(document.getElementById('value').textContent).to.equal('hello world');\n      act(() => {\n        document.getElementById('go-back').click();\n      });\n      expect(document.getElementById('value').textContent).to.equal('test');\n    });\n\n    it('goBack with no previous value has no effect', () => {\n      act(() => {\n        ReactDOM.render(<TestComponent initialState=\"test\" />, rootContainer);\n      });\n      act(() => {\n        document.getElementById('go-back').click();\n      });\n      expect(document.getElementById('value').textContent).to.equal('test');\n      nextValue = 'hello world';\n      act(() => {\n        document.getElementById('set-value').click();\n      });\n      expect(document.getElementById('value').textContent).to.equal('hello world');\n      act(() => {\n        document.getElementById('go-back').click();\n      });\n      act(() => {\n        document.getElementById('go-back').click();\n      });\n      expect(document.getElementById('value').textContent).to.equal('test');\n    });\n\n    it('goForward goes to the next state value', () => {\n      act(() => {\n        ReactDOM.render(<TestComponent initialState=\"test\" />, rootContainer);\n      });\n\n      nextValue = 'hello world';\n      act(() => {\n        document.getElementById('set-value').click();\n      });\n      act(() => {\n        document.getElementById('go-back').click();\n      });\n      act(() => {\n        document.getElementById('go-forward').click();\n      });\n      expect(document.getElementById('value').textContent).to.equal('hello world');\n    });\n\n    it('goForward with no next value has no effect', () => {\n      act(() => {\n        ReactDOM.render(<TestComponent initialState=\"test\" />, rootContainer);\n      });\n      act(() => {\n        document.getElementById('go-forward').click();\n      });\n      expect(document.getElementById('value').textContent).to.equal('test');\n      nextValue = 'hello world';\n      act(() => {\n        document.getElementById('set-value').click();\n      });\n      act(() => {\n        document.getElementById('go-back').click();\n      });\n      act(() => {\n        document.getElementById('go-forward').click();\n      });\n      act(() => {\n        document.getElementById('go-forward').click();\n      });\n      expect(document.getElementById('value').textContent).to.equal('hello world');\n    });\n  });\n\n  describe('history array', () => {\n    it('contains initial value on mount', () => {\n      act(() => {\n        ReactDOM.render(<TestComponent initialState=\"test\" />, rootContainer);\n      });\n      expect(document.getElementById('history').textContent).to.equal('[\"test\"]');\n    });\n\n    it('contains new values on set state', () => {\n      act(() => {\n        ReactDOM.render(<TestComponent initialState=\"test\" />, rootContainer);\n      });\n\n      nextValue = 'hello world';\n      act(() => {\n        document.getElementById('set-value').click();\n      });\n      expect(document.getElementById('history').textContent).to.equal('[\"test\",\"hello world\"]');\n\n      nextValue = '1234';\n      act(() => {\n        document.getElementById('set-value').click();\n      });\n      expect(document.getElementById('history').textContent).to.equal(\n        '[\"test\",\"hello world\",\"1234\"]',\n      );\n    });\n\n    it('does not change on goBack or goForward', () => {\n      act(() => {\n        ReactDOM.render(<TestComponent initialState=\"test\" />, rootContainer);\n      });\n\n      nextValue = 'hello world';\n      act(() => {\n        document.getElementById('set-value').click();\n      });\n\n      const currentHistory = '[\"test\",\"hello world\"]';\n      for (let i = 0; i < 3; i++) {\n        act(() => {\n          document.getElementById('go-back').click();\n        });\n        expect(document.getElementById('history').textContent).to.equal(currentHistory);\n      }\n      for (let i = 0; i < 3; i++) {\n        act(() => {\n          document.getElementById('go-forward').click();\n        });\n        expect(document.getElementById('history').textContent).to.equal(currentHistory);\n      }\n    });\n\n    it('new values are appended to the end, regardless of calling goBack', () => {\n      act(() => {\n        ReactDOM.render(<TestComponent initialState=\"test\" />, rootContainer);\n      });\n\n      nextValue = 'hello world';\n      act(() => {\n        document.getElementById('set-value').click();\n      });\n      nextValue = '1234';\n      act(() => {\n        document.getElementById('set-value').click();\n      });\n\n      act(() => {\n        document.getElementById('go-back').click();\n      });\n      nextValue = '5678';\n      act(() => {\n        document.getElementById('set-value').click();\n      });\n\n      expect(document.getElementById('history').textContent).to.equal(\n        '[\"test\",\"hello world\",\"1234\",\"5678\"]',\n      );\n    });\n\n    it('works correctly with two instances of state', () => {\n      function TestComponentTwoInstances() {\n        const [num, setNum, goBackNum, goForwardNum, historyNum] = useStateWithHistory(0);\n\n        const [str, setStr, goBackStr, goForwardStr, historyStr] = useStateWithHistory('');\n\n        return (\n          <>\n            <button id=\"set-num\" onClick={() => setNum(nextValue)}>\n              Set Num\n            </button>\n            <button id=\"set-str\" onClick={() => setStr(nextValue)}>\n              Set Str\n            </button>\n            <button id=\"go-back-num\" onClick={goBackNum}>\n              Go Back\n            </button>\n            <button id=\"go-forward-num\" onClick={goForwardNum}>\n              Go Forward\n            </button>\n            <button id=\"go-back-str\" onClick={goBackStr}>\n              Go Back\n            </button>\n            <button id=\"go-forward-str\" onClick={goForwardStr}>\n              Go Forward\n            </button>\n            <p id=\"num\">{num}</p>\n            <p id=\"str\">{str}</p>\n            <p id=\"history-num\">{JSON.stringify(historyNum)}</p>\n            <p id=\"history-str\">{JSON.stringify(historyStr)}</p>\n          </>\n        );\n      }\n\n      act(() => {\n        ReactDOM.render(<TestComponentTwoInstances />, rootContainer);\n      });\n      expect(document.getElementById('num').textContent).to.equal('0');\n      expect(document.getElementById('str').textContent).to.equal('');\n\n      nextValue = 5;\n      act(() => {\n        document.getElementById('set-num').click();\n      });\n      expect(document.getElementById('num').textContent).to.equal('5');\n      expect(document.getElementById('str').textContent).to.equal('');\n\n      act(() => {\n        document.getElementById('go-back-num').click();\n      });\n      expect(document.getElementById('num').textContent).to.equal('0');\n      expect(document.getElementById('str').textContent).to.equal('');\n\n      act(() => {\n        document.getElementById('go-forward-num').click();\n      });\n      expect(document.getElementById('num').textContent).to.equal('5');\n      expect(document.getElementById('str').textContent).to.equal('');\n\n      nextValue = 'hello world';\n      act(() => {\n        document.getElementById('set-str').click();\n      });\n      expect(document.getElementById('num').textContent).to.equal('5');\n      expect(document.getElementById('str').textContent).to.equal('hello world');\n\n      act(() => {\n        document.getElementById('go-back-num').click();\n      });\n      act(() => {\n        document.getElementById('go-back-str').click();\n      });\n      expect(document.getElementById('num').textContent).to.equal('0');\n      expect(document.getElementById('str').textContent).to.equal('');\n      expect(document.getElementById('history-num').textContent).to.equal('[0,5]');\n      expect(document.getElementById('history-str').textContent).to.equal('[\"\",\"hello world\"]');\n\n      act(() => {\n        document.getElementById('go-forward-num').click();\n      });\n      act(() => {\n        document.getElementById('go-forward-str').click();\n      });\n      expect(document.getElementById('num').textContent).to.equal('5');\n      expect(document.getElementById('str').textContent).to.equal('hello world');\n      expect(document.getElementById('history-num').textContent).to.equal('[0,5]');\n      expect(document.getElementById('history-str').textContent).to.equal('[\"\",\"hello world\"]');\n    });\n  });\n});\n"
            }
        },
        "spaceTime": "",
        "submissionStatistics": {
            "correctCount": 1082,
            "failureCount": 184
        },
        "testStrategy": "SANDBOX_ONLY",
        "tests": [],
        "uid": "useStateWithHistory",
        "version": 0,
        "video": {
            "annotations": [],
            "codeWalkthroughTime": null,
            "duration": 0,
            "instructor": "Conner Ardman",
            "overviewTime": null,
            "vimeoId": "707075087"
        },
        "visualization": {
            "inputType": null,
            "outputType": null
        }
    },
    "difficulty": 0,
    "instructor": "Conner Ardman",
    "name": "useStateWithHistory",
    "releaseDate": "2022-05-24T00:00:00Z",
    "type": "CODING_STANDARD",
    "uid": "useStateWithHistory"
}