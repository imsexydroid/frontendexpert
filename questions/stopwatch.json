{
    "acl": {
        "isAvailable": true,
        "isFree": false,
        "isFreeForStudents": false,
        "productRequired": [
            "frontendexpert"
        ]
    },
    "category": "DOM Manipulation",
    "contents": {
        "acl": {
            "isAvailable": true,
            "isFree": false,
            "isFreeForStudents": false,
            "productRequired": [
                "frontendexpert"
            ]
        },
        "category": "DOM Manipulation",
        "hints": [
            "<p>\n  There are two possible solutions to this problem, one using <span>requestAnimationFrame</span>,\n  and one using <span>setInterval</span>.\n</p>",
            "<p>An element can be disabled or enabled by changing the <span>disabled</span> property or using the <span>setAttribute</span> method.</p>",
            "<p>\n  There are two ways to keep track of how many milliseconds have elapsed. <span>Date.now()</span>\n  will return the number of milliseconds since January 1st, 1970. Alternatively,\n  <span>performance.now()</span> will return the number of milliseconds since the\n  time origin of the page, but with much deeper precision beyond milliseconds.\n  Either are fine for this problem, but we recommend <span>Date.now()</span> as the\n  problem does not need the extra precision.\n</p>",
            "<p>Both <span>requestAnimationFrame</span> and <span>setInterval</span> return IDs that can be useful for stopping the timer.</p>",
            "<p>Animation frames can be cancelled with <span>cancelAnimationFrame(id)</span>, and intervals can be cancelled using <span>clearInterval(id)</span>.</p>",
            "<p>The remainder operator <span>%</span> along with <span>Math.floor</span> can be useful for converting elapsed time from milliseconds into the proper format.</p>"
        ],
        "languageToWrite": "javascript",
        "name": "Stopwatch",
        "notes": "<div class=\"html\">\n<p>\n  At the 15:01 timestamp in the video explanation of this question, we handle\n  the case when the <span>stringNumber</span>'s length is greater than the\n  <span>desiredLength</span>.\n</p>\n<p>\n  This will actually never happen, because we mod the milliseconds by 1000 and\n  the seconds by 60.\n</p>\n<p>\n  It would happen when minutes exceed 99, but the prompt tells us not to worry\n  about times greater than <span>59:59:999</span>. Also, if we had to handle\n  such times, we'd simply mod the minutes by 60.\n</p>\n</div>",
        "prompt": "<div class=\"html\">\n  <p>\n    You're given HTML and CSS files for a simple stopwatch, and you need to make\n    the stopwatch functional using JavaScript.\n  </p>\n  <p>\n    The stopwatch has a timer, which is meant to be controlled by the\n    stopwatch's three buttons: a start button, a stop button, and a reset\n    button. The stopwatch starts out in its idle state, with the timer at\n    <span>00:00:00</span> and the start button as the only enabled button.\n  </p>\n  <p>The stopwatch should have the following functionality:</p>\n  <ul>\n    <li>\n      When the start button is pressed from the idle state, the timer should\n      start counting up from <span>00:00:00</span>.\n    </li>\n    <li>\n      While the timer is counting up, the stop button should be enabled, and the\n      start and reset buttons should be disabled.\n    </li>\n    <li>When the stop button is pressed, the timer should pause.</li>\n    <li>\n      While the timer is paused, the stop button should be disabled, and the\n      start and reset buttons should be enabled.\n    </li>\n    <li>\n      When the start button is pressed from the paused state, the timer should\n      resume counting up from its previous time.\n    </li>\n    <li>\n      When the reset button is pressed from the paused state, the entire\n      stopwatch should go back to its original idle state.\n    </li>\n    <li>\n      The timer should be in the format\n      <span>minutes:seconds:milliseconds</span>, with minutes and seconds having\n      two digits and milliseconds having three digits. For example, if 2\n      minutes, 15 seconds, and 350 milliseconds have elapsed, the timer should\n      read <span>02:15:350</span>.\n    </li>\n    <li>You don't need to handle times greater than <span>59:59:999</span>.</li>\n  </ul>\n  <p>\n    Your JavaScript code has already been linked to the pre-written HTML code\n    via a deferred script tag.\n  </p>\n</div>",
        "promptCode": {
            "css": "#stopwatch {\n  display: grid;\n  width: 250px;\n  height: 250px;\n  border-radius: 50%;\n  background-color: grey;\n  color: white;\n  text-align: center;\n  grid-column-gap: 12px;\n  align-content: center;\n  justify-content: center;\n  grid-template-areas:\n    \"header header header\"\n    \"timer timer timer\"\n    \"start stop reset\";\n}\n\nh1 {\n  margin: -20px 0 0 0;\n  grid-area: header;\n}\n\nbutton {\n  font-size: 16px;\n  cursor: pointer;\n}\n\nbutton:disabled {\n  cursor: default;\n}\n\n#start-button {\n  grid-area: start;\n}\n\n#stop-button {\n  grid-area: stop;\n}\n\n#reset-button {\n  grid-area: reset;\n}\n\n#timer {\n  margin: 12px;\n  font-size: 24px;\n  font-weight: bold;\n  font-family: monospace;\n  grid-area: timer;\n}\n",
            "html": "<div id=\"stopwatch\">\n  <h1>Stopwatch</h1>\n  <div id=\"timer\" role=\"timer\">00:00:000</div>\n  <button id=\"start-button\">Start</button>\n  <button id=\"stop-button\" disabled>Stop</button>\n  <button id=\"reset-button\" disabled>Reset</button>\n</div>\n"
        },
        "reactConfig": null,
        "solutions": {
            "javascript": [
                "// Copyright \u00a9 2023 AlgoExpert LLC. All rights reserved.\n\nlet timerID;\nlet lastTimerStartTime = 0;\nlet millisElapsedBeforeLastStart = 0;\n\nconst timer = document.getElementById('timer');\nconst startButton = document.getElementById('start-button');\nconst stopButton = document.getElementById('stop-button');\nconst resetButton = document.getElementById('reset-button');\n\nstartButton.addEventListener('click', startTimer);\nstopButton.addEventListener('click', stopTimer);\nresetButton.addEventListener('click', resetTimer);\n\nfunction startTimer() {\n  startButton.disabled = true;\n  stopButton.disabled = false;\n  resetButton.disabled = true;\n\n  lastTimerStartTime = Date.now();\n\n  timerID = requestAnimationFrame(updateTimer);\n}\n\nfunction stopTimer() {\n  startButton.disabled = false;\n  stopButton.disabled = true;\n  resetButton.disabled = false;\n\n  millisElapsedBeforeLastStart += Date.now() - lastTimerStartTime;\n\n  cancelAnimationFrame(timerID);\n}\n\nfunction resetTimer() {\n  resetButton.disabled = true;\n  timer.textContent = '00:00:000';\n\n  millisElapsedBeforeLastStart = 0;\n}\n\nfunction updateTimer() {\n  const millisElapsed = Date.now() - lastTimerStartTime + millisElapsedBeforeLastStart;\n  const secondsElapsed = millisElapsed / 1000;\n  const minutesElapsed = secondsElapsed / 60;\n\n  const millisText = formatNumber(millisElapsed % 1000, 3);\n  const secondsText = formatNumber(Math.floor(secondsElapsed) % 60, 2);\n  const minutesText = formatNumber(Math.floor(minutesElapsed), 2);\n\n  timer.textContent = `${minutesText}:${secondsText}:${millisText}`;\n\n  timerID = requestAnimationFrame(updateTimer);\n}\n\nfunction formatNumber(number, desiredLength) {\n  const stringNumber = String(number);\n  return stringNumber.padStart(desiredLength, '0');\n}",
                "// Copyright \u00a9 2023 AlgoExpert LLC. All rights reserved.\n\nconst INTERVAL_MS = 1000 / 60;\n\nlet timerID;\nlet lastTimerStartTime = 0;\nlet millisElapsedBeforeLastStart = 0;\n\nconst timer = document.getElementById('timer');\nconst startButton = document.getElementById('start-button');\nconst stopButton = document.getElementById('stop-button');\nconst resetButton = document.getElementById('reset-button');\n\nstartButton.addEventListener('click', startTimer);\nstopButton.addEventListener('click', stopTimer);\nresetButton.addEventListener('click', resetTimer);\n\nfunction startTimer() {\n  startButton.disabled = true;\n  stopButton.disabled = false;\n  resetButton.disabled = true;\n\n  lastTimerStartTime = Date.now();\n\n  timerID = setInterval(updateTimer, INTERVAL_MS);\n}\n\nfunction stopTimer() {\n  startButton.disabled = false;\n  stopButton.disabled = true;\n  resetButton.disabled = false;\n\n  millisElapsedBeforeLastStart += Date.now() - lastTimerStartTime;\n\n  clearInterval(timerID);\n}\n\nfunction resetTimer() {\n  resetButton.disabled = true;\n  timer.textContent = '00:00:000';\n\n  millisElapsedBeforeLastStart = 0;\n}\n\nfunction updateTimer() {\n  const millisElapsed = Date.now() - lastTimerStartTime + millisElapsedBeforeLastStart;\n  const secondsElapsed = millisElapsed / 1000;\n  const minutesElapsed = secondsElapsed / 60;\n\n  const millisText = formatNumber(millisElapsed % 1000, 3);\n  const secondsText = formatNumber(Math.floor(secondsElapsed) % 60, 2);\n  const minutesText = formatNumber(Math.floor(minutesElapsed), 2);\n\n  timer.textContent = `${minutesText}:${secondsText}:${millisText}`;\n}\n\nfunction formatNumber(number, desiredLength) {\n  const stringNumber = String(number);\n  return stringNumber.padStart(desiredLength, '0');\n}"
            ]
        },
        "startingCode": {
            "javascript": "// Write your code here.\n"
        },
        "submissionStatistics": {
            "correctCount": 1346,
            "failureCount": 979
        },
        "testHarness": {
            "sandboxCode": "// This file is initialized with a few test cases.\n// Feel free to add, edit, or remove test cases in\n// this file as you see fit!\n\n/* ---------------------------------- *\n * ----- BROWSER TESTING SET-UP ----- *\n * ---------------------------------- */\nconst {JSDOM} = require('jsdom');\nconst {readFileSync} = require('fs');\nconst {expect} = require('chai');\nconst FakeTimers = require('@sinonjs/fake-timers');\n\nconst html = readFileSync('data/index.html');\nconst clock = FakeTimers.install();\n\nlet timer;\nlet startButton;\nlet stopButton;\nlet resetButton;\n\nconst resetDom = () => {\n  const dom = new JSDOM(html, {\n    resources: 'usable',\n    pretendToBeVisual: true,\n  });\n\n  global.document = dom.window.document;\n  global.window = dom.window;\n  global.requestAnimationFrame = (callback) => {\n    return dom.window.requestAnimationFrame(() => callback(performance.now()));\n  };\n  global.cancelAnimationFrame = dom.window.cancelAnimationFrame;\n\n  Object.defineProperty(window.HTMLElement.prototype, 'innerText', {\n    configurable: true,\n    get() {\n      return this.textContent;\n    },\n    set(val) {\n      this.textContent = val;\n    },\n  });\n\n  delete require.cache[require.resolve('./program.js')];\n  require('./program.js');\n\n  timer = document.getElementById('timer');\n  startButton = document.getElementById('start-button');\n  stopButton = document.getElementById('stop-button');\n  resetButton = document.getElementById('reset-button');\n};\n/* ---------------------------------- *\n * ----- BROWSER TESTING SET-UP ----- *\n * ---------------------------------- */\n\nconst TIMER_FORMAT_REGEX = /[[0-9]{2}:[0-9]{2}:[0-9]{3}/;\n\nconst assertTimerMilliseconds = expectedMilliseconds => {\n  // Timer can be within `DELTA_MS` milliseconds from `expectedMilliseconds`.\n  const DELTA_MS = 20;\n  const timerMilliseconds = timerStringToMilliseconds(timer.textContent);\n  expect(timerMilliseconds).to.be.closeTo(expectedMilliseconds, DELTA_MS);\n};\n\nconst timerStringToMilliseconds = timeString => {\n  const [minutes, seconds, milliseconds] = timeString.split(':').map(Number);\n  return minutes * 60 * 1000 + seconds * 1000 + milliseconds;\n};\n\ndescribe('stopwatch', () => {\n  beforeEach(() => {\n    resetDom();\n    clock.reset();\n  });\n\n  describe('active state', () => {\n    beforeEach(() => {\n      startButton.click();\n    });\n\n    describe('buttons', () => {\n      it('start button should be disabled', () => {\n        expect(startButton.disabled).to.be.equal(true);\n      });\n\n      it('stop button should be enabled', () => {\n        expect(stopButton.disabled).to.be.equal(false);\n      });\n\n      it('reset button should be disabled', () => {\n        expect(resetButton.disabled).to.be.equal(true);\n      });\n    });\n\n    describe('timer', () => {\n      it('should have the correct format', () => {\n        expect(timer.textContent).to.match(TIMER_FORMAT_REGEX);\n      });\n\n      it('should count up correctly', () => {\n        clock.tick(1000);\n        assertTimerMilliseconds(1000);\n        clock.tick(1000);\n        assertTimerMilliseconds(2000);\n        clock.tick(1000);\n        assertTimerMilliseconds(3000);\n      });\n    });\n  });\n});\n",
            "unitTests": "/* ---------------------------------- *\n * ----- BROWSER TESTING SET-UP ----- *\n * ---------------------------------- */\nconst {JSDOM} = require('jsdom');\nconst {readFileSync} = require('fs');\nconst {expect} = require('chai');\nconst FakeTimers = require('@sinonjs/fake-timers');\n\nconst html = readFileSync('data/index.html');\nconst clock = FakeTimers.install();\n\nlet timer;\nlet startButton;\nlet stopButton;\nlet resetButton;\n\nconst resetDom = () => {\n  const dom = new JSDOM(html, {\n    resources: 'usable',\n    pretendToBeVisual: true,\n  });\n\n  global.document = dom.window.document;\n  global.window = dom.window;\n  global.requestAnimationFrame = (callback) => {\n    return dom.window.requestAnimationFrame(() => callback(performance.now()));\n  };\n  global.cancelAnimationFrame = dom.window.cancelAnimationFrame;\n\n  Object.defineProperty(window.HTMLElement.prototype, 'innerText', {\n    configurable: true,\n    get() {\n      return this.textContent;\n    },\n    set(val) {\n      this.textContent = val;\n    },\n  });\n\n  delete require.cache[require.resolve('./program.js')];\n  require('./program.js');\n\n  timer = document.getElementById('timer');\n  startButton = document.getElementById('start-button');\n  stopButton = document.getElementById('stop-button');\n  resetButton = document.getElementById('reset-button');\n};\n/* ---------------------------------- *\n * ----- BROWSER TESTING SET-UP ----- *\n * ---------------------------------- */\n\nconst TIMER_FORMAT_REGEX = /[[0-9]{2}:[0-9]{2}:[0-9]{3}/;\n\nconst assertTimerMilliseconds = expectedMilliseconds => {\n  // Timer can be within `DELTA_MS` milliseconds from `expectedMilliseconds`.\n  const DELTA_MS = 20;\n  const timerMilliseconds = timerStringToMilliseconds(timer.textContent);\n  expect(timerMilliseconds).to.be.closeTo(expectedMilliseconds, DELTA_MS);\n};\n\nconst timerStringToMilliseconds = timeString => {\n  const [minutes, seconds, milliseconds] = timeString.split(':').map(Number);\n  return minutes * 60 * 1000 + seconds * 1000 + milliseconds;\n};\n\ndescribe('stopwatch', () => {\n  beforeEach(() => {\n    resetDom();\n    clock.reset();\n  });\n\n  describe('idle state', () => {\n    describe('buttons', () => {\n      it('start button should be enabled', () => {\n        expect(startButton.disabled).to.be.equal(false);\n      });\n\n      it('stop button should be disabled', () => {\n        expect(stopButton.disabled).to.be.equal(true);\n      });\n\n      it('reset button should be disabled', () => {\n        expect(resetButton.disabled).to.be.equal(true);\n      });\n    });\n\n    describe('timer', () => {\n      it('should be at 00:00:000', () => {\n        expect(timer.textContent).to.equal('00:00:000');\n      });\n\n      it('should be paused', () => {\n        clock.tick(1000);\n        assertTimerMilliseconds(0);\n      });\n    });\n  });\n\n  describe('active state', () => {\n    beforeEach(() => {\n      startButton.click();\n    });\n\n    describe('buttons', () => {\n      it('start button should be disabled', () => {\n        expect(startButton.disabled).to.be.equal(true);\n      });\n\n      it('stop button should be enabled', () => {\n        expect(stopButton.disabled).to.be.equal(false);\n      });\n\n      it('reset button should be disabled', () => {\n        expect(resetButton.disabled).to.be.equal(true);\n      });\n    });\n\n    describe('timer', () => {\n      it('should have the correct format', () => {\n        expect(timer.textContent).to.match(TIMER_FORMAT_REGEX);\n      });\n\n      it('should count up correctly', () => {\n        clock.tick(1000);\n        assertTimerMilliseconds(1000);\n        clock.tick(1000);\n        assertTimerMilliseconds(2000);\n        clock.tick(1000);\n        assertTimerMilliseconds(3000);\n      });\n    });\n  });\n\n  describe('paused state', () => {\n    beforeEach(() => {\n      startButton.click();\n      clock.tick(1000);\n      stopButton.click();\n    });\n\n    describe('buttons', () => {\n      it('start button should be enabled', () => {\n        expect(startButton.disabled).to.be.equal(false);\n      });\n\n      it('stop button should be disabled', () => {\n        expect(stopButton.disabled).to.be.equal(true);\n      });\n\n      it('reset button should be enabled', () => {\n        expect(resetButton.disabled).to.be.equal(false);\n      });\n    });\n\n    describe('timer', () => {\n      it('should have the correct format', () => {\n        expect(timer.textContent).to.match(TIMER_FORMAT_REGEX);\n      });\n\n      it('should be paused', () => {\n        assertTimerMilliseconds(1000);\n        clock.tick(1000);\n        assertTimerMilliseconds(1000);\n        clock.tick(1000);\n        assertTimerMilliseconds(1000);\n        clock.tick(1000);\n      });\n    });\n\n    describe('pressing the start button', () => {\n      beforeEach(() => {\n        startButton.click();\n      });\n\n      describe('buttons', () => {\n        it('start button should be disabled', () => {\n          expect(startButton.disabled).to.be.equal(true);\n        });\n\n        it('stop button should be enabled', () => {\n          expect(stopButton.disabled).to.be.equal(false);\n        });\n\n        it('reset button should be disabled', () => {\n          expect(resetButton.disabled).to.be.equal(true);\n        });\n      });\n\n      describe('timer', () => {\n        it('should have the correct format', () => {\n          expect(timer.textContent).to.match(TIMER_FORMAT_REGEX);\n        });\n\n        it('should count up correctly', () => {\n          clock.tick(1000);\n          assertTimerMilliseconds(2000);\n          clock.tick(1000);\n          assertTimerMilliseconds(3000);\n          clock.tick(1000);\n          assertTimerMilliseconds(4000);\n        });\n      });\n    });\n\n    describe('pressing the reset button', () => {\n      beforeEach(() => {\n        startButton.click();\n        clock.tick(1000);\n        stopButton.click();\n        resetButton.click();\n      });\n\n      describe('buttons', () => {\n        it('start button should be enabled', () => {\n          expect(startButton.disabled).to.be.equal(false);\n        });\n\n        it('stop button should be disabled', () => {\n          expect(stopButton.disabled).to.be.equal(true);\n        });\n\n        it('reset button should be disabled', () => {\n          expect(resetButton.disabled).to.be.equal(true);\n        });\n      });\n\n      describe('timer', () => {\n        it('should be at 00:00:000', () => {\n          expect(timer.textContent).to.equal('00:00:000');\n        });\n\n        it('should be paused', () => {\n          clock.tick(1000);\n          assertTimerMilliseconds(0);\n        });\n\n        it('can be restarted from 00:00:000', () => {\n          startButton.click();\n          clock.tick(1000);\n          assertTimerMilliseconds(1000);\n        });\n      });\n    });\n  });\n});"
        },
        "testStrategy": "MOCHA",
        "uid": "stopwatch",
        "video": {
            "annotations": [
                {
                    "content": "This case doesn't need to be handled; see notes below video.",
                    "end": 915,
                    "start": 909,
                    "title": "Note"
                }
            ],
            "codeWalkthroughTime": null,
            "duration": 26,
            "instructor": "Conner Ardman",
            "overviewTime": null,
            "vimeoId": "645859200"
        }
    },
    "difficulty": null,
    "instructor": "Conner Ardman",
    "name": "Stopwatch",
    "releaseDate": "2021-05-24T00:00:00Z",
    "type": "CODING_FRONTEND",
    "uid": "stopwatch"
}