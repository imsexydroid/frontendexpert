{
    "name": "Web Dev Fundamentals",
    "lessons": [
        {
            "uid": "web-dev-introduction",
            "name": "Introduction",
            "module": null,
            "releaseDate": "2022-02-18T00:00:00Z",
            "acl": {
                "isFree": true,
                "isFreeForStudents": false,
                "productRequired": [
                    "frontendexpert"
                ],
                "isAvailable": true
            },
            "description": "Unlike the other crash courses on FrontendExpert, which focused on reviewing the underlying programming languages of the web, this section will delve into high-level topics and generally aim to explain how the web actually works. \n\nWelcome to Web Dev Fundamentals.",
            "video": {
                "vimeoId": "675641775",
                "duration": 2,
                "annotations": [],
                "instructor": "Conner Ardman",
                "thumbnail": ""
            },
            "questions": [],
            "references": [],
            "codeExample": {
                "runtime": "browser",
                "arguments": [],
                "files": [
                    {
                        "name": "index.html",
                        "contents": "\u003c!--\nWelcome to our Playground!\n--\u003e\n\n",
                        "mode": 420,
                        "isEditable": true
                    },
                    {
                        "name": "styles.css",
                        "contents": "/* Welcome to our Playground! */\n\n",
                        "mode": 420,
                        "isEditable": true
                    },
                    {
                        "name": "script.js",
                        "contents": "// Welcome to our Playground!\n\n",
                        "mode": 420,
                        "isEditable": true
                    }
                ],
                "reactConfig": null
            },
            "links": [],
            "preReqs": [],
            "keyTerms": [],
            "section": "",
            "hasCodeExample": false
        },
        {
            "uid": "client-server-model",
            "name": "Client—Server Model",
            "module": null,
            "releaseDate": "2022-02-18T00:00:00Z",
            "acl": {
                "isFree": false,
                "isFreeForStudents": false,
                "productRequired": [
                    "frontendexpert"
                ],
                "isAvailable": true
            },
            "description": "A client is a thing that talks to servers. A server is a thing that talks to clients. The client—server model is a thing made up of a bunch of clients and servers talking to one another.\n\nAnd that, kids, is how the Internet works!\n",
            "video": {
                "vimeoId": "672496922",
                "duration": 9,
                "annotations": [],
                "instructor": "Conner Ardman",
                "thumbnail": ""
            },
            "questions": [],
            "references": [],
            "codeExample": {
                "runtime": "browser",
                "arguments": [],
                "files": [
                    {
                        "name": "index.html",
                        "contents": "\u003c!--\nWelcome to our Playground!\n--\u003e\n\n",
                        "mode": 420,
                        "isEditable": true
                    },
                    {
                        "name": "styles.css",
                        "contents": "/* Welcome to our Playground! */\n\n",
                        "mode": 420,
                        "isEditable": true
                    },
                    {
                        "name": "script.js",
                        "contents": "// Welcome to our Playground!\n\n",
                        "mode": 420,
                        "isEditable": true
                    }
                ],
                "reactConfig": null
            },
            "links": [],
            "preReqs": [],
            "keyTerms": [
                {
                    "name": "Client",
                    "section": null,
                    "definition": "\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A machine or process that requests data or service from a server. In the case\n  of the web, browsers are clients that request HTML pages from servers.\n\u003c/p\u003e\n\u003cp\u003e\n  Note that a single machine or piece of software can be both a client and a\n  server at the same time. For instance, a single machine could act as a server\n  for end users and as a client for a database.\n\u003c/p\u003e\n\u003c/div\u003e",
                    "url": null,
                    "kinds": []
                },
                {
                    "name": "Server",
                    "section": null,
                    "definition": "\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A machine or process that provides data or service for a client, usually by\n  listening for incoming network calls.\n\u003c/p\u003e\n\u003cp\u003e\n  Note that a single machine or piece of software can be both a client and a\n  server at the same time. For instance, a single machine could act as a server\n  for end users and as a client for a database.\n\u003c/p\u003e\n\u003c/div\u003e",
                    "url": null,
                    "kinds": []
                },
                {
                    "name": "Client—Server Model",
                    "section": null,
                    "definition": "\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  The paradigm by which modern systems are designed, which consists of clients\n  requesting data or service from servers and servers providing data or service\n  to clients.\n\u003c/p\u003e\n\u003c/div\u003e",
                    "url": null,
                    "kinds": []
                }
            ],
            "section": "",
            "hasCodeExample": false
        },
        {
            "uid": "webpage-request-lifecycle",
            "name": "Webpage Request Lifecycle",
            "module": null,
            "releaseDate": "2022-02-18T00:00:00Z",
            "acl": {
                "isFree": false,
                "isFreeForStudents": false,
                "productRequired": [
                    "frontendexpert"
                ],
                "isAvailable": true
            },
            "description": "What happens when you go to \u003ca class=\"Link Link--ae\" href=\"https://www.algoexpert.io\" target=\"_blank\"\n  \u003ealgoexpert.io\u003c/a\n\u003e? That is the question.\n",
            "video": {
                "vimeoId": "672983771",
                "duration": 11,
                "annotations": [],
                "instructor": "Conner Ardman",
                "thumbnail": ""
            },
            "questions": [],
            "references": [],
            "codeExample": {
                "runtime": "browser",
                "arguments": [],
                "files": [
                    {
                        "name": "index.html",
                        "contents": "\u003c!--\nWelcome to our Playground!\n--\u003e\n\n",
                        "mode": 420,
                        "isEditable": true
                    },
                    {
                        "name": "styles.css",
                        "contents": "/* Welcome to our Playground! */\n\n",
                        "mode": 420,
                        "isEditable": true
                    },
                    {
                        "name": "script.js",
                        "contents": "// Welcome to our Playground!\n\n",
                        "mode": 420,
                        "isEditable": true
                    }
                ],
                "reactConfig": null
            },
            "links": [],
            "preReqs": [],
            "keyTerms": [
                {
                    "name": "Domain Name System",
                    "section": null,
                    "definition": "\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  Oftentimes abbreviated as DNS, the process used for translating domain names\n  to IP Addresses.\n\u003c/p\u003e\n\u003c/div\u003e",
                    "url": null,
                    "kinds": []
                },
                {
                    "name": "Transmission Control Protocol",
                    "section": null,
                    "definition": "\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  Oftentimes abbreviated as TCP, a network protocol used to establish a\n  connection between two computers on the internet. TCP is the primary mechanism\n  by which HTTP requests are delivered.\n\u003c/p\u003e\n\u003c/div\u003e",
                    "url": null,
                    "kinds": []
                }
            ],
            "section": "",
            "hasCodeExample": false
        },
        {
            "uid": "hypertext-transfer-protocol",
            "name": "Hypertext Transfer Protocol",
            "module": null,
            "releaseDate": "2022-02-18T00:00:00Z",
            "acl": {
                "isFree": false,
                "isFreeForStudents": false,
                "productRequired": [
                    "frontendexpert"
                ],
                "isAvailable": true
            },
            "description": "Ah, HTTP. You see its sibling acronym HTTPS every day, but you have no idea what it means or does.\n\n...\n\nUntil now!",
            "video": {
                "vimeoId": "673036213",
                "duration": 21,
                "annotations": [],
                "instructor": "Conner Ardman",
                "thumbnail": ""
            },
            "questions": [],
            "references": [],
            "codeExample": {
                "runtime": "browser",
                "arguments": [],
                "files": [
                    {
                        "name": "index.html",
                        "contents": "\u003c!--\nWelcome to our Playground!\n--\u003e\n\n",
                        "mode": 420,
                        "isEditable": true
                    },
                    {
                        "name": "styles.css",
                        "contents": "/* Welcome to our Playground! */\n\n",
                        "mode": 420,
                        "isEditable": true
                    },
                    {
                        "name": "script.js",
                        "contents": "// Welcome to our Playground!\n\n",
                        "mode": 420,
                        "isEditable": true
                    }
                ],
                "reactConfig": null
            },
            "links": [],
            "preReqs": [],
            "keyTerms": [
                {
                    "name": "Hypertext Transfer Protocol",
                    "section": null,
                    "definition": "\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  Oftentimes abbreviated as HTTP, a common network protocol used for sending\n  requests and responses on the web.\n\u003c/p\u003e\n\n\u003cp\u003e\n  HTTP requests generally have three components: the request line, headers and\n  a body (although the body is optional for some request methods). The request\n  line includes the method, path and HTTP version. Headers contain key value\n  pairs of extra information for the server. The body contains the contents\n  of the request, such as new data being uploaded in a post request. For example,\n  a GET request to AlgoExpert's home page might look like this:\n\u003c/p\u003e\n\u003cpre\u003e\n  GET / HTTP/1.1\n\n  host: www.algoexpert.io\n  accept: text/html\n\u003c/pre\u003e\n\n\u003cp\u003e\nHTTP responses follow the same general format as requests, but in the top line\n(referred to as a status line), there is no method or path. Instead, this line\ncontains a status code and message. For example, the status code of \u003cspan\u003e200\u003c/span\u003e\nwith a message of \u003cspan\u003eOK\u003c/span\u003e will be included in the response to a\nsuccessful GET request.\n\u003c/p\u003e\n\u003cpre\u003e\nHTTP/1.1 200 OK\n\ncontent-type: text/html\n\n\u0026lt;!DOCTYPE html\u0026gt;\n\u0026lt;html\u0026gt;\n...\n\u0026lt;/html\u0026gt;\n\u003c/pre\u003e\n\n\n\u003c/div\u003e",
                    "url": null,
                    "kinds": []
                },
                {
                    "name": "HTTPS",
                    "section": null,
                    "definition": "\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  The \u003cb\u003eH\u003c/b\u003eyper\u003cb\u003eT\u003c/b\u003eext \u003cb\u003eT\u003c/b\u003eransfer \u003cb\u003eP\u003c/b\u003erotocol \u003cb\u003eS\u003c/b\u003eecure is\n  an extension of \u003cb\u003eHTTP\u003c/b\u003e that's used for secure communication online. It\n  requires servers to have trusted certificates and uses the Transport Layer\n  Security (\u003cb\u003eTLS\u003c/b\u003e), a security protocol built on top of \u003cb\u003eTCP\u003c/b\u003e, to\n  encrypt data communicated between a client and a server.\n\u003c/p\u003e\n\u003c/div\u003e",
                    "url": null,
                    "kinds": []
                }
            ],
            "section": "",
            "hasCodeExample": false
        },
        {
            "uid": "working-with-apis",
            "name": "Working With APIs",
            "module": null,
            "releaseDate": "2022-02-18T00:00:00Z",
            "acl": {
                "isFree": true,
                "isFreeForStudents": false,
                "productRequired": [
                    "frontendexpert"
                ],
                "isAvailable": true
            },
            "description": "A meeting of two engineering disciplines: frontend and backend.\n\nWelcome to API development.",
            "video": {
                "vimeoId": "675039854",
                "duration": 13,
                "annotations": [],
                "instructor": "Conner Ardman",
                "thumbnail": ""
            },
            "questions": [],
            "references": [],
            "codeExample": {
                "runtime": "browser",
                "arguments": [],
                "files": [
                    {
                        "name": "index.html",
                        "contents": "\u003c!--\nWelcome to our Playground!\n--\u003e\n\n",
                        "mode": 420,
                        "isEditable": true
                    },
                    {
                        "name": "styles.css",
                        "contents": "/* Welcome to our Playground! */\n\n",
                        "mode": 420,
                        "isEditable": true
                    },
                    {
                        "name": "script.js",
                        "contents": "// Welcome to our Playground!\n\n",
                        "mode": 420,
                        "isEditable": true
                    }
                ],
                "reactConfig": null
            },
            "links": [],
            "preReqs": [],
            "keyTerms": [
                {
                    "name": "Application Programming Interface",
                    "section": null,
                    "definition": "\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  Oftentimes referred to by the abbreviation API, the interface by which\n  programs agree to communicate with each other.\n\u003c/p\u003e\n\u003c/div\u003e",
                    "url": null,
                    "kinds": []
                },
                {
                    "name": "REST",
                    "section": null,
                    "definition": "\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  The Representational State Transfer API architectural style. An API using REST\n  is usually referred to as a RESTful API and must follow these constraints:\n\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\n    \u003cb\u003eClient-server model\u003c/b\u003e: There must be a clear distinction between\n    the client and the server, which can be developed independent of each other.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003eStateless\u003c/b\u003e: The server does not maintain session state, so the client\n    must send all information required to complete a request with the request.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003eCacheable\u003c/b\u003e: The server should clearly define which responses can be\n    cached by the client.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003eLayered system\u003c/b\u003e: If a layered system is used, the client should not\n    need to know which server it is connected to.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003eUniform interface\u003c/b\u003e: The interface should be consistent, following these\n    rules:\n    \u003cul\u003e\n      \u003cli\u003e\n        \u003cb\u003eResource identification in requests\u003c/b\u003e: Requests should identify\n        resources, but these resources can follow a different representation\n        than that used on the backend.\n      \u003c/li\u003e\n      \u003cli\u003e\n        \u003cb\u003eResource manipulation through representations\u003c/b\u003e: The client should\n        have enough information about a requested resource to edit that resource.\n      \u003c/li\u003e\n      \u003cli\u003e\n        \u003cb\u003eSelf-descriptive messages\u003c/b\u003e: Responses include messages describing\n        how to manipulate the resource, usually as a MIME type.\n      \u003c/li\u003e\n      \u003cli\u003e\n        \u003cb\u003eHypermedia as the engine of application state\u003c/b\u003e: Responses should\n        include links to future request options.\n      \u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003eCode on demand (optional)\u003c/b\u003e: Optionally, the server can send code to\n    the client to be executed by the client.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e",
                    "url": null,
                    "kinds": []
                },
                {
                    "name": "RPC",
                    "section": null,
                    "definition": "\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  The Remote Procedure Call API architectural style. In this style,\n  the server provides an interface for the client to call certain functions\n  on the server.\n\u003c/p\u003e\n\u003c/div\u003e",
                    "url": null,
                    "kinds": []
                },
                {
                    "name": "SOAP",
                    "section": null,
                    "definition": "\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  The Simple Object Access Protocol used for APIs. This protocol provides a\n  specific XML based format for clients and servers to communicate with.\n\u003c/p\u003e\n\u003c/div\u003e",
                    "url": null,
                    "kinds": []
                },
                {
                    "name": "GraphQL",
                    "section": null,
                    "definition": "\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A query language for querying APIs by describing the format of the requested\n  data. GraphQL has major benefits in only sending necessary data on the\n  network and potentially combining requests for multiple resources into a\n  single request.\n\u003c/p\u003e\n\u003c/div\u003e",
                    "url": null,
                    "kinds": []
                },
                {
                    "name": "API Key",
                    "section": null,
                    "definition": "\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A unique key used to identify an application to an API. These keys are sent\n  with each request and thus should be considered public information when\n  working on a public application.\n\u003c/p\u003e\n\u003c/div\u003e",
                    "url": null,
                    "kinds": []
                }
            ],
            "section": "",
            "hasCodeExample": false
        },
        {
            "uid": "web-security",
            "name": "Web Security",
            "module": null,
            "releaseDate": "2022-02-18T00:00:00Z",
            "acl": {
                "isFree": false,
                "isFreeForStudents": false,
                "productRequired": [
                    "frontendexpert"
                ],
                "isAvailable": true
            },
            "description": "The web is a dangerous place! And as a frontend developer, it's your job to protect the digital denizens of the world—and their browsers—from the never-ending threat of nefarious cyber attacks.",
            "video": {
                "vimeoId": "675360509",
                "duration": 26,
                "annotations": [],
                "instructor": "Conner Ardman",
                "thumbnail": ""
            },
            "questions": [],
            "references": [],
            "codeExample": {
                "runtime": "browser",
                "arguments": [],
                "files": [
                    {
                        "name": "index.html",
                        "contents": "\u003c!--\nWelcome to our Playground!\n--\u003e\n\n",
                        "mode": 420,
                        "isEditable": true
                    },
                    {
                        "name": "styles.css",
                        "contents": "/* Welcome to our Playground! */\n\n",
                        "mode": 420,
                        "isEditable": true
                    },
                    {
                        "name": "script.js",
                        "contents": "// Welcome to our Playground!\n\n",
                        "mode": 420,
                        "isEditable": true
                    }
                ],
                "reactConfig": null
            },
            "links": [],
            "preReqs": [],
            "keyTerms": [
                {
                    "name": "Same-Origin Policy",
                    "section": null,
                    "definition": "\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A browser policy limiting the ability of a page from reading resources\n  from different origins. Two resources are from the same origin only if they\n  have the same protocol, host, and port.\n\u003c/p\u003e\n\u003c/div\u003e",
                    "url": null,
                    "kinds": []
                },
                {
                    "name": "CORS",
                    "section": null,
                    "definition": "\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  The Cross-Origin Resource Sharing system for circumventing the same-origin\n  policy when a cross-origin request is necessary. A server can allow\n  cross-origin requests by including the\n  \u003cspan\u003eAccess-Control-Allow-Origin\u003c/span\u003e header.\n\u003c/p\u003e\n\u003c/div\u003e",
                    "url": null,
                    "kinds": []
                },
                {
                    "name": "Cross-Site Scripting Attack",
                    "section": null,
                    "definition": "\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A common security vulnerability, also known as XSS, where an attacker\n  is able to run code on a vulnerability site, thus circumventing the\n  same-origin policy. There are a few common forms of cross-site scripting:\n\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\n    \u003cb\u003ePersistent\u003c/b\u003e: A vulnerability that persists beyond a single session,\n    usually from the attacker storing malicious code in the vulnerable\n    database. A common example of this is leaving a comment with code that when\n    appended to the page by the client is executed.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003eNon-persistent\u003c/b\u003e: A vulnerability that does not persist beyond a\n    single session, usually when an attacker takes advantage of how the client\n    processes a URL query parameter to execute malicious code on the client.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003eDOM-based\u003c/b\u003e: A vulnerability that happens exclusively on the frontend\n    without any need for sending data to the server, thus making the attack\n    harder to track.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e",
                    "url": null,
                    "kinds": []
                },
                {
                    "name": "Cross-Site Request Forgery Attack",
                    "section": null,
                    "definition": "\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A common security vulnerability, also known as CSRF, where an attacker\n  sends a request to a server and is able to convince the server it was sent\n  by their client. CSRF attacks can usually be prevented by using a CSRF token,\n  a unique token given to the client that a forged request would not be able\n  to replicate.\n\u003c/p\u003e\n\u003c/div\u003e",
                    "url": null,
                    "kinds": []
                },
                {
                    "name": "OAuth",
                    "section": null,
                    "definition": "\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  Open Authorization, a common standard for service authorization. Services can\n  use OAuth to allow users to give other services specific API access to portions\n  of their accounts.\n\u003c/p\u003e\n\u003c/div\u003e",
                    "url": null,
                    "kinds": []
                },
                {
                    "name": "JSON Web Token",
                    "section": null,
                    "definition": "\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A standard for signed JSON tokens, oftentimes referred to by its abbreviation\n  JWT. JSON Web Tokens have three sections:\n\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eA header with information about the encryption algorithm used.\u003c/li\u003e\n  \u003cli\u003eThe payload data.\u003c/li\u003e\n  \u003cli\u003e\n    The signature, which is created by the server using a secret key so that\n    it can determine if it has been tampered with.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e",
                    "url": null,
                    "kinds": []
                }
            ],
            "section": "",
            "hasCodeExample": false
        },
        {
            "uid": "how-browsers-render-content",
            "name": "How Browsers Render Content",
            "module": null,
            "releaseDate": "2022-02-18T00:00:00Z",
            "acl": {
                "isFree": false,
                "isFreeForStudents": false,
                "productRequired": [
                    "frontendexpert"
                ],
                "isAvailable": true
            },
            "description": "Perhaps the most fundamental question in all of web development—and the answer to which any seasoned frontend developer should know, understand, and be capable of explaining in depth.",
            "video": {
                "vimeoId": "675246766",
                "duration": 14,
                "annotations": [],
                "instructor": "Conner Ardman",
                "thumbnail": ""
            },
            "questions": [],
            "references": [],
            "codeExample": {
                "runtime": "browser",
                "arguments": [],
                "files": [
                    {
                        "name": "index.html",
                        "contents": "\u003c!--\nWelcome to our Playground!\n--\u003e\n\n",
                        "mode": 420,
                        "isEditable": true
                    },
                    {
                        "name": "styles.css",
                        "contents": "/* Welcome to our Playground! */\n\n",
                        "mode": 420,
                        "isEditable": true
                    },
                    {
                        "name": "script.js",
                        "contents": "// Welcome to our Playground!\n\n",
                        "mode": 420,
                        "isEditable": true
                    }
                ],
                "reactConfig": null
            },
            "links": [],
            "preReqs": [],
            "keyTerms": [
                {
                    "name": "Critical Rendering Path",
                    "section": null,
                    "definition": "\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  The process the browser takes to convert frontend files into a user interface.\n  This process has five primary steps:\n\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003eParse the HTML and create a DOM tree.\u003c/li\u003e\n  \u003cli\u003eParse the CSS and create a CSS Object Model tree.\u003c/li\u003e\n  \u003cli\u003e\n    Combine the DOM tree and CSSOM tree into a render tree, containing\n    information about the nodes that are going to be rendered to the page.\n  \u003c/li\u003e\n  \u003cli\u003e\n    Calculate the layout (width, height and location) of nodes based on the\n    viewport size.\n  \u003c/li\u003e\n  \u003cli\u003ePaint the screen using the render tree and layout calculations.\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/div\u003e",
                    "url": null,
                    "kinds": []
                }
            ],
            "section": "",
            "hasCodeExample": false
        }
    ]
}