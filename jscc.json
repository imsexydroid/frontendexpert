{"name":"JavaScript Crash Course","lessons":[{"uid":"javascript-introduction","name":"Introduction","module":null,"releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":true,"isFreeForStudents":false,"productRequired":["frontendexpert"],"isAvailable":true},"description":"JavaScript is the third and arguably most important pillar of the holy trinity of the modern web. Master it, and you'll be capable of breathing life into any webpage.\n","video":{"vimeoId":"648159370","duration":3,"annotations":[],"instructor":"Conner Ardman","thumbnail":"https://i.vimeocdn.com/video/1305764290-7479fe00676ab4cf9bec99e23669160d9ffa07946b43e43c2_640x360?r=pad"},"questions":[],"references":[],"codeExample":{"runtime":"javascript","arguments":["main.js"],"files":[{"name":"main.js","contents":"// Welcome to our Playground!\n\nconsole.log('hello world');","mode":420,"isEditable":true}],"reactConfig":null},"links":[],"preReqs":[],"keyTerms":[],"section":"","hasCodeExample":false},{"uid":"javascript-basics","name":"JavaScript Basics","module":null,"releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["frontendexpert"],"isAvailable":true},"description":"As always, we begin by reviewing the nuts and bolts of the subject matter. Let's get started!\n","video":{"vimeoId":"645051970","duration":57,"annotations":[],"instructor":"Conner Ardman","thumbnail":"https://i.vimeocdn.com/video/1301587547-6c6a30046c832c76c2b617e2612b23703fdace7e7a1075543_640x360?r=pad"},"questions":[],"references":[],"codeExample":{"runtime":"javascript","arguments":["main.js"],"files":[{"name":"main.js","contents":"// Welcome to our Playground!\n\nlet num = 10;\n\nconsole.log(num * 2);","mode":420,"isEditable":true}],"reactConfig":null},"links":[],"preReqs":[],"keyTerms":[{"name":"JavaScript","section":null,"definition":"\u003cp\u003e\n  The primary programming language of the web, primarily used for adding functionality\n  to websites. JavaScript is a general purpose multi-paradigm programming language with\n  dynamic typing.\n\u003c/p\u003e","url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript","kinds":[]},{"name":"Paradigm","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n  \u003cp\u003e\n    A style of programming. Oftentimes languages are built with a specific\n    paradigm in mind, but JavaScript is known as a \u003cb\u003emulti-paradigm\u003c/b\u003e\n    language, because it allows for programming in a variety of paradigms.\n    Some of the major paradigms of JavaScript include:\n  \u003c/p\u003e\n  \u003cul\u003e\n    \u003cli\u003e\n      \u003cb\u003eEvent-driven\u003c/b\u003e: Functions can be made to respond to events, such as when a\n      user clicks on an element or scrolls down the page.\n    \u003c/li\u003e\n    \u003cli\u003e\n      \u003cb\u003eFunctional\u003c/b\u003e: Functions can be written as \"pure functions\", meaning\n      functions that always have the same output for a given set of arguments\n      and never produce side effects. Additionally, JavaScript supports\n      \u003cb\u003efirst-class functions\u003c/b\u003e and \u003cb\u003ehigher-order functions\u003c/b\u003e. This\n      means that functions can be treated as normal values, passed as arguments\n      to other functions and returned from functions.\n    \u003c/li\u003e\n    \u003cli\u003e\n      \u003cb\u003eObject-oriented\u003c/b\u003e: Objects can be created as custom data stores and\n      they can be made to inherit from each other.\n    \u003c/li\u003e\n    \u003cli\u003e\n      \u003cb\u003eImperative\u003c/b\u003e: Programs can be written by explicitly describing the\n      control flow, such as with loops and conditionals.\n    \u003c/li\u003e\n    \u003cli\u003e\n      \u003cb\u003eDeclarative\u003c/b\u003e: Programs can be written by describing the desired output\n      with implicit control flow. Oftentimes this is associated with functional programming\n      (e.g. using the forEach function to loop over an array instead of a for loop).\n    \u003c/li\u003e\n  \u003c/ul\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Primitive","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  The most basic data types of a language. In JavaScript, there\n  are 7 primitive types:\n\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\n    \u003cb\u003eNumber\u003c/b\u003e: Numeric values, including integers and decimal values.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003eBigInt\u003c/b\u003e: Integers too large to store in a number.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003eBoolean\u003c/b\u003e: A binary value of \u003cspan\u003etrue\u003c/span\u003e or \u003cspan\u003efalse\u003c/span\u003e.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003eString\u003c/b\u003e: A sequence of characters.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003eSymbol\u003c/b\u003e: A dynamically generated unique value.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003eNull\u003c/b\u003e: A nonexistent value.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003eUndefined\u003c/b\u003e: A value that has not been set.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\n  JavaScript has a \u003cspan\u003etypeof\u003c/span\u003e operator that\n  can get the type of a value as a lowercase string.\n  However, do be aware that this function does have some\n  special casing. For example, \u003cspan\u003etypeof function\u003c/span\u003e\n  will return \"function\" even though functions are\n  just objects.\n\u003c/p\u003e\n\n\u003c/div\u003e","url":"https://developer.mozilla.org/en-US/docs/Glossary/Primitive","kinds":[]}],"section":"","hasCodeExample":false},{"uid":"variables-and-scoping","name":"Variables And Scoping","module":null,"releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["frontendexpert"],"isAvailable":true},"description":"What do you call something that is both a paradox and a misnomer?\n\nA constant variable.\n","video":{"vimeoId":"631679565","duration":10,"annotations":[],"instructor":"Conner Ardman","thumbnail":"https://i.vimeocdn.com/video/1299562320-22e6a906a927c7836a3315db9daad679c96f235596a00f861_640x360?r=pad"},"questions":[],"references":[],"codeExample":{"runtime":"javascript","arguments":["main.js"],"files":[{"name":"main.js","contents":"// Welcome to our Playground!\n\nconst constNum = 10;\nlet letNum = 10;\nvar varNum = 10;\n\nconsole.log('constNum: ', constNum);\nconsole.log('letNum: ', letNum);\nconsole.log('varNum:', varNum);","mode":420,"isEditable":true}],"reactConfig":null},"links":[],"preReqs":[],"keyTerms":[{"name":"let","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A keyword for declaring a \u003cb\u003eblock-scoped\u003c/b\u003e variable that cannot be\n  accessed before initialization.\n\u003c/p\u003e\n\u003c/div\u003e","url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let","kinds":["javascript"]},{"name":"var","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A keyword for declaring a \u003cb\u003efunction-scoped\u003c/b\u003e variable that is automatically\n  initialized to \u003cspan\u003eundefined\u003c/span\u003e when it is \u003cb\u003ehoisted\u003c/b\u003e.\n\u003c/p\u003e\n\u003c/div\u003e","url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var","kinds":["javascript"]},{"name":"const","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A keyword for declaring a constant value. Constants have the same behavior\n  as variables declared with \u003cspan\u003elet\u003c/span\u003e, except they cannot be reassigned.\n\u003c/p\u003e\n\u003c/div\u003e","url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const","kinds":["javascript"]},{"name":"Block Scope","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  The behavior of a variable that is only accessible inside of the block it was defined. Most of the\n  time, the block will simply be the nearest pair of curly braces to the declaration.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Function Scope","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  The behavior of a variable that is accessible anywhere inside of the function it was defined.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Hoisting","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n  \u003cp\u003e\n    The process by which the JavaScript engine moves variable declarations to\n    the top of their scope, allocating memory for them before reaching the line\n    of code where they are declared. For variables declared with\n    \u003cspan\u003evar\u003c/span\u003e, they are initialized to \u003cspan\u003eundefined\u003c/span\u003e until\n    reaching the line of code that initializes the variable. For variables\n    declared with \u003cspan\u003elet\u003c/span\u003e or \u003cspan\u003econst\u003c/span\u003e, the variable is not\n    initialized and thus cannot be accessed before the line of code that\n    initializes it. For example:\n  \u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"code-wrapper prism\"\u003e\n  \u003cpre\n    class=\"line-numbers\"\n  \u003e\u003ccode class=\"language-javascript\"\u003econsole.log(varNum); // undefined\nconsole.log(letNum); // reference error\n\nvar varNum = 5;\nlet letNum = 5;\n\nconsole.log(varNum); // 5\nconsole.log(letNum); // 5\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e","url":"https://developer.mozilla.org/en-US/docs/Glossary/Hoisting","kinds":[]}],"section":"","hasCodeExample":false},{"uid":"arrays","name":"Arrays","module":null,"releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["frontendexpert"],"isAvailable":true},"description":"The quintessential data structure that can be used in a wide array of different situations.\n","video":{"vimeoId":"646226842","duration":34,"annotations":[],"instructor":"Conner Ardman","thumbnail":"https://i.vimeocdn.com/video/1301587875-a64a5a3b5edccc65308a86c07982dba61323a24e65b48893d_640x360?r=pad"},"questions":[],"references":[],"codeExample":{"runtime":"javascript","arguments":["main.js"],"files":[{"name":"main.js","contents":"// Welcome to our Playground!\n\nconst arr = [1, 2, 3];\n\nconsole.log(arr);\nconsole.log(arr.length);\nconsole.log(arr[1]);","mode":420,"isEditable":true}],"reactConfig":null},"links":[],"preReqs":[],"keyTerms":[{"name":"Array","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\n\u003cp\u003e\n  A data structure for storing lists of information.\n\u003c/p\u003e\n\n\u003cp\u003e\n  JavaScript arrays are mutable and can contain data of different types.\n  While these are just standard objects, they have a special syntax for\n  easily creating and updating them. For example:\n\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"code-wrapper prism\"\u003e\n\u003cpre\n  class=\"line-numbers\"\n\u003e\u003ccode class=\"language-javascript\"\u003econst arr = [1, 2, 3];\nconsole.log(arr[1]); // 2\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e","url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array","kinds":["javascript"]}],"section":"","hasCodeExample":false},{"uid":"objects","name":"Objects","module":null,"releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["frontendexpert"],"isAvailable":true},"description":"Why is JavaScript a mean programming language? \n\nBecause it objectifies almost everything.\n","video":{"vimeoId":"640237164","duration":42,"annotations":[],"instructor":"Conner Ardman","thumbnail":"https://i.vimeocdn.com/video/1299563301-45fd0931d1221a9a8eb804306f1c051a4e0fd3b6aa238fa0f_640x360?r=pad"},"questions":[],"references":[],"codeExample":{"runtime":"javascript","arguments":["main.js"],"files":[{"name":"main.js","contents":"// Welcome to our Playground!\n\nconst website = {\n  name: 'AlgoExpert',\n  domain: 'algoexpert.io',\n};\n\nconsole.log(website);","mode":420,"isEditable":true}],"reactConfig":null},"links":[],"preReqs":[],"keyTerms":[{"name":"Object","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  The base non-primitive data structure of JavaScript used to store key-value pairs.\n  Object keys are usually strings, but they can also be \u003cb\u003esymbols\u003c/b\u003e. Values on\n  the other hand can be any type.\n\u003c/p\u003e\n\n\u003cp\u003e\n  Objects are usually declared with the object literal syntax such as:\n\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"code-wrapper prism\"\u003e\n  \u003cpre\n    class=\"line-numbers\"\n  \u003e\u003ccode class=\"language-javascript\"\u003econst website = {\n  name: 'AlgoExpert',\n  domain: 'algoexpert.io'\n};\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e","url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#objects","kinds":["javascript"]},{"name":"Symbol","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A primitive value in JavaScript used for unique values.\n\u003c/p\u003e\n\n\u003cp\u003e\n  A symbol is created using the \u003cspan\u003eSymbol(description)\u003c/span\u003e function, which\n  returns a unique symbol. Even if two symbols have the same description, they\n  will still be considered unique.\n\u003c/p\u003e\n\n\u003cp\u003e\n  While symbols created using the \u003cspan\u003eSymbol(description)\u003c/span\u003e function are\n  completely unique, symbols can also be created using \u003cspan\u003eSymbol.for(key)\u003c/span\u003e.\n  This works the same way, except two calls to this function with the same key\n  will return the same symbol, based on a global symbol registry.\n\u003c/p\u003e\n\u003c/div\u003e","url":"https://developer.mozilla.org/en-US/docs/Glossary/Symbol","kinds":["javascript"]}],"section":"","hasCodeExample":false},{"uid":"equality-and-type-coercion","name":"Equality And Type Coercion","module":null,"releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["frontendexpert"],"isAvailable":true},"description":"== == ===\n\nHowever...\n\n== !== ===","video":{"vimeoId":"633299112","duration":12,"annotations":[],"instructor":"Conner Ardman","thumbnail":"https://i.vimeocdn.com/video/1299562059-fc2d5f856b3942b3b230b2a3d949de9ff272a63d59a8b4c71_640x360?r=pad"},"questions":[],"references":[],"codeExample":{"runtime":"javascript","arguments":["main.js"],"files":[{"name":"main.js","contents":"// Welcome to our Playground!\n\nconsole.log(5 == '5');\nconsole.log(5 === '5');","mode":420,"isEditable":true}],"reactConfig":null},"links":[],"preReqs":[],"keyTerms":[{"name":"Loose Equality","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  The most basic equality operator in JavaScript using \u003cspan\u003e==\u003c/span\u003e. Loose\n  equality compares values regardless of types following these steps:\n\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\n    If both values are either \u003cspan\u003enull\u003c/span\u003e or \u003cspan\u003eundefined\u003c/span\u003e, return true.\n  \u003c/li\u003e\n  \u003cli\u003e\n    Convert all \u003cspan\u003ebooleans\u003c/span\u003e to \u003cspan\u003enumbers\u003c/span\u003e. \u003cspan\u003eTrue\u003c/span\u003e\n    converts to \u003cspan\u003e1\u003c/span\u003e and \u003cspan\u003efalse\u003c/span\u003e converts to 0.\n  \u003c/li\u003e\n  \u003cli\u003e\n    If comparing a \u003cspan\u003enumber\u003c/span\u003e to a \u003cspan\u003estring\u003c/span\u003e, convert the\n    \u003cspan\u003estring\u003c/span\u003e to a \u003cspan\u003enumber\u003c/span\u003e.\n  \u003c/li\u003e\n  \u003cli\u003e\n    If comparing an \u003cspan\u003eobject\u003c/span\u003e to a \u003cspan\u003estring\u003c/span\u003e, convert the\n    \u003cspan\u003eobject\u003c/span\u003e using its \u003cspan\u003etoString()\u003c/span\u003e or \u003cspan\u003evalueOf()\u003c/span\u003e methods.\n  \u003c/li\u003e\n  \u003cli\u003e\n    If the types are the same, follow the same rules as \u003cb\u003estrict equality\u003c/b\u003e.\n  \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\n  In general, \u003cb\u003estrict equality\u003c/b\u003e should be preferred due to it being easier\n  to predict. However, \u003cb\u003eloose equality\u003c/b\u003e can be useful for checking against\n  \u003cspan\u003enull\u003c/span\u003e and \u003cspan\u003eundefined\u003c/span\u003e at once with \u003cspan\u003evalue == null\u003c/span\u003e.\n\u003c/p\u003e\n\u003c/div\u003e","url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Equality","kinds":["javascript"]},{"name":"Strict Equality","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A JavaScript equality operator using \u003cspan\u003e===\u003c/span\u003e. Strict equality compares\n  both values and types following these steps:\n\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003eIf either value is \u003cspan\u003eNaN\u003c/span\u003e, return false.\u003c/li\u003e\n  \u003cli\u003eIf the values have different types, return false.\u003c/li\u003e\n  \u003cli\u003eIf both values are \u003cspan\u003enull\u003c/span\u003e or both values are \u003cspan\u003eundefined\u003c/span\u003e, return true.\u003c/li\u003e\n  \u003cli\u003eIf both values are \u003cspan\u003eobjects\u003c/span\u003e, return true if they are the same object. False otherwise.\u003c/li\u003e\n  \u003cli\u003eIf both values are of the same primitive type, return true if the values are the same. False otherwise.\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/div\u003e","url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Strict_equality","kinds":["javascript"]}],"section":"","hasCodeExample":false},{"uid":"syntactic-sugar","name":"Syntactic Sugar And Modern JavaScript","module":null,"releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["frontendexpert"],"isAvailable":true},"description":"Not as sweet as table sugar, but delightful nonetheless.","video":{"vimeoId":"634994985","duration":23,"annotations":[],"instructor":"Conner Ardman","thumbnail":"https://i.vimeocdn.com/video/1299561900-9a8e9b04b988b7e076878f02ca80c3180d2c6189530edcc2d_640x360?r=pad"},"questions":[],"references":[],"codeExample":{"runtime":"javascript","arguments":["main.js"],"files":[{"name":"main.js","contents":"// Welcome to our Playground!\n\nconst arr = [1, 2, 3, 4].map(num =\u003e num * 2);\n\nconsole.log(arr);\n\nconst [first, second] = arr;\nconsole.log(first);\nconsole.log(second);","mode":420,"isEditable":true}],"reactConfig":null},"links":[],"preReqs":[],"keyTerms":[{"name":"Arrow Function","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A more concise function syntax, particularly useful for replacing short\n  anonymous functions. The basic syntax for an arrow function is:\n\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"code-wrapper prism\"\u003e\n  \u003cpre\n    class=\"line-numbers\"\n  \u003e\u003ccode class=\"language-javascript\"\u003e(param1, param2) =\u003e {\n  doSomething(param1, param2);\n  return 'hello world';\n}\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\n  However, if an arrow function only requires one line, then the curly braces and\n  \u003cspan\u003ereturn\u003c/span\u003e keyword can be removed. Additionally, when these are used\n  inline such as for a call to the array map function, the semicolon must be removed.\n  Finally, if there is only one parameter, the parentheses around the parameter can also\n  be removed. For example, this code will create an array with the values doubled:\n\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"code-wrapper prism\"\u003e\n  \u003cpre\n    class=\"line-numbers\"\n  \u003e\u003ccode class=\"language-javascript\"\u003e[1, 2, 3, 4].map(num =\u003e num * 2);\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  There are a few constraints to arrow functions which will be explored throughout the\n  crash course. The most important of these is that arrow functions do not have their\n  own \u003cspan\u003ethis\u003c/span\u003e binding. Additionally, arrow functions cannot be used as\n  constructors or generators.\n\u003c/p\u003e\n\u003c/div\u003e","url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions","kinds":["javascript"]},{"name":"Destructuring Assignment","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A JavaScript syntax for saving values from an array or object in variables.\n  For example:\n\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"code-wrapper prism\"\u003e\n  \u003cpre\n    class=\"line-numbers\"\n  \u003e\u003ccode class=\"language-javascript\"\u003econst [first, second] = [1, 2, 3];\nconsole.log(first); // 1\nconsole.log(second); // 2\n\nconst { name } = { name: 'Conner' };\nconsole.log(name); // 'Conner'\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\n\n\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  When destructuring an object, fields can also be renamed, for example:\n\u003c/p\u003e\n\u003c/div\u003e\n\n\n\u003cdiv class=\"code-wrapper prism\"\u003e\n  \u003cpre\n    class=\"line-numbers\"\n  \u003e\u003ccode class=\"language-javascript\"\u003econst { name: firstName } = { name: 'Conner' };\nconsole.log(firstName); // 'Conner'\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\n\n\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  Destructuring can also be used in a function parameter, for example:\n\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"code-wrapper prism\"\u003e\n  \u003cpre\n    class=\"line-numbers\"\n  \u003e\u003ccode class=\"language-javascript\"\u003efunction printName({ name }) {\n  console.log(name);\n}\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e","url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment","kinds":["javascript"]},{"name":"Rest Operator","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A JavaScript operator using \u003cspan\u003e...\u003c/span\u003e for condensing multiple elements\n  into a single array. This uses the same syntax as the \u003cb\u003espread operator\u003c/b\u003e,\n  but functionally is essentially the opposite.\n\u003c/p\u003e\n\n\u003cp\u003e\n  Rest syntax can be used in both arrays and objects to get all of the values not\n  being \u003cb\u003edestructured\u003c/b\u003e. For example:\n\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"code-wrapper prism\"\u003e\n  \u003cpre\n    class=\"line-numbers\"\n  \u003e\u003ccode class=\"language-javascript\"\u003econst arr = [1, 2, 3, 4];\nconst [first, second, ...rest] = arr; // rest is [3, 4]\n\nconst obj = { key1: 1, key2: 2, key3: 3, key4: 4 };\nconst { key1, key2, ...rest } = obj; // rest is { key3: 3, key4: 4 }\n};\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\n\n\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  Moreover, rest syntax can be used for function parameters to accept an infinite\n  number of arguments, which are accessible as an array. For example:\n\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"code-wrapper prism\"\u003e\n  \u003cpre\n    class=\"line-numbers\"\n  \u003e\u003ccode class=\"language-javascript\"\u003efunction myFunc(...myArguments) {\n  console.log(myArguments);\n}\n\nmyFunc(1, 2, 3, 4); // logs [1, 2, 3, 4]\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e","url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters","kinds":["javascript"]},{"name":"Spread Operator","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A JavaScript operator using \u003cspan\u003e...\u003c/span\u003e for expanding iterables into\n  individual elements. For example \u003cspan\u003emyFunction(...myArray)\u003c/span\u003e would\n  pass each value in myArray as individual arguments to myFunction.\n\u003c/p\u003e\n\n\u003cp\u003e\n  The spread syntax can also be used to combine two arrays, for example,\n  \u003cspan\u003e[...arr1, ...arr2]\u003c/span\u003e would make a single array with all of the values of\n  both arrays. Similarly, objects can be spread as well. For example,\n  \u003cspan\u003e{key: 'value', ...otherObj}\u003c/span\u003e would add all of the fields from\n  the other object into this object. Moreover, \u003cspan\u003e{...obj}\u003c/span\u003e can be\n  used as a shallow clone of an object, since it creates a new object with the\n  same fields.\n\u003c/p\u003e\n\u003c/div\u003e","url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax","kinds":["javascript"]},{"name":"Template Literal","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  Strings created using backticks \u003cspan\u003e``\u003c/span\u003e that allow for inlining\n  expressions rather than needing concatenation. Inlined expressions use the syntax\n  \u003cspan\u003e${expression}\u003c/span\u003e. For example, \u003cspan\u003e`Hello ${name}`\u003c/span\u003e would have\n  the same output as \u003cspan\u003e'Hello' + name\u003c/span\u003e.\n\u003c/p\u003e\n\n\u003cp\u003e\n  Template literals also allow for \u003ci\u003etagging\u003c/i\u003e to write a function that defines\n  custom behavior for the template literals. Tagging can be read about further in the MDN\n  documentation, but it doesn't tend to be used too often.\n\u003c/p\u003e\n\u003c/div\u003e","url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals","kinds":["javascript"]},{"name":"Null Coalescing","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  Also referred to as \u003cb\u003enullish coalescing\u003c/b\u003e, an operator using \u003cspan\u003e??\u003c/span\u003e\n  for providing a default value if a value is null. If the value on the left side\n  of the operator is not null or undefined, that value is used. Otherwise, the\n  value on the right side of the operator is used. For example:\n\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"code-wrapper prism\"\u003e\n  \u003cpre\n    class=\"line-numbers\"\n  \u003e\u003ccode class=\"language-javascript\"\u003econst num = null ?? 1234; // 1234\nconst num2 = undefined ?? 1234; // 1234\nconst num3 = 5678 ?? 1234; // 5678\nconst num4 = '' ?? 1234; // ''\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e","url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator","kinds":["javascript"]},{"name":"Optional Chaining","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A JavaScript operator using \u003cspan\u003e?.\u003c/span\u003e for reading object properties\n  without throwing an error if the object is null. For example, \u003cspan\u003eperson?.company?.website\u003c/span\u003e\n  will act the same as \u003cspan\u003eperson.company.website\u003c/span\u003e, however if any values in\n  the chain are null or undefined, it will return undefined rather than throwing an error.\n\u003c/p\u003e\n\u003c/div\u003e","url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining","kinds":["javascript"]},{"name":"Short Circuit Evaluation","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A method of utilizing the evaluation order of JavaScript to conditionally\n  run code. This usually uses the \u003cspan\u003e\u0026\u0026\u003c/span\u003e operator, because for it\n  to return true, both the left and right expressions must be true. Since the browser\n  runs code from left to right, if it encounters false on the left side,\n  it does not even run the code on the right side. Thus, this can be used to\n  conditionally run code. For example:\n\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"code-wrapper prism\"\u003e\n  \u003cpre\n    class=\"line-numbers\"\n  \u003e\u003ccode class=\"language-javascript\"\u003etrue \u0026\u0026 myFunc(); // calls myFunc()\nfalse \u0026\u0026 myFunc(); // doesn't call myFunc()\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  Less commonly, short circuit evaluation can also be used with the \u003cspan\u003e||\u003c/span\u003e\n  operator. Since this operator only needs one expression to be true, if the\n  left side is true then the right side will not be evaluated. This is essentially\n  the opposite of the behavior with \u003cspan\u003e\u0026\u0026\u003c/span\u003e. For example:\n\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"code-wrapper prism\"\u003e\n  \u003cpre\n    class=\"line-numbers\"\n  \u003e\u003ccode class=\"language-javascript\"\u003etrue || myFunc(); // doesn't call myFunc()\nfalse || myFunc(); // calls myFunc()\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e","url":null,"kinds":[]}],"section":"","hasCodeExample":false},{"uid":"connecting-javascript-to-html","name":"Connecting JavaScript To HTML","module":null,"releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["frontendexpert"],"isAvailable":true},"description":"A little more nuanced than simply throwing a \u0026lt;script\u0026gt; tag into your HTML.","video":{"vimeoId":"635886307","duration":8,"annotations":[],"instructor":"Conner Ardman","thumbnail":"https://i.vimeocdn.com/video/1299562672-398d24d0be52a6326803b6e0bfc72e0a02a83aa2163bb689d_640x360?r=pad"},"questions":[],"references":[],"codeExample":{"runtime":"javascript","arguments":["main.js"],"files":[{"name":"main.js","contents":"// Welcome to our Playground!\n\n","mode":420,"isEditable":true}],"reactConfig":null},"links":[],"preReqs":[],"keyTerms":[{"name":"\u003cscript\u003e","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  The HTML tag for adding JavaScript to the document. Usually the \u003cspan\u003e\u0026lt;script\u0026gt;\u003c/span\u003e\n  appears in the \u003cspan\u003e\u0026lt;head\u0026gt;\u003c/span\u003e with no children. Instead of children, it\n  usually has the \u003cb\u003esrc\u003c/b\u003e attribute set to the path of a JavaScript file.\n\u003c/p\u003e\n\n\u003cp\u003e\n  By default, scripts block the browser from continuing to parse and render the rest\n  of the DOM until the script has finished downloading and executing. However, there\n  are two boolean attributes that can change this behavior:\n\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\n    \u003cb\u003edefer\u003c/b\u003e: Fetch the script asynchronously without blocking the page. Only execute\n    the script after the DOM has finished being parsed.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003easync\u003c/b\u003e: Fetch the script asynchronously without blocking the page. Whenever the\n    script is ready, stop parsing the DOM and execute the script. This is usually only for scripts\n    that do not need access to the DOM, because otherwise the behavior will be inconsistent\n    based on how quickly the script downloaded.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\n  Alternatively, scripts were traditionally placed at the bottom of the \u003cspan\u003e\u0026lt;body\u0026gt;\u003c/span\u003e\n  to ensure the DOM finished loading before running the script. However, this is usually slower\n  than using the \u003cb\u003edefer\u003c/b\u003e attribute, since the script will not be downloaded until reaching the\n  script tag at the end of the body.\n\u003c/p\u003e\n\u003c/div\u003e","url":"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script","kinds":["html"]}],"section":"","hasCodeExample":false},{"uid":"dom-manipulation","name":"Dom Manipulation","module":null,"releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["frontendexpert"],"isAvailable":true},"description":"An acceptable form of manipulation.\n","video":{"vimeoId":"637745403","duration":34,"annotations":[],"instructor":"Conner Ardman","thumbnail":"https://i.vimeocdn.com/video/1299563444-b76eb5a619128bb70711c4501b34c35ebf33ca58ba8088da4_640x360?r=pad"},"questions":[],"references":[],"codeExample":{"runtime":"browser","arguments":[],"files":[{"name":"index.html","contents":"\u003c!--\nWelcome to our Playground!\n--\u003e\n\n\u003cp\u003eHello World\u003c/p\u003e","mode":420,"isEditable":true},{"name":"styles.css","contents":"/* Welcome to our Playground! */\n\n.blue {\n  color: blue;\n}","mode":420,"isEditable":true},{"name":"script.js","contents":"// Welcome to our Playground!\n\nconst paragraph = document.querySelector('p');\nparagraph.classList.add('blue');","mode":420,"isEditable":true}],"reactConfig":null},"links":[],"preReqs":[],"keyTerms":[{"name":"Dom Manipulation","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  Using JavaScript to change the content, structure or styles of the page. There\n  are a lot of functions and properties related to dom manipulation, but these are some\n  of the more common ones:\n\u003c/p\u003e\n\n\u003cp\u003e\u003cb\u003eGetting Elements:\u003c/b\u003e\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\n    \u003cb\u003edocument.getElementById(id)\u003c/b\u003e: Gets a single element based on its \u003cspan\u003eid\u003c/span\u003e attribute.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003edocument.querySelector(cssSelector)\u003c/b\u003e: Gets a single element based on a CSS \u003cb\u003eselector\u003c/b\u003e.\n    If multiple elements match the selector, returns the first one.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003edocument.querySelectorAll(cssSelector)\u003c/b\u003e: Gets all elements matching a CSS \u003cb\u003eselector\u003c/b\u003e\n    as a \u003cb\u003eNodeList\u003c/b\u003e.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003edocument.getElementsByTagName(tagName)\u003c/b\u003e: Gets all elements with a specific HTML \u003cb\u003etag\u003c/b\u003e\n    as an \u003cb\u003eHTMLCollection\u003c/b\u003e.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003edocument.getElementsByClassName(className)\u003c/b\u003e: Gets all elements with a specific \u003cb\u003eclass\u003c/b\u003e\n    as an \u003cb\u003eHTMLCollection\u003c/b\u003e.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cb\u003eSetting Attributes:\u003c/b\u003e\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\n    \u003cb\u003eelement.style.property\u003c/b\u003e: Sets a CSS property using inline styles, although\n    CSS classes should usually be preferred. The \u003cb\u003estyle\u003c/b\u003e object will only contain\n    inline styles, not those set with CSS.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003eelement.setAttribute('attribute', 'value')\u003c/b\u003e: Sets an HTML \u003cb\u003eattribute\u003c/b\u003e to\n    a specific value.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003eelement.textContent\u003c/b\u003e: The text content of an element, including that of any children. Note:\n    this is slightly different from \u003cb\u003eelement.innerText\u003c/b\u003e, which only gets text that is actually rendered\n    and \u003cb\u003eelement.innerHTML\u003c/b\u003e which gets the entire HTML code as a string.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003eelement.attribute\u003c/b\u003e: An alternative to the \u003cb\u003esetAttribute\u003c/b\u003e function, attributes can\n    be directly edited via their property name. For example, \u003cspan\u003eelement.value\u003c/span\u003e would get the value\n    attribute of the element.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003eelement.classList\u003c/b\u003e: An object for updating CSS \u003cb\u003eclasses\u003c/b\u003e. Specifically, this contains 3\n    primary functions: \u003cb\u003eadd(className)\u003c/b\u003e, \u003cb\u003eremove(className)\u003c/b\u003e and \u003cb\u003etoggle(className)\u003c/b\u003e.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cb\u003eAdding And Removing Elements:\u003c/b\u003e\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\n    \u003cb\u003edocument.createElement(tagName)\u003c/b\u003e: Creates a new HTML \u003cb\u003eelement\u003c/b\u003e.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003edocument.createTextNode(text)\u003c/b\u003e: Creates a text node as an alternative to setting \u003cb\u003etextContent\u003c/b\u003e.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003edocument.createDocumentFragment()\u003c/b\u003e: Creates a document fragment, which is useful for appending multiple\n    elements at once after a loop.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003eelement.appendChild(element)\u003c/b\u003e: Appends an element to the end of the contents of another element.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003eelement.append(node1, node2, ...)\u003c/b\u003e: Appends 1 or more nodes (elements or text)\n    to the end of the contents of another element.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003eelement.prepend(node1, node2, ...)\u003c/b\u003e: Prepends 1 or more nodes (elements or text)\n    to the beginning of the contents of another element.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003eelement.remove()\u003c/b\u003e: Removes the element from the DOM.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cb\u003eSizes and Scrolling:\u003c/b\u003e\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\n    \u003cb\u003ewindow.innerWidth\u003c/b\u003e: The width of the browser window.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003ewindow.innerHeight\u003c/b\u003e: The height of the browser window.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003ewindow.getComputedStyle(element)\u003c/b\u003e: Gets styles as they are currently rendered\n    on the page, converted to pixels.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003eelement.clientHeight\u003c/b\u003e: The height of visible content and padding.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003eelement.offsetHeight\u003c/b\u003e: The height of visible content, padding, borders and scrollbars.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003eelement.scrollHeight\u003c/b\u003e: The height of all content and padding, including content scrolled out of view.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003eelement.offsetTop\u003c/b\u003e: The distance from the outer top border of the element to the\n    inner top border of the nearest positioned parent.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003eelement.scrollIntoView()\u003c/b\u003e: Scrolls the container so the element is in view.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003eelement.scrollTo(optionsObj)\u003c/b\u003e: Scrolls the element to a specified \u003cb\u003etop\u003c/b\u003e value\n    in the options object. Additionally, \u003cspan\u003ebehavior: 'smooth'\u003c/span\u003e will create a smooth transition.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e","url":null,"kinds":[]}],"section":"","hasCodeExample":false},{"uid":"event-driven-programming","name":"Event-Driven Programming","module":null,"releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["frontendexpert"],"isAvailable":true},"description":"The old adage \"better to be proactive than reactive\" doesn't apply here!\n","video":{"vimeoId":"643345316","duration":24,"annotations":[{"title":"Note","content":"This callback should use a standard function to create a `this` context.","start":1357,"end":1363}],"instructor":"Conner Ardman","thumbnail":"https://i.vimeocdn.com/video/1299563095-2dc9806d920009f78f86026045f9c7d94adbf9ceb25c6faa9_640x360?r=pad"},"questions":[],"references":[],"codeExample":{"runtime":"browser","arguments":[],"files":[{"name":"index.html","contents":"\u003c!--\nWelcome to our Playground!\n--\u003e\n\n\u003cp\u003eHello World\u003c/p\u003e\n\n\u003cbutton\u003eClick Me!\u003c/button\u003e","mode":420,"isEditable":true},{"name":"styles.css","contents":"/* Welcome to our Playground! */\n\n","mode":420,"isEditable":true},{"name":"script.js","contents":"// Welcome to our Playground!\n\nconst button = document.querySelector('button');\n\nbutton.addEventListener('click', handleClick);\n\nfunction handleClick() {\n  document.querySelector('p').textContent = 'You clicked the button!';\n}","mode":420,"isEditable":true}],"reactConfig":null},"links":[],"preReqs":[],"keyTerms":[{"name":"Event-Driven Programming","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A programming paradigm where code runs as a response to events, usually initiated\n  by the user.\n\u003c/p\u003e\n\n\u003cp\u003e\n  To create an event listener, use \u003cspan\u003eelement.addEventListener(eventName, callback, useCapture)\u003c/span\u003e.\n  If the third argument is \u003cspan\u003etrue\u003c/span\u003e, the callback will fire during the \u003cb\u003ecapturing\u003c/b\u003e\n  phase rather than the default \u003cspan\u003ebubbling\u003c/span\u003e phase.\n\u003c/p\u003e\n\n\u003cp\u003e\n  Additionally, \u003cspan\u003eaddEventListener\u003c/span\u003e can be called with an options object as the\n  third parameter instead of the \u003cspan\u003euseCapture\u003c/span\u003e boolean. This object can contain the\n  following possible values:\n\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\n    \u003cb\u003ecapture\u003c/b\u003e: The same as the boolean argument option; \u003cspan\u003etrue\u003c/span\u003e for \u003cb\u003ecapturing\u003c/b\u003e, \u003cspan\u003efalse\u003c/span\u003e for \u003cb\u003ebubbling\u003c/b\u003e.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003eonce\u003c/b\u003e: If \u003cspan\u003etrue\u003c/span\u003e, automatically removes the event listener after the event fires once.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003epassive\u003c/b\u003e: If \u003cspan\u003etrue\u003c/span\u003e, indicates to the browser that \u003cspan\u003eevent.preventDefault()\u003c/span\u003e\n    will not be called. This is useful for the browser to optimize performance, particularly with mobile scrolling\n    events such as \u003cspan\u003etouchstart\u003c/span\u003e and \u003cspan\u003etouchmove\u003c/span\u003e to indicate to the browser that\n    scrolling will not be cancelled.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003esignal\u003c/b\u003e: An \u003cspan\u003eAbortSignal\u003c/span\u003e, usually coming from an \u003cspan\u003eAbortController\u003c/span\u003e. If\n    the signal's \u003cspan\u003eabort()\u003c/span\u003e method is called, the event listener will be removed.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\n\u003cp\u003e\n  To remove an event listener, call \u003cspan\u003eelement.removeEventListener(eventName, callback, useCapture)\u003c/span\u003e\n  or \u003cspan\u003eelement.removeEventListener(eventName, callback, optionsObj)\u003c/span\u003e with the\n  exact same parameters as were used to create the event listener.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Event Propagation","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  The process by which an event travels through the DOM to call event\n  listeners on nested elements. Event propagation consists\n  of 3 phases:\n\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\n    \u003cb\u003eCapturing\u003c/b\u003e: The event travels down from the root of the document to the\n    event target.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003eTarget\u003c/b\u003e: The event fires on the event target.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003eBubbling\u003c/b\u003e: The event travels up from the event target to the root of the\n    document.\n  \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\n  At any point in the propagation process, an event listener can call\n  \u003cspan\u003eevent.stopPropagation()\u003c/span\u003e, which will stop the propagation process.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Event Delegation","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  The process of using a single event listener on a parent element to manually\n  delegate events to children, rather than using event listeners on each child.\n\u003c/p\u003e\n\n\u003cp\u003e\n  Event delegation takes advantage of \u003cb\u003eevent propagation\u003c/b\u003e. For example, after\n  clicking on a button, that event will \u003cb\u003ebubble\u003c/b\u003e up to the parent container.\n\u003c/p\u003e\n\n\u003cp\u003e\n  In the event a container has many children that all have similar event listeners,\n  event delegation can make substantial performance improvements by lowering the\n  total number of active event listeners. The \u003cspan\u003eevent.target\u003c/span\u003e property can\n  then be used to determine which child was the source of the event.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]}],"section":"","hasCodeExample":false},{"uid":"promises","name":"Promises","module":null,"releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["frontendexpert"],"isAvailable":true},"description":"We promise you that by the time you finish watching this video, you'll understand how promises work in JavaScript. Then you'll be able to do really cool asynchronous stuff. And if you catch yourself confused, well you can finally abandon frontend development.","video":{"vimeoId":"639379283","duration":26,"annotations":[],"instructor":"Conner Ardman","thumbnail":"https://i.vimeocdn.com/video/1299564330-f5d1748f1f9943a6e8490df1ee0518eed914cbaa6dc9db946_640x360?r=pad"},"questions":[],"references":[],"codeExample":{"runtime":"javascript","arguments":["main.js"],"files":[{"name":"main.js","contents":"// Welcome to our Playground!\n\nconst promise = Promise.resolve(3);\n\npromise.then(value =\u003e value * 2).then(console.log);","mode":420,"isEditable":true}],"reactConfig":null},"links":[],"preReqs":[],"keyTerms":[{"name":"Promise","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  An object used for asynchronous operations. These objects have a state of\n  either \u003cspan\u003epending\u003c/span\u003e, \u003cspan\u003efulfilled\u003c/span\u003e or \u003cspan\u003erejected\u003c/span\u003e.\n\u003c/p\u003e\n\n\u003cp\u003e\n  A Promise is created with the \u003cspan\u003ePromise()\u003c/span\u003e constructor, which takes\n  in a callback function, oftentimes called the \u003cb\u003eexecutor\u003c/b\u003e. This callback function\n  has two callback functions as parameters:\n\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\u003cb\u003eresolve(value)\u003c/b\u003e: Fulfills the Promise and sets its value.\u003c/li\u003e\n  \u003cli\u003e\u003cb\u003ereject(error)\u003c/b\u003e: Rejects the Promise and sets an error message.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\n  The Promise object has three primary functions:\n\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\n    \u003cb\u003ethen(fulfilledFn rejectedFn)\u003c/b\u003e: Calls fulfilledFn if the Promise is\n    fulfilled and rejectedFn if it is rejected. Returns a new fulfilled Promise\n    with the return value of the callback function.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003ecatch(rejectedFn)\u003c/b\u003e: Calls rejectedFn if the Promise is rejected. returns a new\n    fulfilled Promise with the return value of the callback function.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003efinally(callback)\u003c/b\u003e: Calls the callback function whenever the Promise is\n    \u003cb\u003esettled\u003c/b\u003e (fulfilled or rejected).\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\n  Since these functions all return a new Promise, they can be chained together,\n  such as \u003cspan\u003epromise.then(doX).then(doY).catch(handleError).finally(doZ)\u003c/span\u003e.\n\u003c/p\u003e\n\u003c/div\u003e","url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise","kinds":["javascript"]},{"name":"async function","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A function declared using the \u003cspan\u003easync\u003c/span\u003e keyword, causing the\n  function to implicitly return a \u003cb\u003ePromise\u003c/b\u003e and allowing for usage of the\n  \u003cb\u003eawait\u003c/b\u003e keyword.\n\u003c/p\u003e\n\n\u003cp\u003e\n  Asynchronous functions are primarily an alternative syntax to chaining\n  calls to \u003cspan\u003ePromise.then\u003c/span\u003e.\n\u003c/p\u003e\n\u003c/div\u003e","url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function","kinds":["javascript"]},{"name":"await","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A keyword indicating that JavaScript should wait for a Promise to settle before\n  continuing execution of the code. Traditionally this is only available\n  in \u003cb\u003easync functions\u003c/b\u003e, but it can also be used at the top level\n  of \u003cb\u003emodules\u003c/b\u003e.\n\u003c/p\u003e\n\u003c/div\u003e","url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await","kinds":["javascript"]}],"section":"","hasCodeExample":false},{"uid":"working-with-the-server","name":"Working With The Server","module":null,"releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":true,"isFreeForStudents":false,"productRequired":["frontendexpert"],"isAvailable":true},"description":"Why did the man name his dog \"JavaScript\"? \n\nBecause it was always up for a game of fetch!","video":{"vimeoId":"646279268","duration":22,"annotations":[],"instructor":"Conner Ardman","thumbnail":"https://i.vimeocdn.com/video/1301587279-6f44a8546aff8e46863648456450dfa04fcde8c546a492cff_640x360?r=pad"},"questions":[],"references":[],"codeExample":{"runtime":"browser","arguments":[],"files":[{"name":"index.html","contents":"\u003c!--\nWelcome to our Playground!\n--\u003e\n\n\u003clabel for=\"first\"\u003eFirst Name\u003c/label\u003e\n\u003cinput id=\"first\" type=\"text\" /\u003e\n\n\u003clabel for=\"last\"\u003eLast Name\u003c/label\u003e\n\u003cinput id=\"last\" type=\"text\" /\u003e\n\n\u003cbutton\u003eFetch!\u003c/button\u003e\n\n\u003cdiv id=\"output\"\u003e\u003c/div\u003e","mode":420,"isEditable":true},{"name":"styles.css","contents":"/* Welcome to our Playground! */\n\nbutton {\n  margin: 0 12px;\n}\n\nlabel {\n  margin: 0 4px 0 12px;\n}\n\n#output {\n  border: 1px solid black;\n  margin: 12px;\n  padding: 12px;\n  min-height: 75px;\n}","mode":420,"isEditable":true},{"name":"script.js","contents":"// Welcome to our Playground!\n\nconst button = document.querySelector('button');\n\nbutton.addEventListener('click', handleClick);\n\nfunction handleClick() {\n  const url = new URL('https://www.algoexpert.io/api/hello-world');\n  url.searchParams.set('firstName', document.getElementById('first').value);\n  url.searchParams.set('lastName', document.getElementById('last').value);\n\n  fetch(url)\n    .then(res =\u003e res.text())\n    .then(text =\u003e {\n      const output = document.getElementById('output');\n      output.textContent = text;\n    });\n}","mode":420,"isEditable":true}],"reactConfig":null},"links":[],"preReqs":[],"keyTerms":[{"name":"fetch","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A JavaScript function for making network requests.\n\u003c/p\u003e\n\n\u003cp\u003e\n  \u003cspan\u003efetch(url)\u003c/span\u003e returns a pending Promise. Once the network request\n  completes, the promise will either resolve or reject. Any response other than a\n  network error will result in a resolved Promise. The \u003cspan\u003eurl\u003c/span\u003e parameter\n  can be either a string or a \u003cspan\u003eURL\u003c/span\u003e object.\n\u003c/p\u003e\n\n\u003cp\u003e\n  This function can also take an options object as a second parameter. These are\n  some of the more common options to use:\n\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\n    \u003cb\u003emethod\u003c/b\u003e: The request method as a string, such as \u003cspan\u003e'GET'\u003c/span\u003e\n    or \u003cspan\u003e'POST'\u003c/span\u003e.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003ebody\u003c/b\u003e: The body of the request, oftentimes used to pass \u003cspan\u003eFormData\u003c/span\u003e.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003eheaders\u003c/b\u003e: Headers to be added to the network request, oftentimes by creating\n    a \u003cspan\u003eHeaders\u003c/span\u003e object, although a standard object can be used as well.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003esignal\u003c/b\u003e: An \u003cb\u003eAbortSignal\u003c/b\u003e, usually coming from an \u003cb\u003eAbortController\u003c/b\u003e. If\n    the signal's \u003cspan\u003eabort()\u003c/span\u003e method is called, the request will be aborted.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\n  When the request comes back from the server, the Promise returned by fetch will\n  resolve to a \u003cspan\u003eResponse\u003c/span\u003e object. This object has a variety of properties and\n  methods for interacting with the network response. These are some of the most useful ones:\n\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\n    \u003cb\u003eresponse.text()\u003c/b\u003e: Returns a Promise with a text representation of the\n    response body.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003eresponse.json()\u003c/b\u003e: Returns a Promise with an object representation of the\n    response body.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003eresponse.status\u003c/b\u003e: A number representation of the response status code. A successful\n    request will be in the 200-299 range, most commonly 200.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003eresponse.ok\u003c/b\u003e: A boolean representation of the response status code. A successful\n    request in the 200-299 range will be \u003cspan\u003etrue\u003c/span\u003e, everything else evaluates to false.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003eresponse.headers\u003c/b\u003e: A \u003cspan\u003eHeaders\u003c/span\u003e object containing the headers\n    included with the response.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003c/div\u003e","url":"https://developer.mozilla.org/en-US/docs/Web/API/fetch","kinds":[]}],"section":"","hasCodeExample":false},{"uid":"timers-and-intervals","name":"Timers And Intervals","module":null,"releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["frontendexpert"],"isAvailable":true},"description":"Why did the JavaScript timer stop running?\n\nBecause it didn't do enough interval training. ( ͡~ ͜ʖ ͡°)","video":{"vimeoId":"642503401","duration":14,"annotations":[],"instructor":"Conner Ardman","thumbnail":"https://i.vimeocdn.com/video/1299563947-506d61cec561974d1d6f4d0507f18cd0992698af83140ae38_640x360?r=pad"},"questions":[],"references":[],"codeExample":{"runtime":"browser","arguments":[],"files":[{"name":"index.html","contents":"\u003c!--\nWelcome to our Playground!\n--\u003e\n\n\u003cp\u003eTicks: \u003cspan id=\"output\"\u003e0\u003c/span\u003e\u003c/p\u003e\n\n\u003cbutton id=\"stop\"\u003eStop\u003c/button\u003e\n\u003cbutton id=\"start\"\u003eStart\u003c/button\u003e","mode":420,"isEditable":true},{"name":"styles.css","contents":"/* Welcome to our Playground! */\n\n","mode":420,"isEditable":true},{"name":"script.js","contents":"// Welcome to our Playground!\n\nconst startButton = document.getElementById('start');\nconst stopButton = document.getElementById('stop');\nconst ouptut = document.getElementById('output');\n\nlet timerID;\n\nstartButton.addEventListener('click', startTimer);\nstopButton.addEventListener('click', stopTimer);\n\nfunction startTimer() {\n  timerID = setInterval(() =\u003e {\n    output.textContent++;\n  }, 500);\n}\n\nfunction stopTimer() {\n  clearInterval(timerID);\n}","mode":420,"isEditable":true}],"reactConfig":null},"links":[],"preReqs":[],"keyTerms":[{"name":"setInterval","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A JavaScript function for calling a function repeatedly over an interval.\n\u003c/p\u003e\n\n\u003cp\u003e\n  For example, \u003cspan\u003esetInterval(myFunction, 1000);\u003c/span\u003e would call myFunction\n  every second (however this could take longer if other code needs to finish running).\n\u003c/p\u003e\n\n\u003cp\u003e\n  This function returns an ID, and the interval can be cancelled by calling\n  \u003cspan\u003eclearInterval(intervalID);\u003c/span\u003e.\n\u003c/p\u003e\n\u003c/div\u003e","url":"https://developer.mozilla.org/en-US/docs/Web/API/setInterval","kinds":["javascript"]},{"name":"setTimeout","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A JavaScript function for delaying execution of a callback function.\n\u003c/p\u003e\n\n\u003cp\u003e\n  For example, \u003cspan\u003esetTimeout(myFunction, 1000);\u003c/span\u003e would call myFunction\n  after 1 second (however this could take longer if other code needs to finish running).\n\u003c/p\u003e\n\n\u003cp\u003e\n  This function returns an ID, and the timeout can be cancelled by calling\n  \u003cspan\u003eclearTimeout(timeoutID);\u003c/span\u003e.\n\u003c/p\u003e\n\u003c/div\u003e","url":"https://developer.mozilla.org/en-US/docs/Web/API/setTimeout","kinds":["javascript"]},{"name":"requestAnimationFrame","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A JavaScript function for calling a callback function before the next browser repaint.\n  These are oftentimes used for animations to update the animation every frame.\n\u003c/p\u003e\n\n\u003cp\u003e\n  For example, \u003cspan\u003erequestAnimationFrame(myFunction);\u003c/span\u003e would call myFunction before the next repaint.\n\u003c/p\u003e\n\n\u003cp\u003e\n  This function returns an ID, and the callback can be cancelled by calling\n  \u003cspan\u003ecancelAnimationFrame(animationFrameID);\u003c/span\u003e.\n\u003c/p\u003e\n\u003c/div\u003e","url":"https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame","kinds":["javascript"]}],"section":"","hasCodeExample":false},{"uid":"closures","name":"Closures","module":null,"releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["frontendexpert"],"isAvailable":true},"description":"This is an important concept that you absolutely must understand. Indeed, closures are used all the time in JavaScript—you've most likely already used them yourself without even knowing it! \n\nIf this is leaving you confused, worry not! The video below will give you the closure you seek.","video":{"vimeoId":"637329547","duration":13,"annotations":[],"instructor":"Conner Ardman","thumbnail":"https://i.vimeocdn.com/video/1299564082-cc4d4dbdffbd596b8987c3b35de86eef2b04fe7ff05cb0dae_640x360?r=pad"},"questions":[],"references":[],"codeExample":{"runtime":"javascript","arguments":["main.js"],"files":[{"name":"main.js","contents":"// Welcome to our Playground!\n\nfunction example() {\n  const num = 5;\n\n  return function () {\n    console.log(num);\n  };\n}\n\nconst innerFunction = example();\n\n// num still exists even though example returned!\ninnerFunction();","mode":420,"isEditable":true}],"reactConfig":null},"links":[],"preReqs":[],"keyTerms":[{"name":"Closure","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A function along with a saved reference to the \u003cb\u003elexical environment\u003c/b\u003e\n  it was defined in. Simply put, this means functions have access\n  to all of the variables in scope at the time of definition, even if the parent\n  function has returned.\n\u003c/p\u003e\n\u003c/div\u003e","url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures","kinds":[]},{"name":"Lexical Environment","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  An internal data structure used for keeping track of identifiers (variable and\n  function names) and their values. A lexical environment stores all of the\n  locally available identifiers as well as a reference to the parent environment.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Lexical Scoping","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  The scoping system in JavaScript that ensures all code blocks have access\n  to all identifiers in their parent environment. When an identifier is not defined\n  locally, JavaScript will look to the parent environment for it. If it is still not\n  found there, it will look in grandparent's environment and so on before looking in\n  the global environment.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]}],"section":"","hasCodeExample":false},{"uid":"this","name":"This","module":null,"releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["frontendexpert"],"isAvailable":true},"description":"This might be the most confusing concept in JavaScript.\n","video":{"vimeoId":"641037187","duration":16,"annotations":[],"instructor":"Conner Ardman","thumbnail":"https://i.vimeocdn.com/video/1299562932-9ef512feff3e74090de71dcb5e25fa1f45156207bdee4b3ea_640x360?r=pad"},"questions":[],"references":[],"codeExample":{"runtime":"browser","arguments":[],"files":[{"name":"index.html","contents":"\u003c!--\nWelcome to our Playground!\n--\u003e\n\n\u003cp\u003eOutput: \u003cspan id=\"output\"\u003e\u003c/span\u003e\u003c/p\u003e\n\n\u003cbutton\u003eClick Me!\u003c/button\u003e","mode":420,"isEditable":true},{"name":"styles.css","contents":"/* Welcome to our Playground! */\n\n","mode":420,"isEditable":true},{"name":"script.js","contents":"// Welcome to our Playground!\n\nconst button = document.querySelector('button');\nconst ouptut = document.getElementById('output');\n\nbutton.addEventListener('click', showThis);\n\nfunction showThis() {\n  output.textContent = this;\n}","mode":420,"isEditable":true}],"reactConfig":null},"links":[],"preReqs":[],"keyTerms":[{"name":"this","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A JavaScript keyword for referencing the context in which the current code is running.\n\u003c/p\u003e\n\n\u003cp\u003e\n  The value of \u003cspan\u003ethis\u003c/span\u003e is determined at runtime. In the browser, it\n  will follow these general rules:\n\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003eAt the top level of a file (the global context), \u003cspan\u003ethis\u003c/span\u003e refers to the global object, which is the \u003cspan\u003ewindow\u003c/span\u003e.\u003c/li\u003e\n  \u003cli\u003eIn a standard function without strict mode, \u003cspan\u003ethis\u003c/span\u003e refers to the global object, which is the \u003cspan\u003ewindow\u003c/span\u003e.\u003c/li\u003e\n  \u003cli\u003eIn a standard function in strict mode, \u003cspan\u003ethis\u003c/span\u003e is \u003cspan\u003eundefined\u003c/span\u003e.\u003c/li\u003e\n  \u003cli\u003eIn an object method, \u003cspan\u003ethis\u003c/span\u003e refers to that object.\u003c/li\u003e\n  \u003cli\u003eIn a constructor function, \u003cspan\u003ethis\u003c/span\u003e refers to the object being constructed.\u003c/li\u003e\n  \u003cli\u003e\n    When using event listeners, the object being listened to will be bound to \u003cspan\u003ethis\u003c/span\u003e, assuming\n    a standard function was used. For example, \u003cspan\u003eelement.addEventlistener('click', func)\u003c/span\u003e\n    would bind \u003cspan\u003eelement\u003c/span\u003e to \u003cspan\u003ethis\u003c/span\u003e inside of \u003cspan\u003efunc\u003c/span\u003e.\n\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\n  Arrow functions do not create their own \u003cspan\u003ethis\u003c/span\u003e context, instead\n  they retain the value of the enclosing context.\n\u003c/p\u003e\n\n\u003cp\u003e\n  JavaScript provides three functions for binding the value of this to functions:\n\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\n    \u003cb\u003efunc.bind(thisArg)\u003c/b\u003e: Returns a new function with \u003cspan\u003ethisArg\u003c/span\u003e bound to \u003cspan\u003ethis\u003c/span\u003e.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003efunc.call(thisArg, x, y)\u003c/b\u003e: Calls \u003cspan\u003efunc(x, y)\u003c/span\u003e with \u003cspan\u003ethisArg\u003c/span\u003e bound to \u003cspan\u003ethis\u003c/span\u003e.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003efunc.apply(thisArg, [x, y])\u003c/b\u003e: Calls \u003cspan\u003efunc(x, y)\u003c/span\u003e with \u003cspan\u003ethisArg\u003c/span\u003e bound to \u003cspan\u003ethis\u003c/span\u003e.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e","url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this","kinds":["javascript"]}],"section":"","hasCodeExample":false},{"uid":"classes","name":"Classes","module":null,"releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["frontendexpert"],"isAvailable":true},"description":"If you've only worked with languages that use class-based inheritance so far, then JavaScript's prototype-based inheritance will seem like anything but prototypical.\n","video":{"vimeoId":"640605666","duration":33,"annotations":[],"instructor":"Conner Ardman","thumbnail":"https://i.vimeocdn.com/video/1299563805-ec22250cbf4af1af3237956b791b855745e41748d3f037eb9_640x360?r=pad"},"questions":[],"references":[],"codeExample":{"runtime":"javascript","arguments":["main.js"],"files":[{"name":"main.js","contents":"// Welcome to our Playground!\n\nclass Person {\n  #name;\n\n  constructor(name) {\n    this.#name = name;\n  }\n\n  speak() {\n    console.log(`Hello, this is ${this.#name}`);\n  }\n\n  get name() {\n    console.log('Getting Name');\n    return this.#name;\n  }\n\n  set name(value) {\n    console.log('Setting Name');\n    this.#name = value;\n  }\n}\n\nconst person = new Person('Clement');\nperson.speak();\n\nperson.name = 'Conner';\nconsole.log(person.name);","mode":420,"isEditable":true}],"reactConfig":null},"links":[],"preReqs":[],"keyTerms":[{"name":"Prototypal Inheritance","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  The inheritance model used in JavaScript. The key difference between prototypal\n  inheritance and classical inheritance is that in prototypal inheritance objects only inherit\n  from other objects, rather than using class blueprints.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Prototype Chain","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  The chain of inheritance created through object prototypes. When a property\n  does not exist on an object, JavaScript will look to its prototype. If it\n  doesn't exist on that object, it will look to its prototype and so on until\n  the chain ends with a null prototype.\n\u003c/p\u003e\n\n\u003cp\u003e\n  Internally, the prototype is stored on the \u003cspan\u003e[[Prototype]]\u003c/span\u003e property,\n  but we cannot directly access this property. Instead, we have a few alternative\n  ways to get and set prototypes:\n\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\n    \u003cspan\u003eobj.__proto__\u003c/span\u003e: Although being deprecated, this property was the\n    original way to get and set the prototype of an object and is still useful for debugging.\n  \u003c/li\u003e\n\n  \u003cli\u003e\n    \u003cspan\u003eObject.getPrototypeOf(obj)\u003c/span\u003e: Returns the prototype object of \u003cspan\u003eobj\u003c/span\u003e.\n  \u003c/li\u003e\n\n  \u003cli\u003e\n    \u003cspan\u003eObject.setPrototypeOf(obj, proto)\u003c/span\u003e: Sets the prototype object of \u003cspan\u003eobj\u003c/span\u003e to \u003cspan\u003eproto\u003c/span\u003e.\n  \u003c/li\u003e\n\n  \u003cli\u003e\n    \u003cspan\u003eObject.create(proto)\u003c/span\u003e: Creates a new object with the prototype set to \u003cspan\u003eproto\u003c/span\u003e.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e","url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain","kinds":[]},{"name":"Function Constructor","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A function intended to be used to construct an object using the \u003cspan\u003enew\u003c/span\u003e\n  operator.\n\u003c/p\u003e\n\n\u003cp\u003e\n  When the new operator is used, a new object is created automatically. The prototype\n  of the new object is then set to the \u003cspan\u003eprototype\u003c/span\u003e property of the\n  constructor function (remember functions are just objects). Finally, the\n  constructor function is called with the new object bound to \u003cspan\u003ethis\u003c/span\u003e.\n\u003c/p\u003e\n\n\u003cp\u003e\n  By default the \u003cspan\u003eprototype\u003c/span\u003e property of the function will simply be an\n  object with its \u003cspan\u003econstructor\u003c/span\u003e property set to the function itself.\n  However, this can be changed, for example:\n\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"code-wrapper prism\"\u003e\n  \u003cpre\n    class=\"line-numbers\"\n  \u003e\u003ccode class=\"language-javascript\"\u003efunction Person(name) {\n  this.name = name;\n}\n\n// This object will become the [[Prototype]] of\n// any objects resulting from a new Person() call\nPerson.prototype = {\n  constructor: Person,\n  isHuman: true\n}\n\nconst clement = new Person('Clement');\nconsole.log(clement.isHuman); // true, comes from the prototype object.\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Class","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A JavaScript syntax to emulate that of classical inheritance, although\n  for the most part it is syntactic sugar on top of function constructors (classes\n  are actually just functions under the hood).\n\u003c/p\u003e\n\n\u003cp\u003e\n  An example class would look like this:\n\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"code-wrapper prism\"\u003e\n  \u003cpre\n    class=\"line-numbers\"\n  \u003e\u003ccode class=\"language-javascript\"\u003eclass Person {\n  static isHuman = true; // public static field\n  #age; // private instance field\n\n  constructor(name, age) {\n    this.name = name; // public instance field\n    this.#age = age;\n  }\n\n  // instance method\n  speak() {\n    console.log('Hello this is ' + this.name);\n  }\n\n  // instance getter function\n  get age() {\n    return this.#age;\n  }\n\n  // instance setter function\n  set age(value) {\n    this.#age = value;\n  }\n}\n\nconst conner = new Person('Conner', 24);\nconner.speak(); // logs \"Hello this Conner\"\nconsole.log(conner.age); // calls getter function, logs 24\nconner.age = 25; // Calls setter function\nconsole.log(conner.#age); // Error cannot access private field\nconsole.log(conner.name); // \"Conner\"\nconsole.log(conner.isHuman); // undefined\nconsole.log(Person.isHuman); // true\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  Classes can also extend other classes, which internally creates a prototype chain.\n  In the class constructor, \u003cspan\u003esuper\u003c/span\u003e can be used to call the parent constructor.\n  \u003cspan\u003esuper.method()\u003c/span\u003e can also be used in the class to call parent classes.\n\n  For example:\n\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"code-wrapper prism\"\u003e\n  \u003cpre\n    class=\"line-numbers\"\n  \u003e\u003ccode class=\"language-javascript\"\u003eclass Child extends Person {\n  constructor(name, age, grade) {\n    super(name, age);\n    this.grade = grade;\n  }\n}\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e","url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes","kinds":[]}],"section":"","hasCodeExample":false},{"uid":"currying","name":"Currying","module":null,"releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["frontendexpert"],"isAvailable":true},"description":"currying(\"is\")(\"kind\")(\"of\")(\"weird\")(\"so\")(\"pay\")(\"close\")(\"attention\")","video":{"vimeoId":"636821292","duration":8,"annotations":[],"instructor":"Conner Ardman","thumbnail":"https://i.vimeocdn.com/video/1299563615-6ada3dbca79f106c4c78ecb83700caf1ffdf8a367af913e0e_640x360?r=pad"},"questions":[],"references":[],"codeExample":{"runtime":"javascript","arguments":["main.js"],"files":[{"name":"main.js","contents":"// Welcome to our Playground!\n\nfunction curriedSum(a) {\n  return function (b) {\n    return function (c) {\n      return a + b + c;\n    };\n  };\n}\n\nconsole.log(curriedSum(1)(2)(3));","mode":420,"isEditable":true}],"reactConfig":null},"links":[],"preReqs":[],"keyTerms":[{"name":"Currying","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  The process of transforming a function to treat its parameters as a sequence\n  of individual function calls that each take one parameter. For example,\n  \u003cspan\u003efunc(a, b, c)\u003c/span\u003e would become \u003cspan\u003efunc(a)(b)(c)\u003c/span\u003e.\n\u003c/p\u003e\n\n\u003cp\u003e\n  Currying is achieved by creating functions that return other functions, taking\n  advantage of \u003cb\u003eclosures\u003c/b\u003e. For example, a curried sum function would look like\n  this:\n\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"code-wrapper prism\"\u003e\n  \u003cpre\n    class=\"line-numbers\"\n  \u003e\u003ccode class=\"language-javascript\"\u003efunction curriedSum(a) {\n  return function(b) {\n    return a + b;\n  };\n}\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  This could then be used to create partial versions of this function, for\n  example an \"add four\" function:\n\u003c/p\u003e\n\u003c/div\u003e\n\n\n\u003cdiv class=\"code-wrapper prism\"\u003e\n  \u003cpre\n    class=\"line-numbers\"\n  \u003e\u003ccode class=\"language-javascript\"\u003econst addFour = curriedSum(4);\naddFour(10); // 14\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e","url":null,"kinds":[]}],"section":"","hasCodeExample":false},{"uid":"generators","name":"Generators","module":null,"releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["frontendexpert"],"isAvailable":true},"description":"While these bad boys won't bring the lights back on during a blackout, they'll reliably and efficiently power your applications whenever they are called upon.","video":{"vimeoId":"635899847","duration":11,"annotations":[],"instructor":"Conner Ardman","thumbnail":"https://i.vimeocdn.com/video/1299562190-9b9e2810d0321f5538b7da80e9837a2e8004440a08a9ed3e4_640x360?r=pad"},"questions":[],"references":[],"codeExample":{"runtime":"javascript","arguments":["main.js"],"files":[{"name":"main.js","contents":"// Welcome to our Playground!\n\nfunction* genNumbers() {\n  const x = yield 1;\n  yield x + 2;\n  yield 3;\n}\n\nconst generatorObj = genNumbers();\nconsole.log(generatorObj.next().value);\nconsole.log(generatorObj.next(3).value);\nconsole.log(generatorObj.return(7).value);\nconsole.log(generatorObj.next().value);","mode":420,"isEditable":true}],"reactConfig":null},"links":[],"preReqs":[],"keyTerms":[{"name":"Generator","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  An iterable object created by using a \u003cb\u003egenerator function\u003c/b\u003e.\n\u003c/p\u003e\n\n\u003cp\u003e\n  A \u003cb\u003egenerator function\u003c/b\u003e is defined using \u003cspan\u003efunction*\u003c/span\u003e. Then each\n  \u003cspan\u003eyield\u003c/span\u003e results in another item being added to the iterable \u003cb\u003egenerator object\u003c/b\u003e.\n\u003c/p\u003e\n\n\u003cp\u003e\n  The \u003cb\u003egenerator object\u003c/b\u003e has three methods:\n\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\n    \u003cb\u003enext(value)\u003c/b\u003e: Returns an object with the next value in the iterator and a \u003ci\u003edone\u003c/i\u003e boolean.\n    Optionally passes a value back into the generator function.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003ereturn(value)\u003c/b\u003e: Adds a passed in argument to the iterable results and ends iteration.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003ethrow(error)\u003c/b\u003e: Throws an error, stopping code execution unless the error is caught.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\n  For example:\n\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"code-wrapper prism\"\u003e\n  \u003cpre\n    class=\"line-numbers\"\n  \u003e\u003ccode class=\"language-javascript\"\u003efunction* genNumbers() {\n  const x = yield 1;\n  yield x + 2;\n  yield 3;\n}\n\nconst generatorObj = genNumbers();\nconsole.log(generatorObj.next().value); // 1\nconsole.log(generatorObj.next(3).value); // 5\nconsole.log(generatorObj.return(7).value); // 7\nconsole.log(generatorObj.next().value); // undefined\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e","url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator","kinds":["javascript"]}],"section":"","hasCodeExample":false},{"uid":"modules","name":"Modules","module":null,"releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["frontendexpert"],"isAvailable":true},"description":"Basically just a fancier way of saying \"files\".","video":{"vimeoId":"641370631","duration":20,"annotations":[],"instructor":"Conner Ardman","thumbnail":"https://i.vimeocdn.com/video/1299563194-f861ef4c1be9502dd8cd0bc36cd003d826945e4eeedc7eb42_640x360?r=pad"},"questions":[],"references":[],"codeExample":{"runtime":"javascript","arguments":["main.js"],"files":[{"name":"main.js","contents":"// Welcome to our Playground!\n\n(function () {\n  console.log('This is an IIFE!');\n})();","mode":420,"isEditable":true}],"reactConfig":null},"links":[],"preReqs":[],"keyTerms":[{"name":"Module","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  JavaScript code that runs in isolation, without polluting the global namespace.\n\u003c/p\u003e\n\n\u003cp\u003e\n  Traditionally modules were implemented using \u003cb\u003eimmediately invoked function expressions\u003c/b\u003e,\n  but in modern JavaScript there is a \u003cspan\u003etype=\"module\"\u003c/span\u003e attribute that\n  can be added to script tags. This attribute will have a few key effects:\n\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eIdentifiers at the top level will be scoped to the file rather than globally.\u003c/li\u003e\n  \u003cli\u003eThe file will be in strict mode by default.\u003c/li\u003e\n  \u003cli\u003eThe \u003cspan\u003eawait\u003c/span\u003e keyword can be used at the top level.\u003c/li\u003e\n  \u003cli\u003eThe script will be deferred by default.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\n  Modules can then access each other by using the \u003cspan\u003eimport\u003c/span\u003e and\n  \u003cspan\u003eexport\u003c/span\u003e keywords. For example:\n\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"code-wrapper prism\"\u003e\n  \u003cpre\n    class=\"line-numbers\"\n  \u003e\u003ccode class=\"language-javascript\"\u003e// File 1:\nexport const num = 10;\n\n// File 2:\nimport { num } from 'file1.js';\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e","url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules","kinds":[]},{"name":"Immediately Invoked Function Expression","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  Also called an IIFE, a function that is immediately called after its definition.\n  This can be useful for a variety of purposes, most notably to create a function\n  scope to isolate code with.\n\u003c/p\u003e\n\n\u003cp\u003e\n  There are a few ways to define an IIFE, but the most common is using an anonymous\n  or arrow function. This function is then wrapped in parentheses, which causes\n  it to be treated as an expression. Finally, \u003cspan\u003e()\u003c/span\u003e is added to call\n  the function. For example:\n\u003c/p\u003e\n\u003c/div\u003e\n\n\n\u003cdiv class=\"code-wrapper prism\"\u003e\n  \u003cpre\n    class=\"line-numbers\"\n  \u003e\u003ccode class=\"language-javascript\"\u003e(function() {\n  console.log('Wahoo!');\n})();\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e","url":"https://developer.mozilla.org/en-US/docs/Glossary/IIFE","kinds":[]}],"section":"","hasCodeExample":false},{"uid":"event-loop","name":"The Event Loop","module":null,"releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["frontendexpert"],"isAvailable":true},"description":"If JavaScript is a single-threaded programming language, then how is it able run code asynchronously? \n\nThe answer might throw you for a loop.","video":{"vimeoId":"642133958","duration":28,"annotations":[],"instructor":"Conner Ardman","thumbnail":"https://i.vimeocdn.com/video/1299562532-14b2ad735266e58ad170dcc2007b404958835b760777d4c29_640x360?r=pad"},"questions":[],"references":[],"codeExample":{"runtime":"javascript","arguments":["main.js"],"files":[{"name":"main.js","contents":"// Welcome to our Playground!\n\nconsole.log('first');\n\nsetTimeout(() =\u003e {\n  console.log('second');\n}, 0);\n\nPromise.resolve('third')\n  .then(console.log)\n  .then(() =\u003e console.log('fourth'));\n\nconsole.log('fifth');","mode":420,"isEditable":true}],"reactConfig":null},"links":[],"preReqs":[],"keyTerms":[{"name":"JavaScript Engine","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A program used to execute JavaScript code.\n\u003c/p\u003e\n\n\u003cp\u003e\n  These engines can differ a lot in implementation across browsers, but for the\n  most part they contain two primary components:\n\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\n    \u003cb\u003eHeap\u003c/b\u003e: Used for memory allocation to store objects. This can be thought\n    of as a largely unstructured data store.\n  \u003c/li\u003e\n\n  \u003cli\u003e\n    \u003cb\u003eCall Stack\u003c/b\u003e: A stack data structure used to keep track of the currently\n    executing function. Each function call pushes a \u003ci\u003estack frame\u003c/i\u003e onto the\n    stack, which contains information about the function and its local variables.\n    When a function ends, it is popped off the stack. When the stack is empty, there\n    is no code currently running.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"JavaScript Runtime Environment","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  The larger environment that JavaScript is executed in. In the browser, this\n  environment provides access to a variety of \u003cb\u003eweb APIs\u003c/b\u003e. These APIs include\n  the functions for timers, HTTP requests, DOM manipulation and much more.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Event Loop","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  The concurrency model within JavaScript. This is a constantly running loop within\n  the browser, roughly following this algorithm:\n\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003eRemove one task from the \u003cb\u003etask queue\u003c/b\u003e.\u003c/li\u003e\n  \u003cli\u003eExecute code until the \u003cb\u003ecall stack\u003c/b\u003e is empty.\u003c/li\u003e\n  \u003cli\u003eExecute microtasks one at a time until the \u003cb\u003emicrotask queue\u003c/b\u003e is empty.\u003c/li\u003e\n  \u003cli\u003eRender any changes to the DOM.\u003c/li\u003e\n  \u003cli\u003eGo to step one.\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/div\u003e","url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop","kinds":[]},{"name":"Task Queue","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A queue data structure for storing asynchronous callbacks to be added to the\n  call stack. This queue is also known as the \"Message Queue\", \"Callback Queue\"\n  or \"Macrotask Queue\".\n\u003c/p\u003e\n\n\u003cp\u003e\n  \u003cb\u003eWeb APIs\u003c/b\u003e move callbacks into the \u003cb\u003etask queue\u003c/b\u003e, where they\n  wait for the \u003cb\u003ecall stack\u003c/b\u003e to be empty before executing.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Microtask Queue","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A queue data structure, similar to the \u003cb\u003etask queue\u003c/b\u003e, used for storing\n  microtasks.\n\u003c/p\u003e\n\n\u003cp\u003e\n  Microtasks are primarily used for callback functions passed to \u003cspan\u003epromise.then()\u003c/span\u003e,\n  \u003cspan\u003epromise.catch()\u003c/span\u003e and \u003cspan\u003epromise.finally()\u003c/span\u003e as well as their\n  async/await equivalents. Additionally, microtasks can be manually queued using the\n  \u003cspan\u003equeueMicrotask()\u003c/span\u003e function.\n\u003c/p\u003e\n\n\u003cp\u003e\n  Microtasks can be considered to have a higher priority than standard tasks, since\n  the entire microtask queue must be empty before the browser will move on to a task.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Chunking","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A process for preventing slow functions from clogging the \u003cb\u003ecall stack\u003c/b\u003e and thus\n  making the entire page unresponsive. The core idea of chunking is to take large\n  tasks and split them up into smaller ones.\n\u003c/p\u003e\n\n\u003cp\u003e\n  In practice, chunking is usually achieved by using \u003cspan\u003esetTimeout\u003c/span\u003e\n  after some number of iterations, forcing future chunks to move to the end of\n  the task queue.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]}],"section":"","hasCodeExample":false},{"uid":"web-workers","name":"Web Workers","module":null,"releaseDate":"2022-02-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["frontendexpert"],"isAvailable":true},"description":"JavaScript just became multithreaded.","video":{"vimeoId":"665391555","duration":14,"annotations":[],"instructor":"Conner Ardman","thumbnail":""},"questions":[],"references":[],"codeExample":{"runtime":"javascript","arguments":["main.js"],"files":[{"name":"main.js","contents":"// Welcome to our Playground!\n\n","mode":420,"isEditable":true}],"reactConfig":null},"links":[],"preReqs":[],"keyTerms":[{"name":"Web Worker","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A browser API for running scripts in a separate thread from the main execution\n  thread.\n\u003c/p\u003e\n\n\u003cp\u003e\n  A worker object is created with the \u003cspan\u003eWorker(filePath)\u003c/span\u003e constructor\n  function. The argument to this function is a path to another JavaScript\n  file that will run in a separate thread.\n\u003c/p\u003e\n\n\u003cp\u003e\n  Workers can send messages back and forth with the main thread via the\n  \u003cspan\u003epostMessage(message)\u003c/span\u003e method and the \u003cspan\u003eonmessage\u003c/span\u003e\n  event. For example:\n\u003c/p\u003e\n\n\u003c/div\u003e\n\n\u003cdiv class=\"code-wrapper prism\"\u003e\n\u003cpre\n  class=\"line-numbers\"\n\u003e\u003ccode class=\"language-javascript\"\u003e// main JavaScript file\nconst worker = new Worker('worker.js');\nworker.postMessage('hello');\nworker.addEventListener('message', (event) =\u003e {\n  console.log(event.data); // 'world'\n});\n\n// worker.js\npostMessage('world');\naddEventListener('message', (event) =\u003e {\n  console.log(event.data); // 'hello'\n});\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  In general, most workers are \u003ci\u003ededicated workers\u003c/i\u003e, meaning they can only\n  communicate with the script that created them. However, a\n  \u003cspan\u003eSharedWorker\u003c/span\u003e can also be created to share a worker with multiple\n  tabs or iframes. That said, SharedWorkers still do not have widespread\n  support across browsers.\n\u003c/p\u003e\n\u003c/div\u003e","url":"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API","kinds":[]}],"section":"","hasCodeExample":false},{"uid":"browser-storage","name":"Browser Storage","module":null,"releaseDate":"2022-02-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["frontendexpert"],"isAvailable":true},"description":"These cookies tend to persist far longer than the delicious ones in your cupboard!","video":{"vimeoId":"666409349","duration":28,"annotations":[],"instructor":"Conner Ardman","thumbnail":""},"questions":[],"references":[],"codeExample":{"runtime":"browser","arguments":[],"files":[{"name":"index.html","contents":"\u003c!--\nWelcome to our Playground!\n--\u003e\n\n\u003cdiv\u003e\n  \u003clabel for=\"input-key\"\u003eKey:\u003c/label\u003e\n  \u003cinput id=\"input-key\" type=\"text\" /\u003e\n\n  \u003clabel for=\"input-value\"\u003eValue:\u003c/label\u003e\n  \u003cinput id=\"input-value\" type=\"text\" /\u003e\n\n  \u003cbutton id=\"save\"\u003eSave\u003c/button\u003e\n\u003c/div\u003e\n\n\u003cdiv\u003e\n  \u003clabel for=\"output-key\"\u003eKey:\u003c/label\u003e\n  \u003cinput id=\"output-key\" type=\"text\" /\u003e\n\n  \u003cbutton id=\"get\"\u003eGet Value\u003c/button\u003e\n  \u003cp id=\"output\"\u003e\u003c/p\u003e\n\u003c/div\u003e","mode":420,"isEditable":true},{"name":"styles.css","contents":"/* Welcome to our Playground! */\n\nbody {\n  display: flex;\n  gap: 12px;\n}\n\ndiv {\n  display: flex;\n  flex-direction: column;\n  background-color: lightgrey;\n  padding: 12px;\n}\n\nlabel {\n  margin-bottom: 4px;\n}\n\ninput {\n  margin-bottom: 8px;\n}","mode":420,"isEditable":true},{"name":"script.js","contents":"// Welcome to our Playground!\n\nconst saveButton = document.getElementById('save');\nconst getButton = document.getElementById('get');\nconst output = document.getElementById('output');\n\nsaveButton.addEventListener('click', () =\u003e {\n  const key = document.getElementById('input-key').value;\n  const value = document.getElementById('input-value').value;\n\n  localStorage.setItem(key, value);\n});\n\ngetButton.addEventListener('click', () =\u003e {\n  const key = document.getElementById('output-key').value;\n  output.textContent = localStorage.getItem(key);\n});","mode":420,"isEditable":true}],"reactConfig":null},"links":[],"preReqs":[],"keyTerms":[{"name":"Cookies","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  The simplest form of browser storage, comprised of string key-value pairs.\n  Cookies are most often set by the server to store information such as the\n  logged in user account, however they can also be created via the\n  \u003cspan\u003edocument.cookie\u003c/span\u003e JavaScript property.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Local Storage","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  Part of the web storage API, a system for storing information in the browser\n  without any expiration date. Values can be added to local storage with\n  \u003cspan\u003elocalStorage.setItem('key', 'value')\u003c/span\u003e, and the value can be\n  retrieved with \u003cspan\u003elocalStorage.getItem('key')\u003c/span\u003e.\n\u003c/p\u003e\n\u003c/div\u003e","url":"https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage","kinds":[]},{"name":"Session Storage","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  Part of the web storage API, a system for storing information in the browser\n  that expires at the end of a session. Values can be added to session storage\n  with \u003cspan\u003esessionStorage.setItem('key', 'value')\u003c/span\u003e, and the value can\n  be retrieved with \u003cspan\u003esessionStorage.getItem('key')\u003c/span\u003e.\n\u003c/p\u003e\n\u003c/div\u003e","url":"https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage","kinds":[]},{"name":"IndexedDB","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A browser API for storing complex objects. IndexedDB uses \u003ci\u003eobject stores\u003c/i\u003e,\n  which are similar to tables in relational databases. Each object in the\n  object store must then have a unique \u003ci\u003ekey\u003c/i\u003e used to identify it.\n\u003c/p\u003e\n\u003c/div\u003e","url":"https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API","kinds":[]}],"section":"","hasCodeExample":false},{"uid":"data-structures-with-js","name":"Data Structures With JavaScript","module":null,"releaseDate":"2022-02-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["frontendexpert"],"isAvailable":true},"description":"You thought you'd escape data structures in FrontendExpert, didn't you?\n\nWell, think again.","video":{"vimeoId":"666647751","duration":26,"annotations":[{"title":"Note","content":"The curr != null in this loop is unnecessary since curr can't be null.","start":1413,"end":1419}],"instructor":"Conner Ardman","thumbnail":""},"questions":[],"references":[],"codeExample":{"runtime":"javascript","arguments":["main.js"],"files":[{"name":"main.js","contents":"// Welcome to our Playground!\n\nconst map = new Map();\nmap.set('num', 42);\n\nconsole.log(map.get('num'));","mode":420,"isEditable":true}],"reactConfig":null},"links":[],"preReqs":[],"keyTerms":[{"name":"Map","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A built-in JavaScript class for holding key-value pairs. While similar to\n  standard objects, maps have a few key differences:\n\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\n    Map keys can be of any type, while object keys must be strings or symbols.\n  \u003c/li\u003e\n  \u003cli\u003e\n    Maps maintain insertion order for iteration, while objects do not.\n  \u003c/li\u003e\n  \u003cli\u003e\n    Maps cannot easily be converted to JSON, while objects can.\n  \u003c/li\u003e\n  \u003cli\u003e\n    Objects oftentimes utilize the prototype chain for inheritance, while\n    Maps cannot do this. \n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e","url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map","kinds":[]},{"name":"Set","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A built-in JavaScript class for holding unique values of any type. Values are\n  considered unique if they are different primitives or references to different\n  objects (this means that two different objects with the same contents are\n  considered unique from each other). Values in Sets are kept in insertion order\n  for when the Set is iterated over.\n\u003c/p\u003e\n\u003c/div\u003e","url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set","kinds":[]},{"name":"WeakMap","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A built-in JavaScript class for holding key-value pairs similar to the Map\n  class. There are two primary differences between Map and WeakMap:\n\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\n    WeakMap can only have objects as keys, primitive values cannot be added as\n    keys.\n  \u003c/li\u003e\n  \u003cli\u003e\n    WeakMaps hold \"weak\" references to objects, meaning that they do not prevent\n    the objects from being garbage collected. If no other references to an\n    object exist, it can be garbage collected and automatically removed from\n    the WeakMap. As a result, WeakMaps cannot be iterated over.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003c/div\u003e","url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap","kinds":[]},{"name":"WeakSet","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A built-in JavaScript class for holding unique values similar to the Set\n  class. However, a WeakSet acts just like a WeakMap, meaning that the values\n  must all be objects, and references to those objects are \"weakly\" held.\n\u003c/p\u003e\n\n\u003c/div\u003e","url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet","kinds":[]}],"section":"","hasCodeExample":false},{"uid":"javascript-frameworks","name":"JavaScript Frameworks","module":null,"releaseDate":"2022-02-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["frontendexpert"],"isAvailable":true},"description":"We promise this isn't another \"React good, Angular bad\" type of video.","video":{"vimeoId":"667615131","duration":13,"annotations":[],"instructor":"Conner Ardman","thumbnail":""},"questions":[],"references":[],"codeExample":{"runtime":"javascript","arguments":["main.js"],"files":[{"name":"main.js","contents":"// Welcome to our Playground!\n\n","mode":420,"isEditable":true}],"reactConfig":null},"links":[],"preReqs":[],"keyTerms":[{"name":"JavaScript Library","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A collection of pre-written JavaScript code, usually in the form of\n  functions that can be called throughout other projects to simplify the\n  development process.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"JavaScript Framework","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A collection of pre-written JavaScript code that provides some additional\n  structure to a project. It is often said that frameworks are more\n  \"opinionated\" than libraries, or that frameworks generally call your code\n  as opposed to your code calling a library.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]}],"section":"","hasCodeExample":false},{"uid":"typescript","name":"TypeScript","module":null,"releaseDate":"2022-02-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["frontendexpert"],"isAvailable":true},"description":"JavaScript, but better in every single way.\n\nSeriously.","video":{"vimeoId":"668450709","duration":21,"annotations":[],"instructor":"Conner Ardman","thumbnail":""},"questions":[],"references":[],"codeExample":{"runtime":"typescript","arguments":["main.ts"],"files":[{"name":"main.ts","contents":"// Welcome to our Playground!\n\nfunction add(x: number, y: number): number {\n  return x + y;\n}\n\nconsole.log(add(2, 3));","mode":420,"isEditable":true}],"reactConfig":null},"links":[],"preReqs":[],"keyTerms":[{"name":"TypeScript","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A superset of JavaScript adding static typing. The primary purpose of using\n  TypeScript is to prevent bugs related to incorrect types and to improve the\n  development workflow. Since browsers only understand standard JavaScript,\n  TypeScript is compiled back into JavaScript.\n\u003c/p\u003e\n\u003c/div\u003e","url":"https://www.typescriptlang.org/","kinds":[]}],"section":"","hasCodeExample":false},{"uid":"debugging-strategies","name":"Debugging Strategies","module":null,"releaseDate":"2022-02-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["frontendexpert"],"isAvailable":true},"description":"console.log('did we hit this?');\nconsole.log('what about this?');\nconsole.log('why isn't this working?');\nconsole.log('i give up');","video":{"vimeoId":"669958160","duration":11,"annotations":[],"instructor":"Conner Ardman","thumbnail":""},"questions":[],"references":[],"codeExample":{"runtime":"javascript","arguments":["main.js"],"files":[{"name":"main.js","contents":"// Welcome to our Playground!\n\n","mode":420,"isEditable":true}],"reactConfig":null},"links":[],"preReqs":[],"keyTerms":[{"name":"Developer Tools","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A set of tooling provided by the browser to simplify the process of debugging\n  frontend code. For example, Chrome comes with the\n  \u003ca\n    class=\"Link Link--fe\"\n    href=\"https://developer.chrome.com/docs/devtools/\"\n    target=\"_blank\"\u003e\n    Chrome DevTools\n  \u003c/a\u003e.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]}],"section":"","hasCodeExample":false},{"uid":"writing-clean-javascript","name":"Writing Clean JavaScript","module":null,"releaseDate":"2022-02-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["frontendexpert"],"isAvailable":true},"description":"It's time to get your hands dirty and learn how to write some clean JavaScript code—oxymoron perhaps intended!","video":{"vimeoId":"669641385","duration":11,"annotations":[],"instructor":"Conner Ardman","thumbnail":""},"questions":[],"references":[],"codeExample":{"runtime":"javascript","arguments":["main.js"],"files":[{"name":"main.js","contents":"// Welcome to our Playground!\n\n","mode":420,"isEditable":true}],"reactConfig":null},"links":[],"preReqs":[],"keyTerms":[{"name":"Autoformatter","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A program that automatically formats code based on a set of rules,\n  making it easy to maintain stylistic consistency.\n  \u003ca class=\"Link Link--fe\" href=\"https://prettier.io/\" target=\"_blank\"\u003e\n    Prettier\n  \u003c/a\u003e\n  is the most common autoformatter, but there are other alternatives as well.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Style Guide","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A document describing the preferred coding style for a project or organization\n  used to promote clean and consistent code. Many style guides, such as the\n  \u003ca\n    class=\"Link Link--fe\"\n    href=\"https://google.github.io/styleguide/jsguide.html\"\n    target=\"_blank\"\u003e\n    Google JavaScript Style Guide\n  \u003c/a\u003e,\n  are open source.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]}],"section":"","hasCodeExample":false}]}
