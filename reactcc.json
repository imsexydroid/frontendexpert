{"name":"React Crash Course","lessons":[{"uid":"react-introduction","name":"Introduction","module":null,"releaseDate":"2022-05-24T00:00:00Z","acl":{"isFree":true,"isFreeForStudents":false,"productRequired":["frontendexpert"],"isAvailable":true},"description":"React is one of the most popular frontend libraries to create performant and maintainable user interfaces.\n\nMaster it, and you'll never go back to writing vanilla JavaScript again!","video":{"vimeoId":"687541831","duration":2,"annotations":[],"instructor":"Conner Ardman","thumbnail":""},"questions":[],"references":[],"codeExample":{"runtime":"react","arguments":["main.jsx"],"files":[{"name":"main.jsx","contents":"// Welcome to our Playground!\n\nfunction App() {\n  return \u003ch1\u003eHello World!\u003c/h1\u003e;\n}","mode":420,"isEditable":true}],"reactConfig":{"componentName":"App"}},"links":[],"preReqs":[],"keyTerms":[],"section":"","hasCodeExample":false},{"uid":"react-basics","name":"React Basics","module":null,"releaseDate":"2022-05-24T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["frontendexpert"],"isAvailable":true},"description":"This wouldn't be a FrontendExpert crash course without a video on important fundamentals. Let's jump in!","video":{"vimeoId":"686879564","duration":26,"annotations":[],"instructor":"Conner Ardman","thumbnail":""},"questions":[],"references":[],"codeExample":{"runtime":"react","arguments":["main.jsx"],"files":[{"name":"main.jsx","contents":"// Welcome to our Playground!\n\nfunction App() {\n  return \u003ch1\u003eHello World!\u003c/h1\u003e;\n}","mode":420,"isEditable":true}],"reactConfig":{"componentName":"App"}},"links":[],"preReqs":[],"keyTerms":[{"name":"React","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A JavaScript library developed by Facebook for building user interfaces. React\n  uses a component-based architecture to create interfaces with an intuitive\n  declarative approach.\n\u003c/p\u003e\n\u003c/div\u003e","url":"https://react.dev/","kinds":[]},{"name":"Component","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A reusable independent piece of a user interface. In modern React, components\n  are usually \u003cb\u003efunctional components\u003c/b\u003e, which are simply functions that\n  return \u003cb\u003eJSX\u003c/b\u003e.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"JSX","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  Short for JavaScript XML, a JavaScript syntax extension for inlining XML and\n  HTML in JavaScript. For example, this code could be compiled into standard\n  JavaScript function calls to create a heading element:\n\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"code-wrapper prism\"\u003e\n  \u003cpre\n    class=\"line-numbers\"\n  \u003e\u003ccode class=\"language-jsx\"\u003econst h1 = \u0026lt;h1\u0026gt;Hello World\u0026lt;/h1\u0026gt;;\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e","url":"https://react.dev/learn/writing-markup-with-jsx","kinds":[]},{"name":"ReactDOM","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A package used with React to work as the bridge between React\n  elements and the actual DOM in the browser. The most frequently used ReactDOM\n  function is the \u003cspan\u003erender\u003c/span\u003e function, which adds a component to\n  the DOM. For example:\n\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"code-wrapper prism\"\u003e\n  \u003cpre\n    class=\"line-numbers\"\n  \u003e\u003ccode class=\"language-jsx\"\u003eReactDOM.render(\n  \u0026lt;h1\u0026gt;Hello World\u0026lt;/h1\u0026gt;,\n  document.getElementById('root')\n);\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e","url":"https://react.dev/reference/react-dom","kinds":[]}],"section":"","hasCodeExample":false},{"uid":"jsx","name":"JSX","module":null,"releaseDate":"2022-05-24T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["frontendexpert"],"isAvailable":true},"description":"Short for JavaScript XML, JSX is what happens when you try to combine JavaScript and HTML into one.\n\nAnd it so happens to be extremely important when working with React!","video":{"vimeoId":"688250363","duration":18,"annotations":[],"instructor":"Conner Ardman","thumbnail":""},"questions":[],"references":[],"codeExample":{"runtime":"react","arguments":["main.jsxx"],"files":[{"name":"main.jsx","contents":"// Welcome to our Playground!\n\nfunction App() {\n  return (\n    \u003cdiv\u003e\n      \u003ch1\u003eHello World\u003c/h1\u003e\n      \u003cp\u003eReact is awesome!\u003c/p\u003e\n    \u003c/div\u003e\n  );\n}","mode":420,"isEditable":true}],"reactConfig":{"componentName":"App"}},"links":[],"preReqs":[],"keyTerms":[{"name":"React.Fragment","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A React container component that renders its children without adding\n  any additional DOM nodes. This can be used for returning multiple adjacent\n  elements without wrapping them in an unnecessary element. For example:\n\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"code-wrapper prism\"\u003e\n  \u003cpre\n    class=\"line-numbers\"\n  \u003e\u003ccode class=\"language-jsx\"\u003e\u0026lt;React.Fragment\u0026gt;\n  \u0026lt;h1\u0026gt;Hello World\u0026lt;/h1\u0026gt;\n  \u0026lt;p\u0026gt;React is awesome!\u0026lt;/p\u0026gt;\n\u0026lt;/React.Fragment\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  Fragments can also be created by using an empty tag, rather than the\n  \u003cspan\u003eFragment\u003c/span\u003e export from React. For example:\n\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"code-wrapper prism\"\u003e\n  \u003cpre\n    class=\"line-numbers\"\n  \u003e\u003ccode class=\"language-jsx\"\u003e\u0026lt;\u0026gt;\n  \u0026lt;h1\u0026gt;Hello World\u0026lt;/h1\u0026gt;\n  \u0026lt;p\u0026gt;React is Awesome!\u0026lt;/p\u0026gt;\n\u0026lt;/\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e","url":"https://react.dev/reference/react/Fragment","kinds":[]},{"name":"Conditional Rendering","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  The process of changing the returned element of a component based on some\n  condition. Conditional rendering can be achieved in a variety of ways, but\n  the most common utilizes ternary operators or short circuit evaluation. This\n  works because \u003cspan\u003enull\u003c/span\u003e, \u003cspan\u003eundefined\u003c/span\u003e, \u003cspan\u003etrue\u003c/span\u003e\n  and \u003cspan\u003efalse\u003c/span\u003e all do not render anything. For example:\n\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"code-wrapper prism\"\u003e\n  \u003cpre\n    class=\"line-numbers\"\n  \u003e\u003ccode class=\"language-jsx\"\u003e\u0026lt;React.Fragment\u0026gt;\n  { myBool ? \u0026lt;h1\u0026gt;Hello World\u0026lt;/h1\u0026gt; : null }\n  { myOtherBool \u0026\u0026 \u0026lt;p\u0026gt;React is Awesome!\u0026lt;/p\u0026gt; }\n\u0026lt;/React.Fragment\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e","url":"https://react.dev/learn/conditional-rendering","kinds":[]}],"section":"","hasCodeExample":false},{"uid":"props","name":"Props","module":null,"releaseDate":"2022-05-24T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["frontendexpert"],"isAvailable":true},"description":"In React, props are things you pass from component to component. That's pretty much it.\n\nThey're super useful though.","video":{"vimeoId":"686831214","duration":9,"annotations":[],"instructor":"Conner Ardman","thumbnail":""},"questions":[],"references":[],"codeExample":{"runtime":"react","arguments":["main.jsx"],"files":[{"name":"main.jsx","contents":"// Welcome to our Playground!\n\nfunction App() {\n  return (\n    \u003c\u003e\n      \u003cHello name=\"Conner\" /\u003e\n      \u003cHello name=\"Clement\" /\u003e\n    \u003c/\u003e\n  );\n}\n\nfunction Hello(props) {\n  return \u003ch1\u003eHello {props.name}\u003c/h1\u003e;\n}","mode":420,"isEditable":true}],"reactConfig":{"componentName":"App"}},"links":[],"preReqs":[],"keyTerms":[{"name":"Props","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A JavaScript object passed as a parameter to functional components, containing\n  all of the key-value pairs that were passed as attributes to the component.\n  For example, given this JSX:\n\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"code-wrapper prism\"\u003e\n  \u003cpre\n    class=\"line-numbers\"\n  \u003e\u003ccode class=\"language-jsx\"\u003e\u0026lt;MyComponent message=\"hello\" number={42} /\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  The \u003cspan\u003eMyComponent\u003c/span\u003e function would take in props with two key-value pairs:\n\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"code-wrapper prism\"\u003e\n  \u003cpre\n    class=\"line-numbers\"\n  \u003e\u003ccode class=\"language-jsx\"\u003efunction MyComponent(props) {\n  console.log(props.message); // \"hello\"\n  console.log(props.number); // 42\n  return \u0026lt;h1\u0026gt;Hello World!\u0026lt;/h1\u0026gt;;\n}\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e","url":"https://react.dev/learn/passing-props-to-a-component","kinds":[]}],"section":"","hasCodeExample":false},{"uid":"event-driven-programming-react","name":"Event-Driven Programming","module":null,"releaseDate":"2022-05-24T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["frontendexpert"],"isAvailable":true},"description":"The old adage \"better to be proactive than reactive\" doesn't apply here!\n\nWait...","video":{"vimeoId":"686843725","duration":10,"annotations":[],"instructor":"Conner Ardman","thumbnail":""},"questions":[],"references":[],"codeExample":{"runtime":"react","arguments":["main.jsx"],"files":[{"name":"main.jsx","contents":"// Welcome to our Playground!\n\nfunction App() {\n  return \u003cbutton onClick={handleClick}\u003eClick Me\u003c/button\u003e;\n}\n\nfunction handleClick() {\n  document.body.style.backgroundColor = 'red';\n}","mode":420,"isEditable":true}],"reactConfig":{"componentName":"App"}},"links":[],"preReqs":[],"keyTerms":[{"name":"SyntheticEvent","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  The object type passed to React event handler functions. Synthetic events\n  generally work the same as native events, but with more consistency across\n  browsers.\n\u003c/p\u003e\n\u003c/div\u003e","url":"https://react.dev/reference/react-dom/components/common#react-event-object","kinds":[]}],"section":"","hasCodeExample":false},{"uid":"state","name":"State","module":null,"releaseDate":"2022-05-24T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["frontendexpert"],"isAvailable":true},"description":"In React, state is how you store stuff. That's pretty much it.\n\nIt's super useful though.","video":{"vimeoId":"691246401","duration":25,"annotations":[],"instructor":"Conner Ardman","thumbnail":""},"questions":[],"references":[],"codeExample":{"runtime":"react","arguments":["main.jsx"],"files":[{"name":"main.jsx","contents":"// Welcome to our Playground!\n\nfunction App() {\n  const [count, setCount] = useState(0);\n  return (\n    \u003c\u003e\n      \u003cbutton onClick={() =\u003e setCount(count + 1)}\u003eIncrement\u003c/button\u003e\n      \u003cp\u003eCount: {count}\u003c/p\u003e\n    \u003c/\u003e\n  );\n}","mode":420,"isEditable":true}],"reactConfig":{"componentName":"App"}},"links":[],"preReqs":[],"keyTerms":[{"name":"State","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  Data specific to an instance of a component that persists between renders\n  and causes re-renders when changed.\n\u003c/p\u003e\n\u003c/div\u003e","url":"https://react.dev/learn/state-a-components-memory","kinds":[]},{"name":"Hook","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A JavaScript function used to \"hook\" into React features such as state and\n  the larger component lifecycle. The names of hooks always begin with\n  \u003cb\u003euse\u003c/b\u003e, and they cannot be called conditionally. \n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"useState","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A React hook for creating stateful components. The \u003cspan\u003euseState\u003c/span\u003e\n  function takes in an initial state value (or a function that returns that\n  initial value), and it returns an array with two elements: the current state\n  value and a setter function. For example:\n\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"code-wrapper prism\"\u003e\n  \u003cpre\n    class=\"line-numbers\"\n  \u003e\u003ccode class=\"language-javascript\"\u003econst [number, setNumber] = useState(42);\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e","url":"https://react.dev/reference/react/useState","kinds":[]},{"name":"useReducer","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  An alternative React hook for creating stateful components, oftentimes used\n  for more complex state. The \u003cspan\u003euseReducer\u003c/span\u003e function takes in a\n  reducer function and the initial state. It returns an array with two\n  elements: the current state value and a dispatch function.\n\u003c/p\u003e\n\n\u003cp\u003e\n  The reducer function takes in the previous state and an action object\n  as parameters, then it returns the new state. Usually the action object will\n  have a \u003cspan\u003etype\u003c/span\u003e property, which will be used in a switch statement.\n  For example:\n\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"code-wrapper prism\"\u003e\n  \u003cpre\n    class=\"line-numbers\"\n  \u003e\u003ccode class=\"language-javascript\"\u003efunction reducer(state, action) {\n  switch (action.type) {\n    case 'increment':\n      return {count: state.count + action.num};\n    case 'decrement':\n      return {count: state.count - action.num};\n    default:\n      throw new Error('Unknown action type');\n  }\n}\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  The dispatch function will then take in an object, which will be passed as\n  the action to the reducer function. For example:\n\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"code-wrapper prism\"\u003e\n  \u003cpre\n    class=\"line-numbers\"\n  \u003e\u003ccode class=\"language-jsx\"\u003econst [state, dispatch] = useReducer(reducer, {\n  count: 0\n});\n\nreturn (\n  \u0026lt;button onClick={() =\u003e dispatch({\n    type: 'increment',\n    num: 1\n  })}\u0026gt;Increment\u0026lt;/button\u0026gt;\n);\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e","url":"https://react.dev/reference/react/useReducer","kinds":[]},{"name":"Lifting State Up","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A common React pattern of moving shared state up to the lowest common\n  ancestor component in the tree. This allows for a single component to keep\n  track of the state and pass the current value and setter function down\n  through props.\n\u003c/p\u003e\n\u003c/div\u003e","url":"https://react.dev/learn/sharing-state-between-components#lifting-state-up-by-example","kinds":[]},{"name":"Controlled Component","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A pattern of using React state to control the current state of an input,\n  rather than allowing the native elements to control their own state (known as\n  an \u003cb\u003euncontrolled component\u003c/b\u003e). For example, an input can be controlled via\n  the \u003cspan\u003evalue\u003c/span\u003e and \u003cspan\u003eonChange\u003c/span\u003e props (note that in React,\n  \u003cspan\u003eonChange\u003c/span\u003e works the same as \u003cspan\u003eonInput\u003c/span\u003e). For example:\n\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"code-wrapper prism\"\u003e\n  \u003cpre\n    class=\"line-numbers\"\n  \u003e\u003ccode class=\"language-jsx\"\u003econst [value, setValue] = useState('');\nreturn \u0026lt;input value={value} onChange={e =\u0026gt; setValue(e.target.value)} /\u0026gt;;\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e","url":"https://react.dev/learn/sharing-state-between-components#controlled-and-uncontrolled-components","kinds":[]}],"section":"","hasCodeExample":false},{"uid":"component-lifecycle","name":"Component Lifecycle","module":null,"releaseDate":"2022-05-24T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["frontendexpert"],"isAvailable":true},"description":"Let's take a peek into the fascinating life of a React component. Buckle up!","video":{"vimeoId":"691249114","duration":15,"annotations":[],"instructor":"Conner Ardman","thumbnail":""},"questions":[],"references":[],"codeExample":{"runtime":"react","arguments":["main.jsx"],"files":[{"name":"main.jsx","contents":"// Welcome to our Playground!\n\nfunction App() {\n  const [isShown, setIsShown] = useState(true);\n\n  return (\n    \u003c\u003e\n      \u003cbutton onClick={() =\u003e setIsShown(!isShown)}\u003e\n        {isShown ? 'Hide Counter' : 'Show Counter'}\n      \u003c/button\u003e\n      {isShown ? \u003cCounter /\u003e : null}\n    \u003c/\u003e\n  );\n}\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n  const [bool, setBool] = useState(false);\n\n  return (\n    \u003c\u003e\n      \u003cbutton onClick={() =\u003e setBool(!bool)}\u003eRe-Render\u003c/button\u003e\n      \u003cbutton onClick={() =\u003e setCount(count + 1)}\u003eIncrement\u003c/button\u003e\n      \u003cp\u003eCount: {count}\u003c/p\u003e\n    \u003c/\u003e\n  );\n}","mode":420,"isEditable":true}],"reactConfig":{"componentName":"App"}},"links":[],"preReqs":[],"keyTerms":[{"name":"Component Lifecycle","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  The different stages that an instance of a component goes through.\n  There are three primary stages to the React lifecycle:\n\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\n    \u003cb\u003eMounting\u003c/b\u003e: The component renders for the first time.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003eUpdating\u003c/b\u003e: The component re-renders whenever state changes or the\n    props are updated by the parent component. A component can update many\n    times without ever mounting again.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cb\u003eUnmounting\u003c/b\u003e: The component is removed from the DOM. This is the final\n    stage of the lifecycle, and a component cannot update again once it has\n    been unmounted. However, a new instance of the component can still be mounted.\n  \u003c/li\u003e\n\u003c/ol\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"useEffect","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A React hook for performing side effects around the component lifecycle. The\n  \u003cspan\u003euseEffect\u003c/span\u003e hook takes in a callback function and an optional\n  dependency array.\n\u003c/p\u003e\n\n\u003cp\u003e\n  If no dependency array is provided, the callback function\n  will run on every render. If there is a dependency array provided, the\n  callback function will only run on \u003cb\u003emount\u003c/b\u003e or when an item in that array has\n  changed (note that objects must be new objects to be considered to have changed).\n  To avoid bugs related to effects using stale values from previous renders,\n  the dependency array should contain all values that the callback uses that\n  could change between renders.\n\u003c/p\u003e\n\n\u003cp\u003e\n  The callback function can also return a cleanup function, which will run on\n  \u003cb\u003eunmount\u003c/b\u003e and before the main effect function runs on any re-renders. For\n  example:\n\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"code-wrapper prism\"\u003e\n  \u003cpre\n    class=\"line-numbers\"\n  \u003e\u003ccode class=\"language-javascript\"\u003euseEffect(() =\u003e {\n  console.log('count changed');\n\n  return () =\u003e console.log('cleanup count changed effect');\n}, [count]);\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e","url":"https://react.dev/reference/react/useEffect","kinds":[]},{"name":"useLayoutEffect","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A React hook for performing side effects around the component lifecycle in the\n  same way as \u003cspan\u003euseEffect\u003c/span\u003e. The only difference between the two\n  functions is that \u003cspan\u003euseLayoutEffect\u003c/span\u003e works synchronously, meaning\n  the effects always finish running before the browser paints. This hook\n  should only be used for effects that will make visual changes to the DOM,\n  because otherwise the synchronous nature will give worse performance\n  than \u003cspan\u003euseEffect\u003c/span\u003e without any benefits.\n\u003c/p\u003e","url":"https://react.dev/reference/react/useLayoutEffect","kinds":[]}],"section":"","hasCodeExample":false},{"uid":"refs","name":"Refs","module":null,"releaseDate":"2022-05-24T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["frontendexpert"],"isAvailable":true},"description":"In React, refs are special things to store special stuff. That's pretty much it.\n\nThey're super useful though.","video":{"vimeoId":"691252392","duration":16,"annotations":[],"instructor":"Conner Ardman","thumbnail":""},"questions":[],"references":[],"codeExample":{"runtime":"react","arguments":["main.jsx"],"files":[{"name":"main.jsx","contents":"// Welcome to our Playground!\n\nexport default function App() {\n  const [seconds, setSeconds] = useState(0);\n  const timerID = useRef(null);\n\n  const startTimer = () =\u003e {\n    timerID.current = setInterval(() =\u003e {\n      setSeconds(currSeconds =\u003e currSeconds + 1);\n    }, 1000);\n  };\n\n  const stopTimer = () =\u003e {\n    clearInterval(timerID.current);\n  };\n\n  return (\n    \u003c\u003e\n      \u003cbutton onClick={startTimer}\u003eStart\u003c/button\u003e\n      \u003cbutton onClick={stopTimer}\u003eStop\u003c/button\u003e\n      \u003cp\u003eSeconds: {seconds}\u003c/p\u003e\n    \u003c/\u003e\n  );\n}","mode":420,"isEditable":true}],"reactConfig":{"componentName":"App"}},"links":[],"preReqs":[],"keyTerms":[{"name":"Ref","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A React value specific to an instance of a component that persists between\n  renders, but updating the value does not cause a re-render (unlike \u003cb\u003estate\u003c/b\u003e).\n  Refs are oftentimes used to reference the DOM node associated with the component,\n  which can be achieved with the \u003cspan\u003eref\u003c/span\u003e attribute.\n\u003c/p\u003e\n\u003c/div\u003e","url":"https://react.dev/learn/referencing-values-with-refs","kinds":[]},{"name":"useRef","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A React hook for creating a ref. The \u003cspan\u003euseRef\u003c/span\u003e hook takes in an\n  initial value and returns a ref. The ref is simply an object with a\n  \u003cspan\u003ecurrent\u003c/span\u003e property set to the current value.\n\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"code-wrapper prism\"\u003e\n  \u003cpre\n    class=\"line-numbers\"\n  \u003e\u003ccode class=\"language-jsx\"\u003econst div = useRef(null);\nreturn \u0026lt;div ref={div}\u0026gt;This div has a ref\u0026lt;/div\u0026gt;;\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e","url":"https://react.dev/reference/react/useRef","kinds":[]},{"name":"React.forwardRef","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A function used by a custom component to forward a ref attribute on to\n  a child element. The forwardRef function is a \u003cb\u003ehigher-order component\u003c/b\u003e\n  function, meaning it takes in a component and returns a new one. In this\n  case, it takes a component that has a second parameter for the ref. For\n  example:\n\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"code-wrapper prism\"\u003e\n  \u003cpre\n    class=\"line-numbers\"\n  \u003e\u003ccode class=\"language-jsx\"\u003efunction Parent() {\n  const ref = useRef(null);\n  return \u0026lt;Child ref={ref}\u0026gt;This child has a ref\u0026lt;/Child\u0026gt;;\n}\n\nconst child = forwardRef(function (props, ref) {\n  return \u0026lt;div ref={ref}\u0026gt;{props.children}\u0026lt;/div\u0026gt;;\n});\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e","url":"https://react.dev/reference/react/forwardRef","kinds":[]}],"section":"","hasCodeExample":false},{"uid":"imperative-react","name":"Imperative React","module":null,"releaseDate":"2022-05-24T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["frontendexpert"],"isAvailable":true},"description":"This is where React starts to get a bit complicated.\n\nYou've been warned.","video":{"vimeoId":"696293633","duration":9,"annotations":[],"instructor":"Conner Ardman","thumbnail":""},"questions":[],"references":[],"codeExample":{"runtime":"react","arguments":["main.jsx"],"files":[{"name":"main.jsx","contents":"// Welcome to our Playground!\n\nfunction App() {\n  const counterRef = useRef();\n  return (\n    \u003c\u003e\n      \u003cCounter ref={counterRef} /\u003e\n      \u003cbutton\n        onClick={() =\u003e {\n          counterRef.current.reset();\n        }}\u003e\n        Reset\n      \u003c/button\u003e\n    \u003c/\u003e\n  );\n}\n\nconst Counter = forwardRef(function (props, ref) {\n  const [count, setCount] = useState(0);\n\n  useImperativeHandle(ref, () =\u003e {\n    return {\n      reset: () =\u003e setCount(0),\n    };\n  });\n\n  return (\n    \u003c\u003e\n      \u003cbutton onClick={() =\u003e setCount(count + 1)}\u003eIncrement\u003c/button\u003e\n      \u003cp\u003eCount: {count}\u003c/p\u003e\n    \u003c/\u003e\n  );\n});","mode":420,"isEditable":true}],"reactConfig":{"componentName":"App"}},"links":[],"preReqs":[],"keyTerms":[{"name":"useImperativeHandle","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A React hook for customizing the value provided to a parent component when\n  using a \u003cb\u003eref\u003c/b\u003e. The \u003cspan\u003euseImperativeHandle\u003c/span\u003e hook takes in a\n  ref as the first parameter, followed by a callback function and an optional\n  dependency array.\n\u003c/p\u003e\n\n\u003cp\u003e\n  The return value of the callback function will act as the \u003cspan\u003ecurrent\u003c/span\u003e\n  value of the ref. If any item in the dependency array changes between renders,\n  the callback function will be invoked again to recalculate the\n  \u003cspan\u003ecurrent\u003c/span\u003e value.\n\u003c/p\u003e\n\n\u003cp\u003e\n  Since \u003cspan\u003euseImperativeHandle\u003c/span\u003e requires a ref on a custom\n  component, it should always be used with \u003cspan\u003eReact.forwardRef\u003c/span\u003e. For\n  example:\n\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"code-wrapper prism\"\u003e\n  \u003cpre\n    class=\"line-numbers\"\n  \u003e\u003ccode class=\"language-jsx\"\u003eforwardRef(function (props, ref) {\n  const [count, setCount] = useState(0);\n\n  useImperativeHandle(ref, () =\u003e {\n    return {\n      resetCount: () =\u003e setCount(0)\n    };\n  });\n\n  return (\n    \u0026lt;button onClick={() =\u003e setCount(count + 1)}\u0026gt;\n      Increment\n    \u0026lt;/button\u0026gt;\n  );\n  }\u003c/div\u003e","url":"https://react.dev/reference/react/useImperativeHandle","kinds":[]}],"section":"","hasCodeExample":false},{"uid":"contexts","name":"Contexts","module":null,"releaseDate":"2022-05-24T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["frontendexpert"],"isAvailable":true},"description":"Just as context is important in real life, so too is it important in a React codebase!","video":{"vimeoId":"687542307","duration":17,"annotations":[],"instructor":"Conner Ardman","thumbnail":""},"questions":[],"references":[],"codeExample":{"runtime":"react","arguments":["main.jsx"],"files":[{"name":"main.jsx","contents":"// Welcome to our Playground!\n\nconst UserContext = createContext({\n  name: null,\n});\n\nfunction App() {\n  return (\n    \u003c\u003e\n      \u003cUserContext.Provider\n        value={{\n          name: 'Conner',\n        }}\u003e\n        \u003cProfile /\u003e\n      \u003c/UserContext.Provider\u003e\n    \u003c/\u003e\n  );\n}\n\nfunction Profile() {\n  const user = useContext(UserContext);\n  return \u003cp\u003eHello {user.name}\u003c/p\u003e;\n}","mode":420,"isEditable":true}],"reactConfig":{"componentName":"App"}},"links":[],"preReqs":[],"keyTerms":[{"name":"Context","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A way to pass values down a component tree without needing to pass\n  props through every component (known as \u003cb\u003eprop drilling\u003c/b\u003e). Contexts\n  are generally useful for global state needed throughout an application or page,\n  which would be inconvenient to pass as props to every element needing it.\n\u003c/p\u003e\n\u003c/div\u003e","url":"https://react.dev/learn/passing-data-deeply-with-context","kinds":[]},{"name":"React.createContext","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A react function for creating a context object. This function takes in a default\n  value, which will be used if there is no matching context provider in a tree.\n  For example, this would create a context that could be used to keep track of\n  a user's selected theme:\n\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"code-wrapper prism\"\u003e\n  \u003cpre\n    class=\"line-numbers\"\n  \u003e\u003ccode class=\"language-javascript\"\u003econst ThemeContext = createContext({\n  mode: 'dark'\n});\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  This context would then have a \u003cb\u003eprovider\u003c/b\u003e component, which must be above\n  any components in the tree that wish to use the context. The \u003cspan\u003evalue\u003c/span\u003e prop\n  will be passed as the value to all children using the context. For example:\n\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"code-wrapper prism\"\u003e\n  \u003cpre\n    class=\"line-numbers\"\n  \u003e\u003ccode class=\"language-jsx\"\u003ereturn (\n  \u0026lt;ThemeContext.Provider value={{mode: 'dark'}}\u0026gt;\n    {props.children}\n  \u0026lt;/ThemeContext.Provider\u0026gt;\n);\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e","url":"https://react.dev/reference/react/createContext","kinds":[]},{"name":"useContext","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A React hook for using a context. The \u003cspan\u003euseContext\u003c/span\u003e function\n  takes in a context object created with \u003cspan\u003ecreateContext\u003c/span\u003e, and it\n  returns the value from the first \u003cb\u003econtext provider\u003c/b\u003e of that context\n  above it in the tree. For example:\n\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"code-wrapper prism\"\u003e\n  \u003cpre\n    class=\"line-numbers\"\n  \u003e\u003ccode class=\"language-javascript\"\u003econst theme = useContext(ThemeContext);\nconsole.log(theme.mode); // 'dark'\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e","url":"https://react.dev/reference/react/useContext","kinds":[]}],"section":"","hasCodeExample":false},{"uid":"component-lists","name":"Component Lists","module":null,"releaseDate":"2022-05-24T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["frontendexpert"],"isAvailable":true},"description":"Welcome to lists in React! Where this...\n\n\u0026#60;li\u0026#62;1\u0026#60;/li\u0026#62;\n\u0026#60;li\u0026#62;2\u0026#60;/li\u0026#62;\n\u0026#60;li\u0026#62;3\u0026#60;/li\u0026#62;\n\nTurns into this...\n\n\u0026#60;\u0026#62;{[1, 2, 3].map(num =\u003e \u0026#60;li key={num}\u0026#62;{num}\u0026#60;/li\u0026#62;)}\u0026#60;/\u0026#62;","video":{"vimeoId":"692029680","duration":9,"annotations":[],"instructor":"Conner Ardman","thumbnail":""},"questions":[],"references":[],"codeExample":{"runtime":"react","arguments":["main.jsx"],"files":[{"name":"main.jsx","contents":"// Welcome to our Playground!\n\nfunction App() {\n  const [items, setItems] = useState([]);\n  const [newItem, setNewItem] = useState('');\n\n  return (\n    \u003c\u003e\n      \u003cul\u003e\n        {items.map(item =\u003e {\n          return \u003cli key={item}\u003e{item}\u003c/li\u003e;\n        })}\n      \u003c/ul\u003e\n\n      \u003cinput type=\"text\" value={newItem} onChange={event =\u003e setNewItem(event.target.value)} /\u003e\n\n      \u003cbutton\n        onClick={() =\u003e {\n          setItems([...items, newItem]);\n          setNewItem('');\n        }}\u003e\n        Add List Item\n      \u003c/button\u003e\n    \u003c/\u003e\n  );\n}","mode":420,"isEditable":true}],"reactConfig":{"componentName":"App"}},"links":[],"preReqs":[],"keyTerms":[{"name":"Key Prop","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A prop passed to each element in a list to help React keep track of\n  those elements. Key props should be unique identifiers. By passing key props,\n  if the list changes, React can easily know which elements need to be mounted,\n  updated, and unmounted. For example, when rendering an array of messages\n  from the server, message IDs could be used as a key prop:\n\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"code-wrapper prism\"\u003e\n  \u003cpre\n    class=\"line-numbers\"\n  \u003e\u003ccode class=\"language-jsx\"\u003ereturn (\n  {\n    messages.map(message =\u003e {\n      return \u0026lt;p key={message.id}\u0026gt;{message.text}\u0026lt;/p\u0026gt;;\n    });\n  }\n);\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e","url":"https://react.dev/learn/rendering-lists#keeping-list-items-in-order-with-key","kinds":[]}],"section":"","hasCodeExample":false},{"uid":"performance","name":"Performance","module":null,"releaseDate":"2022-05-24T00:00:00Z","acl":{"isFree":true,"isFreeForStudents":false,"productRequired":["frontendexpert"],"isAvailable":true},"description":"To write performant React code, follow these two simple steps:\n\nStep 1: Never write the code below.\nuseEffect(() =\u003e {\n  setUselessNumber(uselessNumber + 1);\n}, [uselessNumber]);\n\nStep 2: Watch this video.","video":{"vimeoId":"691690378","duration":20,"annotations":[],"instructor":"Conner Ardman","thumbnail":""},"questions":[],"references":[],"codeExample":{"runtime":"react","arguments":["main.jsx"],"files":[{"name":"main.jsx","contents":"// Welcome to our Playground!\n\nfunction App() {\n  const [num, setNum] = useState(10);\n  const [logValue, setLogValue] = useState('');\n\n  const fibValue = useMemo(() =\u003e {\n    return fib(num);\n  }, [num]);\n\n  return (\n    \u003c\u003e\n      \u003ch1\u003e\n        Fib {num} is {fibValue}\n      \u003c/h1\u003e\n      \u003cinput type=\"number\" value={num} onChange={event =\u003e setNum(parseInt(event.target.value))} /\u003e\n    \u003c/\u003e\n  );\n}\n\nfunction fib(n) {\n  if (n === 2) return 1;\n  if (n === 1) return 0;\n  return fib(n - 1) + fib(n - 2);\n}","mode":420,"isEditable":true}],"reactConfig":{"componentName":"App"}},"links":[],"preReqs":[],"keyTerms":[{"name":"useMemo","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A React hook for memoizing a value. The \u003cspan\u003euseMemo\u003c/span\u003e function takes\n  in a function that returns a value to be memoized and a dependency array.\n  The \u003cspan\u003euseMemo\u003c/span\u003e function then returns the memoized value, and it\n  only calls the passed in function to recalculate the value if an item in the\n  dependency array changes. For example:\n\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"code-wrapper prism\"\u003e\n  \u003cpre\n    class=\"line-numbers\"\n  \u003e\u003ccode class=\"language-javascript\"\u003econst value = useMemo(() =\u003e slowFunction(x, y), [x, y]);\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e","url":"https://react.dev/reference/react/useMemo","kinds":[]},{"name":"useCallback","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A React hook for memoizing a function. This function works the exact same as\n  \u003cspan\u003euseMemo\u003c/span\u003e, except rather than memoizing the return value of a\n  function, it memoizes the entire function. This can be useful for a variety\n  of reasons, such as if a callback is passed into a dependency array that\n  requires it to not change on every render. For example:\n\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"code-wrapper prism\"\u003e\n  \u003cpre\n    class=\"line-numbers\"\n  \u003e\u003ccode class=\"language-javascript\"\u003econst callback = useCallback(() =\u003e console.log(x, y), [x, y]);\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e","url":"https://react.dev/reference/react/useCallback","kinds":[]},{"name":"React.memo","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A React \u003cb\u003ehigher-order component\u003c/b\u003e that takes in a component and returns\n  a memoized version of that component. If the props have not changed, wrapping\n  a component in \u003cspan\u003eReact.memo\u003c/span\u003e will cause it to avoid re-rendering.\n  This function can optionally also take in a second callback function as a\n  parameter to determine when the component should re-render with more fine\n  control. For example, this component will only need to re-render when the\n  number prop changes:\n\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"code-wrapper prism\"\u003e\n  \u003cpre\n    class=\"line-numbers\"\n  \u003e\u003ccode class=\"language-javascript\"\u003efunction areEqual(oldProps, newProps) {\n  return oldProps.number === newProps.render;\n}\n\nconst MemoizedComponent = React.memo(myComponent, areEqual);\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e","url":"https://react.dev/reference/react/memo","kinds":[]},{"name":"React.lazy","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A React function for dynamically importing components, creating a potential\n  performance boost when certain components are included in a module but not\n  necessary for the initial render. The \u003cspan\u003elazy\u003c/span\u003e function takes in a\n  callback function that is run when the component is used, and this function\n  should return a call to the \u003cspan\u003eimport\u003c/span\u003e function. For example:\n\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"code-wrapper prism\"\u003e\n  \u003cpre\n    class=\"line-numbers\"\n  \u003e\u003ccode class=\"language-javascript\"\u003econst LazyComponent = react.lazy(() =\u003e import('./MyComponent'));\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e","url":"https://react.dev/reference/react/lazy","kinds":[]},{"name":"React.Suspense","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A react component for specifying a fallback interface while a child component\n  is preparing to render (such as waiting for a lazy import). The\n  \u003cspan\u003eSuspense\u003c/span\u003e component takes a \u003cspan\u003efallback\u003c/span\u003e prop of a\n  React element, and its \u003cspan\u003echildren\u003c/span\u003e prop is a suspending component.\n  For example:\n\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"code-wrapper prism\"\u003e\n  \u003cpre\n    class=\"line-numbers\"\n  \u003e\u003ccode class=\"language-jsx\"\u003e\u0026lt;React.Suspense fallback={\u0026lt;LoadingIndicator /\u0026gt;}\u0026gt;\n  \u0026lt;LazyComponent /\u0026gt;\n\u0026lt;/React.Suspense\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e","url":"https://react.dev/reference/react/Suspense","kinds":[]}],"section":"","hasCodeExample":false},{"uid":"writing-custom-hooks","name":"Writing Custom Hooks","module":null,"releaseDate":"2022-05-24T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["frontendexpert"],"isAvailable":true},"description":"const useIUnderstandCustomHooks = () =\u003e {\n  const [IUnderstand, setIUnderstand] = useState(false);\n\n  useEffect(() =\u003e {\n    setIUnderstand(true);\n  }, [customHooksVideoIsWatched]);\n\n  return IUnderstand;\n}","video":{"vimeoId":"696294677","duration":7,"annotations":[],"instructor":"Conner Ardman","thumbnail":""},"questions":[],"references":[],"codeExample":{"runtime":"react","arguments":["main.jsx"],"files":[{"name":"main.jsx","contents":"// Welcome to our Playground!\n\nfunction App() {\n  const [count, setCount] = useState(0);\n  const [text, setText] = useState('');\n\n  const prevCount = usePrevious(count);\n  const prevText = usePrevious(text);\n\n  return (\n    \u003c\u003e\n      \u003cbutton onClick={() =\u003e setCount(count + 1)}\u003eIncrement\u003c/button\u003e\n      \u003cp\u003eCount: {count}\u003c/p\u003e\n      \u003cp\u003ePrevious render count: {prevCount}\u003c/p\u003e\n\n      \u003cinput value={text} onChange={event =\u003e setText(event.target.value)} /\u003e\n      \u003cp\u003ePrevious render text: {prevText}\u003c/p\u003e\n    \u003c/\u003e\n  );\n}\n\nfunction usePrevious(value) {\n  const prevRef = useRef();\n  useEffect(() =\u003e {\n    prevRef.current = value;\n  }, [value]);\n\n  return prevRef.current;\n}","mode":420,"isEditable":true}],"reactConfig":{"componentName":"App"}},"links":[],"preReqs":[],"keyTerms":[{"name":"Custom Hook","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n  \u003cp\u003e\n    A helper function that uses hooks. When hook code becomes redundant or\n    too long to easily read, it can be helpful to move that code into a helper\n    function. To denote that this helper function uses a hook itself, the name\n    should be prefixed with \u003cspan\u003euse\u003c/span\u003e just like the built-in React hook\n    functions.\n  \u003c/p\u003e\n\u003c/div\u003e","url":"https://react.dev/learn/reusing-logic-with-custom-hooks","kinds":[]}],"section":"","hasCodeExample":false},{"uid":"portals","name":"Portals","module":null,"releaseDate":"2022-05-24T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["frontendexpert"],"isAvailable":true},"description":"In React, portals are weirds things that do weird stuff. That's pretty much it.\n\nThey're super useful though.","video":{"vimeoId":"696759632","duration":8,"annotations":[],"instructor":"Conner Ardman","thumbnail":""},"questions":[],"references":[],"codeExample":{"runtime":"react","arguments":["main.jsx"],"files":[{"name":"main.jsx","contents":"// Welcome to our Playground!\n\nfunction App() {\n  const [isHidden, setIsHidden] = useState(true);\n  return (\n    \u003c\u003e\n      \u003cdiv className=\"container\"\u003e\n        \u003cbutton onClick={() =\u003e setIsHidden(!isHidden)}\u003e\n          {isHidden ? 'Show Modal' : 'Hide Modal'}\n        \u003c/button\u003e\n        {isHidden || \u003cModal /\u003e}\n      \u003c/div\u003e\n\n      \u003cp className=\"other\"\u003eOther Content\u003c/p\u003e\n    \u003c/\u003e\n  );\n}\n\nfunction Modal() {\n  return createPortal(\u003cp className=\"modal\"\u003eModal\u003c/p\u003e, document.getElementById('portal-root'));\n}","mode":420,"isEditable":true}],"reactConfig":{"componentName":"App"}},"links":[],"preReqs":[],"keyTerms":[{"name":"Portal","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n  \u003cp\u003e\n    A built-in method for rendering React elements into a DOM node outside\n    of the parent React tree.\n  \u003c/p\u003e\n\n  \u003cp\u003e\n    A portal is created by using the \u003cspan\u003eReactDOM.createPortal\u003c/span\u003e\n    function, which takes in a React element as the first parameter and the\n    DOM node as the second parameter. The element will be appended to that DOM\n    node, but it will still act the same as any other element in the original\n    React tree (it can still take props, read from context providers and have\n    events bubble up).\n  \u003c/p\u003e\n\n\u003c/div\u003e","url":"https://react.dev/reference/react-dom/createPortal","kinds":[]}],"section":"","hasCodeExample":false},{"uid":"class-based-components","name":"Class-Based Components","module":null,"releaseDate":"2022-05-24T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["frontendexpert"],"isAvailable":true},"description":"You'll never use these, but we still want you to watch a video about them.","video":{"vimeoId":"697535724","duration":20,"annotations":[],"instructor":"Conner Ardman","thumbnail":""},"questions":[],"references":[],"codeExample":{"runtime":"react","arguments":["main.jsx"],"files":[{"name":"main.jsx","contents":"// Welcome to our Playground!\n\nfunction App() {\n  return (\n    \u003c\u003e\n      \u003cCounter startingCount={10} /\u003e\n      \u003cCounter /\u003e\n    \u003c/\u003e\n  );\n}\n\nclass Counter extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: props.startingCount ?? 0,\n    };\n  }\n\n  render() {\n    return (\n      \u003c\u003e\n        \u003cbutton\n          onClick={() =\u003e {\n            this.setState({\n              count: this.state.count + 1,\n            });\n          }}\u003e\n          Increment\n        \u003c/button\u003e\n        \u003cp\u003eCount: {this.state.count}\u003c/p\u003e\n      \u003c/\u003e\n    );\n  }\n}","mode":420,"isEditable":true}],"reactConfig":{"componentName":"App"}},"links":[],"preReqs":[],"keyTerms":[{"name":"Class-Based Component","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A JavaScript class that extends the \u003cspan\u003eReact.Component\u003c/span\u003e class and\n  acts as a React component.\n\u003c/p\u003e\n\n\u003cp\u003e\n  All class-based components must implement a \u003cspan\u003erender\u003c/span\u003e method, which\n  usually returns JSX similar to a functional component.\n\u003c/p\u003e\n\n\u003cp\u003e\n  Instead of taking props as a parameter, all class-based components store their\n  props in the \u003cspan\u003ethis.props\u003c/span\u003e instance variable. Moreover, state\n  is stored in \u003cspan\u003ethis.state\u003c/span\u003e and updated using the\n  \u003cspan\u003ethis.setState\u003c/span\u003e method.\n\u003c/p\u003e\n\n\u003cp\u003e\n  Class-based components cannot use hooks. Instead, they can implement a\n  variety of lifecycle methods that work similar to hooks. These are some of the\n  more common ones:\n\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\n    \u003cspan\u003ecomponentDidMount\u003c/span\u003e: Runs immediately after the component mounts.\n    This method is usually used for setting up subscriptions.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cspan\u003ecomponentDidUpdate\u003c/span\u003e: Runs immediately after the component\n    updates due to a state or props change. A common use case for this method\n    is for network requests that depend on props or state.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cspan\u003ecomponentWillUnmount\u003c/span\u003e: Runs right before a component unmounts.\n    This method is usually used for cleaning up any subscriptions.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cspan\u003eshouldComponentUpdate\u003c/span\u003e: Similar to \u003cspan\u003eReact.memo\u003c/span\u003e,\n    determines if the component should re-render based on new props and new\n    state values.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e","url":"https://react.dev/reference/react/Component","kinds":[]}],"section":"","hasCodeExample":false},{"uid":"error-handling","name":"Error Handling","module":null,"releaseDate":"2022-05-24T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["frontendexpert"],"isAvailable":true},"description":"Yes—even the almighty React isn't immune to errors!\n\nIn this video, we'll explore how to handle these unwanted fiends.","video":{"vimeoId":"696759589","duration":9,"annotations":[],"instructor":"Conner Ardman","thumbnail":""},"questions":[],"references":[],"codeExample":{"runtime":"react","arguments":["main.jsx"],"files":[{"name":"main.jsx","contents":"// Welcome to our Playground!\n\nfunction App() {\n  return (\n    \u003c\u003e\n      \u003ch1\u003eHello World\u003c/h1\u003e\n      \u003cErrorBoundary fallback={\u003ch1\u003eThere was an error\u003c/h1\u003e}\u003e\n        \u003cBuggy /\u003e\n      \u003c/ErrorBoundary\u003e\n    \u003c/\u003e\n  );\n}\n\nfunction Buggy() {\n  throw new Error('error');\n  return \u003ch1\u003eBuggy\u003c/h1\u003e;\n}\n\nclass ErrorBoundary extends Component {\n  state = {hasError: false};\n\n  static getDerivedStateFromError(error) {\n    return {hasError: true};\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return this.props.fallback;\n    }\n    return this.props.children;\n  }\n}","mode":420,"isEditable":true}],"reactConfig":{"componentName":"App"}},"links":[],"preReqs":[],"keyTerms":[{"name":"Error Boundary","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A React component that catches errors in child components, preventing the\n  entire application from crashing from a single error.\n\u003c/p\u003e\n\n\u003cp\u003e\n  Error boundaries must be \u003cb\u003eclass-based components\u003c/b\u003e in order to take\n  advantage of two lifecycle methods:\n\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\n    \u003cspan\u003estatic getDerivedStateFromError(error)\u003c/span\u003e: Called during the render\n    phase and updates the current state of the component.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cspan\u003ecomponentDidCatch(error, errorInfo)\u003c/span\u003e: Called during the commit\n    phase for the purpose of side-effects related to the caught error.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\n  For example, this would be a complete error boundary component:\n\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"code-wrapper prism\"\u003e\n  \u003cpre\n    class=\"line-numbers\"\n  \u003e\u003ccode class=\"language-javascript\"\u003eclass ErrorBoundary extends Component {\n  state = { hasError: false };\n\n  static getDerivedStateFromError(error) {\n    return { hasError: true };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    logErrorToServer(error, errorInfo);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return this.props.fallback;\n    }\n\n    return this.props.children;\n  }\n}\u003c/div\u003e","url":"https://react.dev/reference/react/Component#catching-rendering-errors-with-an-error-boundary","kinds":[]}],"section":"","hasCodeExample":false},{"uid":"debugging-react","name":"Debugging React","module":null,"releaseDate":"2022-05-24T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["frontendexpert"],"isAvailable":true},"description":"console.log('in the useEffect');\nconsole.log('did this component render?');\nconsole.log('why does this keep re-rendering?');\nconsole.log('maybe VanillaJS isnt so bad after all');","video":{"vimeoId":"701036901","duration":14,"annotations":[],"instructor":"Conner Ardman","thumbnail":""},"questions":[],"references":[],"codeExample":{"runtime":"react","arguments":["main.jsx"],"files":[{"name":"main.jsx","contents":"// Welcome to our Playground!\n\nfunction App() {\n  return \u003ch1\u003eHello World!\u003c/h1\u003e;\n}","mode":420,"isEditable":true}],"reactConfig":{"componentName":"App"}},"links":[],"preReqs":[],"keyTerms":[{"name":"React.StrictMode","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A React component for putting a component in strict mode. Strict mode has two\n  primary benefits for assisting in debugging:\n\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\n    It provides warnings when using deprecated functions or lifecycle methods.\n  \u003c/li\u003e\n  \u003cli\u003e\n    It double-invokes some functions, such as functional components. This helps\n    find potential bugs related to side-effects in functions that should not\n    have side-effects.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e","url":"https://react.dev/reference/react/StrictMode","kinds":[]},{"name":"React.Profiler","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A React component for tracking how often a component renders. The Profiler\n  requires two props:\n\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\n    \u003cspan\u003eid\u003c/span\u003e: A unique identifier.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cspan\u003eonRender\u003c/span\u003e: A callback function to run after the component\n    renders (during the commit phase).\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\n  For performance reasons, the Profiler is ignored in production mode.\n\u003c/p\u003e\n\u003c/div\u003e","url":"https://react.dev/reference/react/Profiler","kinds":[]},{"name":"React DevTools","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  An official React browser extension for debugging React.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]}],"section":"","hasCodeExample":false},{"uid":"best-practices","name":"Best Practices","module":null,"releaseDate":"2022-05-24T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["frontendexpert"],"isAvailable":true},"description":"Look, just because you're using React doesn't mean your code is safe from becoming a steaming pile of spaghetti.\n\nFollow these best practices to avoid turning your code into a delicious Italian dish!","video":{"vimeoId":"701035308","duration":10,"annotations":[],"instructor":"Conner Ardman","thumbnail":""},"questions":[],"references":[],"codeExample":{"runtime":"react","arguments":["main.jsx"],"files":[{"name":"main.jsx","contents":"// Welcome to our Playground!\n\nfunction App() {\n  return \u003ch1\u003eHello World!\u003c/h1\u003e;\n}","mode":420,"isEditable":true}],"reactConfig":{"componentName":"App"}},"links":[],"preReqs":[],"keyTerms":[{"name":"DRY Component","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  Short for \u003ci\u003edon't repeat your code\u003c/i\u003e, a principle involving refactoring any\n  repeated code into helper functions. In React, we follow DRY principles by\n  moving shared interfaces into helper components and common hook logic into\n  custom hooks.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]}],"section":"","hasCodeExample":false},{"uid":"react-under-the-hood","name":"React Under The Hood","module":null,"releaseDate":"2022-05-24T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["frontendexpert"],"isAvailable":true},"description":"Okay, okay, React is awesome, beautiful, and magical.\n\nBut how does it work, exactly?","video":{"vimeoId":"700106280","duration":11,"annotations":[],"instructor":"Conner Ardman","thumbnail":""},"questions":[],"references":[],"codeExample":{"runtime":"react","arguments":["main.jsx"],"files":[{"name":"main.jsx","contents":"// Welcome to our Playground!\n\nfunction App() {\n  return \u003ch1\u003eHello World!\u003c/h1\u003e;\n}","mode":420,"isEditable":true}],"reactConfig":{"componentName":"App"}},"links":[],"preReqs":[],"keyTerms":[{"name":"React Element","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  The internal object representation of a node in the React tree. React elements\n  can represent either DOM nodes or React components.\n\u003c/p\u003e\n\u003c/div\u003e","url":"https://reactjs.org/blog/2015/12/18/react-components-elements-and-instances.html#elements-describe-the-tree","kinds":[]},{"name":"Virtual DOM","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A \"virtual\" representation of the DOM kept by React internally. Since this\n  data structure is not tied to the actual DOM, it is much quicker to update\n  than the DOM.\n\u003c/p\u003e\n\u003c/div\u003e","url":"https://reactjs.org/docs/faq-internals.html","kinds":[]},{"name":"Reconciliation","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  The algorithm used by React to determine the \"diff\" between two trees of\n  React elements. After each state update, React runs the reconciliation\n  algorithm to determine what has changed, and that changelog is sent to the\n  rendering function (in the case of the browser, this is from React DOM)\n  which can update the page using the information.\n\u003c/p\u003e\n\u003c/div\u003e","url":"https://reactjs.org/docs/reconciliation.html","kinds":[]}],"section":"","hasCodeExample":false},{"uid":"companion-libraries","name":"Companion Libraries","module":null,"releaseDate":"2022-05-24T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["frontendexpert"],"isAvailable":true},"description":"If you're already familiar with Redux, this video covers more than just Redux!\n\nIf you're not already familiar with Redux, just watch the video!","video":{"vimeoId":"699860371","duration":19,"annotations":[],"instructor":"Conner Ardman","thumbnail":""},"questions":[],"references":[],"codeExample":{"runtime":"react","arguments":["main.jsx"],"files":[{"name":"main.jsx","contents":"// Welcome to our Playground!\n\nfunction App() {\n  return \u003ch1\u003eHello World!\u003c/h1\u003e;\n}","mode":420,"isEditable":true}],"reactConfig":{"componentName":"App"}},"links":[],"preReqs":[],"keyTerms":[{"name":"Redux","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A JavaScript state-management library often used with React. Redux uses\n  reducer functions to create a global store that any component can read from.\n\u003c/p\u003e\n\u003c/div\u003e","url":"https://redux.js.org/","kinds":[]},{"name":"Recoil","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A JavaScript state-management library built for React. Recoil uses \u003cb\u003eatoms\u003c/b\u003e,\n  which are global pieces of state that any component can subscribe to.\n\u003c/p\u003e\n\u003c/div\u003e","url":"https://recoiljs.org/","kinds":[]},{"name":"Server-Side Rendering","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A method of rendering an application where the server generates the final\n  HTML page, rather than giving the client an empty HTML file and the scripts\n  needed to generate the page. Server-side rendering can create significant\n  performance improvements while also helping with search-engine optimization.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Static-Site Generation","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  Similar to server-side rendering, a method of rendering an application where\n  the server generates the final HTML pages, rather than giving the client an\n  empty HTML file and the scripts needed to generate the page. The key\n  distinction between static-site generation and server-side rendering is that\n  static-site generation creates all possible HTML files at build time, whereas\n  server-side rendering creates a new HTML file for each server request.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Next.js","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A JavaScript framework built around React. The primary use case for Next.js\n  is server-side rendering, but it also includes a wide variety of other tools\n  to simplify development and improve performance.\n\u003c/p\u003e\n\u003c/div\u003e","url":"https://nextjs.org/","kinds":[]},{"name":"Gatsby","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A JavaScript framework with the primary use case of static-site generation.\n  In addition to static-site generation, Gatsby also includes a wide variety of\n  other features that simplify development and improve performance, similar to\n  \u003cb\u003eNext.js\u003c/b\u003e.\n\u003c/p\u003e\n\u003c/div\u003e","url":"https://www.gatsbyjs.com/","kinds":[]},{"name":"React Router","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  A React library for declaratively controlling page routing from the\n  client-side.\n\u003c/p\u003e\n\u003c/div\u003e","url":"https://reactrouter.com/","kinds":[]}],"section":"","hasCodeExample":false}]}
